{"remainingRequest":"/Users/sagarrajani/Documents/angular-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/sagarrajani/Documents/angular-ui/node_modules/@angular/material/@angular/material.es5.js","dependencies":[{"path":"/Users/sagarrajani/Documents/angular-ui/node_modules/@angular/material/@angular/material.es5.js","mtime":1499360904000},{"path":"/Users/sagarrajani/Documents/angular-ui/node_modules/cache-loader/dist/cjs.js","mtime":1523334137747},{"path":"/Users/sagarrajani/Documents/angular-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_angular_core,_angular_cdk,_angular_platform_browser,_angular_common,rxjs_Subject,rxjs_Subscription,rxjs_observable_fromEvent,rxjs_observable_merge,rxjs_observable_of,_angular_forms,_angular_animations,_angular_http,rxjs_Observable,rxjs_observable_throw,rxjs_observable_forkJoin PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, Inject, Injectable, InjectionToken, Injector, Input, NgModule, NgZone, Optional, Output, Renderer2, SecurityContext, Self, SkipSelf, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef, isDevMode } from '@angular/core';\nimport { A11yModule, BACKSPACE, BasePortalHost, BidiModule, CDK_ROW_TEMPLATE, CDK_TABLE_TEMPLATE, CdkCell, CdkColumnDef, CdkHeaderCell, CdkHeaderRow, CdkRow, CdkTable, CdkTableModule, ComponentPortal, DELETE, DOWN_ARROW, Dir, Directionality, DomPortalHost, END, ENTER, ESCAPE, FocusTrap, FocusTrapDeprecatedDirective, FocusTrapDirective, FocusTrapFactory, HOME, InteractivityChecker, LEFT_ARROW, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_PROVIDER, ListKeyManager, LiveAnnouncer, ObserveContent, ObserveContentModule, PAGE_DOWN, PAGE_UP, Platform, PlatformModule, Portal, PortalHostDirective, PortalModule, RIGHT_ARROW, RxChain, SPACE, TAB, TemplatePortal, TemplatePortalDirective, UP_ARROW, auditTime, catchOperator, coerceBooleanProperty, coerceNumberProperty, doOperator, filter, finallyOperator, first, getSupportedInputTypes, isFakeMousedownFromScreenReader, map, share, startWith, switchMap, takeUntil } from '@angular/cdk';\nimport { DOCUMENT, DomSanitizer, HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { CommonModule, Location } from '@angular/common';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { FormGroupDirective, FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgForm, Validators } from '@angular/forms';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { _throw } from 'rxjs/observable/throw';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nvar MATERIAL_COMPATIBILITY_MODE = /*@__PURE__*/ new InjectionToken('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nfunction getMdCompatibilityInvalidPrefixError(prefix, nodeName) {\n    return Error(\"The \\\"\" + prefix + \"-\\\" prefix cannot be used in ng-material v1 compatibility mode. \" +\n        (\"It was used on an \\\"\" + nodeName.toLowerCase() + \"\\\" element.\"));\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nvar MAT_ELEMENTS_SELECTOR = \"\\n  [mat-button],\\n  [mat-fab],\\n  [mat-icon-button],\\n  [mat-mini-fab],\\n  [mat-raised-button],\\n  [matCardSubtitle],\\n  [matCardTitle],\\n  [matDialogActions],\\n  [matDialogClose],\\n  [matDialogContent],\\n  [matDialogTitle],\\n  [matLine],\\n  [matTabLabel],\\n  [matTabLink],\\n  [matTabNav],\\n  [matTooltip],\\n  mat-autocomplete,\\n  mat-button-toggle,\\n  mat-button-toggle,\\n  mat-button-toggle-group,\\n  mat-card,\\n  mat-card-actions,\\n  mat-card-content,\\n  mat-card-footer,\\n  mat-card-header,\\n  mat-card-subtitle,\\n  mat-card-title,\\n  mat-card-title-group,\\n  mat-cell,\\n  mat-checkbox,\\n  mat-chip,\\n  mat-dialog-actions,\\n  mat-dialog-container,\\n  mat-dialog-content,\\n  mat-divider,\\n  mat-error,\\n  mat-grid-list,\\n  mat-grid-tile,\\n  mat-grid-tile-footer,\\n  mat-grid-tile-header,\\n  mat-header-cell,\\n  mat-hint,\\n  mat-icon,\\n  mat-list,\\n  mat-list-item,\\n  mat-menu,\\n  mat-nav-list,\\n  mat-option,\\n  mat-placeholder,\\n  mat-progress-bar,\\n  mat-pseudo-checkbox,\\n  mat-radio-button,\\n  mat-radio-group,\\n  mat-row,\\n  mat-select,\\n  mat-sidenav,\\n  mat-sidenav-container,\\n  mat-slider,\\n  mat-spinner,\\n  mat-tab,\\n  mat-table,\\n  mat-tab-group,\\n  mat-toolbar\";\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nvar MD_ELEMENTS_SELECTOR = \"\\n  [md-button],\\n  [md-fab],\\n  [md-icon-button],\\n  [md-mini-fab],\\n  [md-raised-button],\\n  [mdCardSubtitle],\\n  [mdCardTitle],\\n  [mdDialogActions],\\n  [mdDialogClose],\\n  [mdDialogContent],\\n  [mdDialogTitle],\\n  [mdLine],\\n  [mdTabLabel],\\n  [mdTabLink],\\n  [mdTabNav],\\n  [mdTooltip],\\n  md-autocomplete,\\n  md-button-toggle,\\n  md-button-toggle,\\n  md-button-toggle-group,\\n  md-card,\\n  md-card-actions,\\n  md-card-content,\\n  md-card-footer,\\n  md-card-header,\\n  md-card-subtitle,\\n  md-card-title,\\n  md-card-title-group,\\n  md-cell,\\n  md-checkbox,\\n  md-chip,\\n  md-dialog-actions,\\n  md-dialog-container,\\n  md-dialog-content,\\n  md-divider,\\n  md-error,\\n  md-grid-list,\\n  md-grid-tile,\\n  md-grid-tile-footer,\\n  md-grid-tile-header,\\n  md-header-cell,\\n  md-hint,\\n  md-icon,\\n  md-list,\\n  md-list-item,\\n  md-menu,\\n  md-nav-list,\\n  md-option,\\n  md-placeholder,\\n  md-progress-bar,\\n  md-pseudo-checkbox,\\n  md-radio-button,\\n  md-radio-group,\\n  md-row,\\n  md-select,\\n  md-sidenav,\\n  md-sidenav-container,\\n  md-slider,\\n  md-spinner,\\n  md-tab,\\n  md-table,\\n  md-tab-group,\\n  md-toolbar\";\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nvar MatPrefixRejector = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     * @param {?} elementRef\n     */\n    function MatPrefixRejector(isCompatibilityMode, elementRef) {\n        if (!isCompatibilityMode) {\n            throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n        }\n    }\n    return MatPrefixRejector;\n}());\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nvar MdPrefixRejector = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} isCompatibilityMode\n     * @param {?} elementRef\n     */\n    function MdPrefixRejector(isCompatibilityMode, elementRef) {\n        if (isCompatibilityMode) {\n            throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n        }\n    }\n    return MdPrefixRejector;\n}());\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nvar CompatibilityModule = /*@__PURE__*/ (function () {\n    function CompatibilityModule() {\n    }\n    return CompatibilityModule;\n}());\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nvar NoConflictStyleCompatibilityMode = /*@__PURE__*/ (function () {\n    function NoConflictStyleCompatibilityMode() {\n    }\n    return NoConflictStyleCompatibilityMode;\n}());\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nvar MATERIAL_SANITY_CHECKS = /*@__PURE__*/ new InjectionToken('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n *\n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nvar MdCommonModule = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _document\n     * @param {?} _sanityChecksEnabled\n     */\n    function MdCommonModule(_document, _sanityChecksEnabled) {\n        this._document = _document;\n        /**\n         * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n         */\n        this._hasDoneGlobalChecks = false;\n        if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n            this._checkDoctype();\n            this._checkTheme();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    MdCommonModule.prototype._checkDoctype = function () {\n        if (!this._document.doctype) {\n            console.warn('Current document does not have a doctype. This may cause ' +\n                'some Angular Material components not to behave as expected.');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCommonModule.prototype._checkTheme = function () {\n        if (typeof getComputedStyle === 'function') {\n            var /** @type {?} */ testElement = this._document.createElement('div');\n            testElement.classList.add('mat-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n            if (getComputedStyle(testElement).display !== 'none') {\n                console.warn('Could not find Angular Material core theme. Most Material ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: https://material.angular.io/guide/theming');\n            }\n            this._document.body.removeChild(testElement);\n        }\n    };\n    return MdCommonModule;\n}());\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nvar MdLine = /*@__PURE__*/ (function () {\n    function MdLine() {\n    }\n    return MdLine;\n}());\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nvar MdLineSetter = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _lines\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdLineSetter(_lines, _renderer, _element) {\n        var _this = this;\n        this._lines = _lines;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._setLineClass(this._lines.length);\n        this._lines.changes.subscribe(function () {\n            _this._setLineClass(_this._lines.length);\n        });\n    }\n    /**\n     * @param {?} count\n     * @return {?}\n     */\n    MdLineSetter.prototype._setLineClass = function (count) {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(\"mat-\" + count + \"-line\", true);\n        }\n        else if (count > 3) {\n            this._setClass(\"mat-multi-line\", true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdLineSetter.prototype._resetClasses = function () {\n        this._setClass('mat-2-line', false);\n        this._setClass('mat-3-line', false);\n        this._setClass('mat-multi-line', false);\n    };\n    /**\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdLineSetter.prototype._setClass = function (className, isAdd) {\n        if (isAdd) {\n            this._renderer.addClass(this._element.nativeElement, className);\n        }\n        else {\n            this._renderer.removeClass(this._element.nativeElement, className);\n        }\n    };\n    return MdLineSetter;\n}());\nvar MdLineModule = /*@__PURE__*/ (function () {\n    function MdLineModule() {\n    }\n    return MdLineModule;\n}());\nvar RippleState = /*@__PURE__*/ (function () {\n    var RippleState = {};\n    RippleState.FADING_IN = 0;\n    RippleState.VISIBLE = 1;\n    RippleState.FADING_OUT = 2;\n    RippleState.HIDDEN = 3;\n    RippleState[RippleState.FADING_IN] = \"FADING_IN\";\n    RippleState[RippleState.VISIBLE] = \"VISIBLE\";\n    RippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\n    RippleState[RippleState.HIDDEN] = \"HIDDEN\";\n    return RippleState;\n}());\n/**\n * Reference to a previously launched ripple element.\n */\nvar RippleRef = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} element\n     * @param {?} config\n     */\n    function RippleRef(_renderer, element, config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /**\n         * Current state of the ripple reference.\n         */\n        this.state = RippleState.HIDDEN;\n    }\n    /**\n     * Fades out the ripple element.\n     * @return {?}\n     */\n    RippleRef.prototype.fadeOut = function () {\n        this._renderer.fadeOutRipple(this);\n    };\n    return RippleRef;\n}());\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nvar RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nvar RIPPLE_FADE_OUT_DURATION = 400;\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nvar RippleRenderer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} _ngZone\n     * @param {?} _ruler\n     * @param {?} platform\n     */\n    function RippleRenderer(elementRef, _ngZone, _ruler, platform) {\n        this._ngZone = _ngZone;\n        this._ruler = _ruler;\n        /**\n         * Whether the mouse is currently down or not.\n         */\n        this._isMousedown = false;\n        /**\n         * Events to be registered on the trigger element.\n         */\n        this._triggerEvents = new Map();\n        /**\n         * Set of currently active ripple references.\n         */\n        this._activeRipples = new Set();\n        /**\n         * Ripple config for all ripples created by events.\n         */\n        this.rippleConfig = {};\n        /**\n         * Whether mouse ripples should be created or not.\n         */\n        this.rippleDisabled = false;\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = elementRef.nativeElement;\n            // Specify events which need to be registered on the trigger.\n            this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n            this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n            this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n            // By default use the host element as trigger element.\n            this.setTriggerElement(this._containerElement);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeInRipple = function (pageX, pageY, config) {\n        var _this = this;\n        if (config === void 0) {\n            config = {};\n        }\n        var /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n        if (config.centered) {\n            pageX = containerRect.left + containerRect.width / 2;\n            pageY = containerRect.top + containerRect.height / 2;\n        }\n        else {\n            // Subtract scroll values from the coordinates because calculations below\n            // are always relative to the viewport rectangle.\n            var /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n            pageX -= scrollPosition.left;\n            pageY -= scrollPosition.top;\n        }\n        var /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n        var /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n        var /** @type {?} */ offsetX = pageX - containerRect.left;\n        var /** @type {?} */ offsetY = pageY - containerRect.top;\n        var /** @type {?} */ ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = offsetX - radius + \"px\";\n        ripple.style.top = offsetY - radius + \"px\";\n        ripple.style.height = radius * 2 + \"px\";\n        ripple.style.width = radius * 2 + \"px\";\n        // If the color is not set, the default CSS color will be used.\n        ripple.style.backgroundColor = config.color || null;\n        ripple.style.transitionDuration = duration + \"ms\";\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        var /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = RippleState.FADING_IN;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.VISIBLE;\n            if (!config.persistent && !_this._isMousedown) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    };\n    /**\n     * Fades out a ripple reference.\n     * @param {?} rippleRef\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutRipple = function (rippleRef) {\n        // For ripples that are not active anymore, don't re-un the fade-out animation.\n        if (!this._activeRipples.delete(rippleRef)) {\n            return;\n        }\n        var /** @type {?} */ rippleEl = rippleRef.element;\n        rippleEl.style.transitionDuration = RIPPLE_FADE_OUT_DURATION + \"ms\";\n        rippleEl.style.opacity = '0';\n        rippleRef.state = RippleState.FADING_OUT;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this.runTimeoutOutsideZone(function () {\n            rippleRef.state = RippleState.HIDDEN; /** @type {?} */\n            ((rippleEl.parentNode)).removeChild(rippleEl);\n        }, RIPPLE_FADE_OUT_DURATION);\n    };\n    /**\n     * Fades out all currently active ripples.\n     * @return {?}\n     */\n    RippleRenderer.prototype.fadeOutAll = function () {\n        this._activeRipples.forEach(function (ripple) { return ripple.fadeOut(); });\n    };\n    /**\n     * Sets the trigger element and registers the mouse events.\n     * @param {?} element\n     * @return {?}\n     */\n    RippleRenderer.prototype.setTriggerElement = function (element) {\n        var _this = this;\n        // Remove all previously register event listeners from the trigger element.\n        if (this._triggerElement) {\n            this._triggerEvents.forEach(function (fn, type) {\n                ((_this._triggerElement)).removeEventListener(type, fn);\n            });\n        }\n        if (element) {\n            // If the element is not null, register all event listeners on the trigger element.\n            this._ngZone.runOutsideAngular(function () {\n                _this._triggerEvents.forEach(function (fn, type) { return element.addEventListener(type, fn); });\n            });\n        }\n        this._triggerElement = element;\n    };\n    /**\n     * Listener being called on mousedown event.\n     * @param {?} event\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMousedown = function (event) {\n        if (!this.rippleDisabled) {\n            this._isMousedown = true;\n            this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n        }\n    };\n    /**\n     * Listener being called on mouseup event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseup = function () {\n        this._isMousedown = false;\n        // Fade-out all ripples that are completely visible and not persistent.\n        this._activeRipples.forEach(function (ripple) {\n            if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n                ripple.fadeOut();\n            }\n        });\n    };\n    /**\n     * Listener being called on mouseleave event.\n     * @return {?}\n     */\n    RippleRenderer.prototype.onMouseLeave = function () {\n        if (this._isMousedown) {\n            this.onMouseup();\n        }\n    };\n    /**\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n     * @param {?} fn\n     * @param {?=} delay\n     * @return {?}\n     */\n    RippleRenderer.prototype.runTimeoutOutsideZone = function (fn, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });\n    };\n    return RippleRenderer;\n}());\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    var /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    var /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nvar ScrollDispatcher = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    function ScrollDispatcher(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollableReferences = new Map();\n    }\n    /**\n     * Registers a Scrollable with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event in its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.register = function (scrollable) {\n        var _this = this;\n        var /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(function () { return _this._notify(); });\n        this.scrollableReferences.set(scrollable, scrollSubscription);\n    };\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.deregister = function (scrollable) {\n        var /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollableReferences.delete(scrollable);\n        }\n    };\n    /**\n     * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     * @param {?=} auditTimeInMs\n     * @param {?=} callback\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrolled = function (auditTimeInMs, callback) {\n        var _this = this;\n        if (auditTimeInMs === void 0) {\n            auditTimeInMs = DEFAULT_SCROLL_TIME;\n        }\n        // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n        if (!this._platform.isBrowser) {\n            return Subscription.EMPTY;\n        }\n        // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n        var /** @type {?} */ observable = auditTimeInMs > 0 ?\n            auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n            this._scrolled.asObservable();\n        this._scrolledCount++;\n        if (!this._globalSubscription) {\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return merge(fromEvent(window.document, 'scroll'), fromEvent(window, 'resize')).subscribe(function () { return _this._notify(); });\n            });\n        }\n        // Note that we need to do the subscribing from here, in order to be able to remove\n        // the global event listeners once there are no more subscriptions.\n        var /** @type {?} */ subscription = observable.subscribe(callback);\n        subscription.add(function () {\n            _this._scrolledCount--;\n            if (_this._globalSubscription && !_this.scrollableReferences.size && !_this._scrolledCount) {\n                _this._globalSubscription.unsubscribe();\n                _this._globalSubscription = null;\n            }\n        });\n        return subscription;\n    };\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.getScrollContainers = function (elementRef) {\n        var _this = this;\n        var /** @type {?} */ scrollingContainers = [];\n        this.scrollableReferences.forEach(function (_subscription, scrollable) {\n            if (_this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    };\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    ScrollDispatcher.prototype.scrollableContainsElement = function (scrollable, elementRef) {\n        var /** @type {?} */ element = elementRef.nativeElement;\n        var /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    };\n    /**\n     * Sends a notification that a scroll event has been fired.\n     * @return {?}\n     */\n    ScrollDispatcher.prototype._notify = function () {\n        this._scrolled.next();\n    };\n    return ScrollDispatcher;\n}());\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\nvar SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nvar ViewportRuler = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} scrollDispatcher\n     */\n    function ViewportRuler(scrollDispatcher) {\n        var _this = this;\n        // Subscribe to scroll and resize events and update the document rectangle on changes.\n        scrollDispatcher.scrolled(0, function () { return _this._cacheViewportGeometry(); });\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportRect = function (documentRect) {\n        if (documentRect === void 0) {\n            documentRect = this._documentRect;\n        }\n        // Cache the document bounding rect so that we don't recompute it for multiple calls.\n        if (!documentRect) {\n            this._cacheViewportGeometry();\n            documentRect = this._documentRect;\n        }\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        var /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n        var /** @type {?} */ height = window.innerHeight;\n        var /** @type {?} */ width = window.innerWidth;\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height: height,\n            width: width,\n        };\n    };\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @param {?=} documentRect\n     * @return {?}\n     */\n    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\n        if (documentRect === void 0) {\n            documentRect = this._documentRect;\n        }\n        // Cache the document bounding rect so that we don't recompute it for multiple calls.\n        if (!documentRect) {\n            this._cacheViewportGeometry();\n            documentRect = this._documentRect;\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        var /** @type {?} */ top = -((documentRect)).top || document.body.scrollTop || window.scrollY ||\n            document.documentElement.scrollTop || 0;\n        var /** @type {?} */ left = -((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement.scrollLeft || 0;\n        return { top: top, left: left };\n    };\n    /**\n     * Caches the latest client rectangle of the document element.\n     * @return {?}\n     */\n    ViewportRuler.prototype._cacheViewportGeometry = function () {\n        this._documentRect = document.documentElement.getBoundingClientRect();\n    };\n    return ViewportRuler;\n}());\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, scrollDispatcher) {\n    return parentRuler || new ViewportRuler(scrollDispatcher);\n}\nvar VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), ViewportRuler], ScrollDispatcher],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nvar MD_RIPPLE_GLOBAL_OPTIONS = /*@__PURE__*/ new InjectionToken('md-ripple-global-options');\nvar MdRipple = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} platform\n     * @param {?} globalOptions\n     */\n    function MdRipple(elementRef, ngZone, ruler, platform, globalOptions) {\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        /**\n         * If set, the normal duration of ripple animations is divided by this value. For example,\n         * setting it to 0.5 will cause the animations to take twice as long.\n         * A changed speedFactor will not modify the fade-out duration of the ripples.\n         */\n        this.speedFactor = 1;\n        this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n        this._globalOptions = globalOptions ? globalOptions : {};\n        this._updateRippleRenderer();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnChanges = function (changes) {\n        if (changes['trigger'] && this.trigger) {\n            this._rippleRenderer.setTriggerElement(this.trigger);\n        }\n        this._updateRippleRenderer();\n    };\n    /**\n     * @return {?}\n     */\n    MdRipple.prototype.ngOnDestroy = function () {\n        // Set the trigger element to null to cleanup all listeners.\n        this._rippleRenderer.setTriggerElement(null);\n    };\n    /**\n     * Launches a manual ripple at the specified position.\n     * @param {?} pageX\n     * @param {?} pageY\n     * @param {?=} config\n     * @return {?}\n     */\n    MdRipple.prototype.launch = function (pageX, pageY, config) {\n        if (config === void 0) {\n            config = this.rippleConfig;\n        }\n        return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n    };\n    /**\n     * Fades out all currently showing ripple elements.\n     * @return {?}\n     */\n    MdRipple.prototype.fadeOutAll = function () {\n        this._rippleRenderer.fadeOutAll();\n    };\n    Object.defineProperty(MdRipple.prototype, \"rippleConfig\", {\n        /**\n         * Ripple configuration from the directive's input values.\n         * @return {?}\n         */\n        get: function () {\n            return {\n                centered: this.centered,\n                speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n                radius: this.radius,\n                color: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Updates the ripple renderer with the latest ripple configuration.\n     * @return {?}\n     */\n    MdRipple.prototype._updateRippleRenderer = function () {\n        this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n        this._rippleRenderer.rippleConfig = this.rippleConfig;\n    };\n    return MdRipple;\n}());\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nvar Scrollable = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _scroll\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     */\n    function Scrollable(_elementRef, _scroll, _ngZone, _renderer) {\n        this._elementRef = _elementRef;\n        this._scroll = _scroll;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._elementScrolled = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnInit = function () {\n        var _this = this;\n        this._scrollListener = this._ngZone.runOutsideAngular(function () {\n            return _this._renderer.listen(_this.getElementRef().nativeElement, 'scroll', function (event) {\n                _this._elementScrolled.next(event);\n            });\n        });\n        this._scroll.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.ngOnDestroy = function () {\n        this._scroll.deregister(this);\n        if (this._scrollListener) {\n            this._scrollListener();\n            this._scrollListener = null;\n        }\n    };\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    Scrollable.prototype.elementScrolled = function () {\n        return this._elementScrolled.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    Scrollable.prototype.getElementRef = function () {\n        return this._elementRef;\n    };\n    return Scrollable;\n}());\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMdScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar CloseScrollStrategy = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _scrollDispatcher\n     */\n    function CloseScrollStrategy(_scrollDispatcher) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._scrollSubscription = null;\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.attach = function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMdScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /**\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.enable = function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            this._scrollSubscription = this._scrollDispatcher.scrolled(0, function () {\n                if (_this._overlayRef.hasAttached()) {\n                    _this._overlayRef.detach();\n                }\n                _this.disable();\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.disable = function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return CloseScrollStrategy;\n}());\n/**\n * Scroll strategy that doesn't do anything.\n */\nvar NoopScrollStrategy = /*@__PURE__*/ (function () {\n    function NoopScrollStrategy() {\n    }\n    /**\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.enable = function () { };\n    /**\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.disable = function () { };\n    /**\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.attach = function () { };\n    return NoopScrollStrategy;\n}());\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar BlockScrollStrategy = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _viewportRuler\n     */\n    function BlockScrollStrategy(_viewportRuler) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n    }\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.attach = function () { };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.enable = function () {\n        if (this._canBeEnabled()) {\n            var /** @type {?} */ root = document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = -this._previousScrollPosition.left + \"px\";\n            root.style.top = -this._previousScrollPosition.top + \"px\";\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.disable = function () {\n        if (this._isEnabled) {\n            this._isEnabled = false;\n            document.documentElement.style.left = this._previousHTMLStyles.left;\n            document.documentElement.style.top = this._previousHTMLStyles.top;\n            document.documentElement.classList.remove('cdk-global-scrollblock');\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype._canBeEnabled = function () {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        var /** @type {?} */ body = document.body;\n        var /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar RepositionScrollStrategy = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?=} _config\n     */\n    function RepositionScrollStrategy(_scrollDispatcher, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMdScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /**\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.enable = function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            var /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, function () {\n                _this._overlayRef.updatePosition();\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.disable = function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return RepositionScrollStrategy;\n}());\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     */\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = function () { return new NoopScrollStrategy(); };\n        /**\n         * Close the overlay as soon as the user scrolls.\n         */\n        this.close = function () { return new CloseScrollStrategy(_this._scrollDispatcher); };\n        /**\n         * Block scrolling.\n         */\n        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler); };\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, config); };\n    }\n    return ScrollStrategyOptions;\n}());\nvar ScrollDispatchModule = /*@__PURE__*/ (function () {\n    function ScrollDispatchModule() {\n    }\n    return ScrollDispatchModule;\n}());\nvar MdRippleModule = /*@__PURE__*/ (function () {\n    function MdRippleModule() {\n    }\n    return MdRippleModule;\n}());\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nfunction mixinColor(base, defaultColor) {\n    return (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        /**\n         * @param {...?} args\n         */\n        function class_1() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, args) || this;\n            // Set the default color that can be specified from the mixin.\n            _this.color = defaultColor;\n            return _this;\n        }\n        Object.defineProperty(class_1.prototype, \"color\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._color; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                var /** @type {?} */ colorPalette = value || defaultColor;\n                if (colorPalette !== this._color) {\n                    if (this._color) {\n                        this._renderer.removeClass(this._elementRef.nativeElement, \"mat-\" + this._color);\n                    }\n                    if (colorPalette) {\n                        this._renderer.addClass(this._elementRef.nativeElement, \"mat-\" + colorPalette);\n                    }\n                    this._color = colorPalette;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return class_1;\n    }(base));\n}\n/**\n * \\@docs-private\n */\nvar MdPseudoCheckboxBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdPseudoCheckboxBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdPseudoCheckboxBase;\n}());\nvar _MdPseudoCheckboxBase = /*@__PURE__*/ mixinColor(MdPseudoCheckboxBase, 'accent');\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nvar MdPseudoCheckbox = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdPseudoCheckbox, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdPseudoCheckbox(elementRef, renderer) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        /**\n         * Display state of the checkbox.\n         */\n        _this.state = 'unchecked';\n        /**\n         * Whether the checkbox is disabled.\n         */\n        _this.disabled = false;\n        return _this;\n    }\n    return MdPseudoCheckbox;\n}(_MdPseudoCheckboxBase));\nvar MdSelectionModule = /*@__PURE__*/ (function () {\n    function MdSelectionModule() {\n    }\n    return MdSelectionModule;\n}());\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinDisabled(base) {\n    return (function (_super) {\n        tslib_1.__extends(class_2, _super);\n        /**\n         * @param {...?} args\n         */\n        function class_2() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, args) || this;\n            _this._disabled = false;\n            return _this;\n        }\n        Object.defineProperty(class_2.prototype, \"disabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._disabled; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) { this._disabled = coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        return class_2;\n    }(base));\n}\n/**\n * \\@docs-private\n */\nvar MdOptgroupBase = /*@__PURE__*/ (function () {\n    function MdOptgroupBase() {\n    }\n    return MdOptgroupBase;\n}());\nvar _MdOptgroupMixinBase = /*@__PURE__*/ mixinDisabled(MdOptgroupBase);\n// Counter for unique group ids.\nvar _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nvar MdOptgroup = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdOptgroup, _super);\n    function MdOptgroup() {\n        var _this = _super.apply(this, arguments) || this;\n        /**\n         * Unique id for the underlying label.\n         */\n        _this._labelId = \"mat-optgroup-label-\" + _uniqueOptgroupIdCounter++;\n        return _this;\n    }\n    return MdOptgroup;\n}(_MdOptgroupMixinBase));\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nvar MdOptionSelectionChange = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} source\n     * @param {?=} isUserInput\n     */\n    function MdOptionSelectionChange(source, isUserInput) {\n        if (isUserInput === void 0) {\n            isUserInput = false;\n        }\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n    return MdOptionSelectionChange;\n}());\n/**\n * Single option inside of a `<md-select>` element.\n */\nvar MdOption = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _element\n     * @param {?} group\n     * @param {?} _isCompatibilityMode\n     */\n    function MdOption(_element, group, _isCompatibilityMode) {\n        this._element = _element;\n        this.group = group;\n        this._isCompatibilityMode = _isCompatibilityMode;\n        this._selected = false;\n        this._active = false;\n        /**\n         * Whether the option is disabled.\n         */\n        this._disabled = false;\n        this._id = \"md-option-\" + _uniqueIdCounter++;\n        /**\n         * Whether the wrapping component is in multiple selection mode.\n         */\n        this.multiple = false;\n        /**\n         * Event emitted when the option is selected or deselected.\n         */\n        this.onSelectionChange = new EventEmitter();\n    }\n    Object.defineProperty(MdOption.prototype, \"id\", {\n        /**\n         * The unique ID of the option.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"selected\", {\n        /**\n         * Whether or not the option is currently selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"disabled\", {\n        /**\n         * Whether the option is disabled.\n         * @return {?}\n         */\n        get: function () { return (this.group && this.group.disabled) || this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"active\", {\n        /**\n         * Whether or not the option is currently active and ready to be selected.\n         * An active option displays styles as if it is focused, but the\n         * focus is actually retained somewhere else. This comes in handy\n         * for components like autocomplete where focus must remain on the input.\n         * @return {?}\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdOption.prototype, \"viewValue\", {\n        /**\n         * The displayed value of the option. It is necessary to show the selected option in the\n         * select's trigger.\n         * @return {?}\n         */\n        get: function () {\n            // TODO(kara): Add input property alternative for node envs.\n            return (this._getHostElement().textContent || '').trim();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects the option.\n     * @return {?}\n     */\n    MdOption.prototype.select = function () {\n        this._selected = true;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Deselects the option.\n     * @return {?}\n     */\n    MdOption.prototype.deselect = function () {\n        this._selected = false;\n        this._emitSelectionChangeEvent();\n    };\n    /**\n     * Sets focus onto this option.\n     * @return {?}\n     */\n    MdOption.prototype.focus = function () {\n        this._getHostElement().focus();\n    };\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setActiveStyles = function () {\n        this._active = true;\n    };\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     * @return {?}\n     */\n    MdOption.prototype.setInactiveStyles = function () {\n        this._active = false;\n    };\n    /**\n     * Ensures the option is selected when activated from the keyboard.\n     * @param {?} event\n     * @return {?}\n     */\n    MdOption.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    };\n    /**\n     * Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.\n     * @return {?}\n     */\n    MdOption.prototype._selectViaInteraction = function () {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._emitSelectionChangeEvent(true);\n        }\n    };\n    /**\n     * Returns the correct tabindex for the option depending on disabled state.\n     * @return {?}\n     */\n    MdOption.prototype._getTabIndex = function () {\n        return this.disabled ? '-1' : '0';\n    };\n    /**\n     * Fetches the host DOM element.\n     * @return {?}\n     */\n    MdOption.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    /**\n     * Emits the selection change event.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    MdOption.prototype._emitSelectionChangeEvent = function (isUserInput) {\n        if (isUserInput === void 0) {\n            isUserInput = false;\n        }\n        this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n    };\n    return MdOption;\n}());\nvar MdOptionModule = /*@__PURE__*/ (function () {\n    function MdOptionModule() {\n    }\n    return MdOptionModule;\n}());\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nvar OverlayState = /*@__PURE__*/ (function () {\n    function OverlayState() {\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * The direction of the text in the overlay panel.\n         */\n        this.direction = 'ltr';\n        // TODO(jelbourn): configuration still to add\n        // - focus trap\n        // - disable pointer events\n        // - z-index\n    }\n    return OverlayState;\n}());\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar OverlayRef = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _portalHost\n     * @param {?} _pane\n     * @param {?} _state\n     * @param {?} _scrollStrategy\n     * @param {?} _ngZone\n     */\n    function OverlayRef(_portalHost, _pane, _state, _scrollStrategy, _ngZone) {\n        this._portalHost = _portalHost;\n        this._pane = _pane;\n        this._state = _state;\n        this._scrollStrategy = _scrollStrategy;\n        this._ngZone = _ngZone;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        _scrollStrategy.attach(this);\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        get: function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches the overlay to a portal instance and adds the backdrop.\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = function (portal) {\n        var /** @type {?} */ attachResult = this._portalHost.attach(portal);\n        // Update the pane element with the given state configuration.\n        this._updateStackingOrder();\n        this.updateSize();\n        this.updateDirection();\n        this.updatePosition();\n        this._scrollStrategy.enable();\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._state.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._state.panelClass) {\n            this._pane.classList.add(this._state.panelClass);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} Resolves when the overlay has been detached.\n     */\n    OverlayRef.prototype.detach = function () {\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        this._scrollStrategy.disable();\n        var /** @type {?} */ detachmentResult = this._portalHost.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        return detachmentResult;\n    };\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.dispose();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._portalHost.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._detachments.next();\n        this._detachments.complete();\n    };\n    /**\n     * Checks whether the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = function () {\n        return this._portalHost.hasAttached();\n    };\n    /**\n     * Returns an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = function () {\n        return this._backdropClick.asObservable();\n    };\n    /**\n     * Returns an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.attachments = function () {\n        return this._attachments.asObservable();\n    };\n    /**\n     * Returns an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachments = function () {\n        return this._detachments.asObservable();\n    };\n    /**\n     * Gets the current state config of the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.getState = function () {\n        return this._state;\n    };\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = function () {\n        if (this._state.positionStrategy) {\n            this._state.positionStrategy.apply(this._pane);\n        }\n    };\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype.updateDirection = function () {\n        this._pane.setAttribute('dir', /** @type {?} */ ((this._state.direction)));\n    };\n    /**\n     * Updates the size of the overlay based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = function () {\n        if (this._state.width || this._state.width === 0) {\n            this._pane.style.width = formatCssUnit(this._state.width);\n        }\n        if (this._state.height || this._state.height === 0) {\n            this._pane.style.height = formatCssUnit(this._state.height);\n        }\n        if (this._state.minWidth || this._state.minWidth === 0) {\n            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n        }\n        if (this._state.minHeight || this._state.minHeight === 0) {\n            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n        }\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = function () {\n        var _this = this;\n        this._backdropElement = document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._state.backdropClass) {\n            this._backdropElement.classList.add(this._state.backdropClass);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function () { return _this._backdropClick.next(null); });\n        // Add class to fade-in the backdrop after one frame.\n        requestAnimationFrame(function () {\n            if (_this._backdropElement) {\n                _this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n            }\n        });\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = function () {\n        if (this._pane.nextSibling) {\n            ((this._pane.parentNode)).appendChild(this._pane);\n        }\n    };\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = function () {\n        var _this = this;\n        var /** @type {?} */ backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            var /** @type {?} */ finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._state.backdropClass) {\n                backdropToDetach.classList.remove(this._state.backdropClass);\n            }\n            backdropToDetach.addEventListener('transitionend', finishDetach_1);\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(function () {\n                setTimeout(finishDetach_1, 500);\n            });\n        }\n    };\n    return OverlayRef;\n}());\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value) {\n    return typeof value === 'string' ? (value) : value + \"px\";\n}\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar ConnectionPositionPair = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     */\n    function ConnectionPositionPair(origin, overlay) {\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nvar ScrollableViewProperties = /*@__PURE__*/ (function () {\n    function ScrollableViewProperties() {\n    }\n    return ScrollableViewProperties;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar ConnectedPositionStrategy = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _connectedTo\n     * @param {?} _originPos\n     * @param {?} _overlayPos\n     * @param {?} _viewportRuler\n     */\n    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\n        this._connectedTo = _connectedTo;\n        this._originPos = _originPos;\n        this._overlayPos = _overlayPos;\n        this._viewportRuler = _viewportRuler;\n        this._dir = 'ltr';\n        /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         */\n        this._offsetX = 0;\n        /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         */\n        this._offsetY = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        this._onPositionChange = new Subject();\n        this._origin = this._connectedTo.nativeElement;\n        this.withFallbackPosition(_originPos, _overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        get: function () {\n            return this._dir === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        get: function () {\n            return this._onPositionChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * To be used to for any cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = function () { };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS styles.\n     * @return {?} Resolves when the styles have been applied.\n     */\n    ConnectedPositionStrategy.prototype.apply = function (element) {\n        // Cache the overlay pane element in case re-calculating position is necessary\n        this._pane = element;\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = element.getBoundingClientRect();\n        // We use the viewport rect to determine whether a position would go off-screen.\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        // Fallback point if none of the fallbacks fit into the viewport.\n        var /** @type {?} */ fallbackPoint;\n        var /** @type {?} */ fallbackPosition;\n        // We want to place the overlay in the first of the preferred positions such that the\n        // overlay fits on-screen.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the (x, y) point of connection on the origin, and then use that to get the\n            // (top, left) coordinate for the overlay at `pos`.\n            var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n            var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n            // If the overlay in the calculated position fits on-screen, put it there and we're done.\n            if (overlayPoint.fitsInViewport) {\n                this._setElementPosition(element, overlayRect, overlayPoint, pos);\n                // Save the last connected position in case the position needs to be re-calculated.\n                this._lastConnectedPosition = pos;\n                // Notify that the position has been changed along with its change properties.\n                var /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n                var /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n                this._onPositionChange.next(positionChange);\n                return;\n            }\n            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n                fallbackPoint = overlayPoint;\n                fallbackPosition = pos;\n            }\n        }\n        // If none of the preferred positions were in the viewport, take the one\n        // with the largest visible area.\n        this._setElementPosition(element, overlayRect, /** @type {?} */ ((fallbackPoint)), /** @type {?} */ ((fallbackPosition)));\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n        var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n        this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\n        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n        this._dir = dir;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\n        return this._isRtl ? rect.right : rect.left;\n    };\n    /**\n     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n     * @param {?} rect\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\n        return this._isRtl ? rect.left : rect.right;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\n        var /** @type {?} */ originStartX = this._getStartX(originRect);\n        var /** @type {?} */ originEndX = this._getEndX(originRect);\n        var /** @type {?} */ x;\n        if (pos.originX == 'center') {\n            x = originStartX + (originRect.width / 2);\n        }\n        else {\n            x = pos.originX == 'start' ? originStartX : originEndX;\n        }\n        var /** @type {?} */ y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected, as well as how much of the element\n     * would be inside the viewport at that position.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} viewportRect\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, viewportRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n        // relative to the origin point.\n        var /** @type {?} */ overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n        }\n        var /** @type {?} */ overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        var /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n        var /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n        // How much the overlay would overflow at this position, on each side.\n        var /** @type {?} */ leftOverflow = 0 - x;\n        var /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n        var /** @type {?} */ topOverflow = 0 - y;\n        var /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n        // Visible parts of the element on each axis.\n        var /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n        var /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n        // The area of the element that's within the viewport.\n        var /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n        var /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @param {?} overlay\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.getScrollableViewProperties = function (overlay) {\n        var _this = this;\n        var /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n        var /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n        var /** @type {?} */ scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return _this._getElementBounds(scrollable.getElementRef().nativeElement);\n        });\n        return {\n            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Whether the element is completely out of the view of any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementOutsideView = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n            var /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n            var /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n            var /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    };\n    /**\n     * Whether the element is clipped by any of the containers.\n     * @param {?} elementBounds\n     * @param {?} containersBounds\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.isElementClipped = function (elementBounds, containersBounds) {\n        return containersBounds.some(function (containerBounds) {\n            var /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n            var /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n            var /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n            var /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    };\n    /**\n     * Physically positions the overlay element to the given coordinate.\n     * @param {?} element\n     * @param {?} overlayRect\n     * @param {?} overlayPoint\n     * @param {?} pos\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayRect, overlayPoint, pos) {\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n        // or below the origin and the direction in which the element will expand.\n        var /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n        var /** @type {?} */ y = verticalStyleProperty === 'top' ?\n            overlayPoint.y :\n            document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        var /** @type {?} */ horizontalStyleProperty;\n        if (this._dir === 'rtl') {\n            horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        var /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n            overlayPoint.x :\n            document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        ['top', 'bottom', 'left', 'right'].forEach(function (p) { return element.style[p] = null; });\n        element.style[verticalStyleProperty] = y + \"px\";\n        element.style[horizontalStyleProperty] = x + \"px\";\n    };\n    /**\n     * Returns the bounding positions of the provided element with respect to the viewport.\n     * @param {?} element\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._getElementBounds = function (element) {\n        var /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n        return {\n            top: boundingClientRect.top,\n            right: boundingClientRect.left + boundingClientRect.width,\n            bottom: boundingClientRect.top + boundingClientRect.height,\n            left: boundingClientRect.left\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    return ConnectedPositionStrategy;\n}());\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar GlobalPositionStrategy = /*@__PURE__*/ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n        this._wrapper = null;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._width = value;\n        // When the width is 100%, we should reset the `left` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.left('0px');\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        this._height = value;\n        // When the height is 100%, we should reset the `top` and the offset,\n        // in order to ensure that the element is flush against the viewport edge.\n        if (value === '100%') {\n            this.top('0px');\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n        if (offset === void 0) {\n            offset = '';\n        }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n        if (offset === void 0) {\n            offset = '';\n        }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     *\n     * @param {?} element Element to which to apply the CSS.\n     * @return {?} Resolved when the styles have been applied.\n     */\n    GlobalPositionStrategy.prototype.apply = function (element) {\n        if (!this._wrapper && element.parentNode) {\n            this._wrapper = document.createElement('div');\n            this._wrapper.classList.add('cdk-global-overlay-wrapper');\n            element.parentNode.insertBefore(this._wrapper, element);\n            this._wrapper.appendChild(element);\n        }\n        var /** @type {?} */ styles = element.style;\n        var /** @type {?} */ parentStyles = ((element.parentNode)).style;\n        styles.position = this._cssPosition;\n        styles.marginTop = this._topOffset;\n        styles.marginLeft = this._leftOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        styles.width = this._width;\n        styles.height = this._height;\n        parentStyles.justifyContent = this._justifyContent;\n        parentStyles.alignItems = this._alignItems;\n    };\n    /**\n     * Removes the wrapper element from the DOM.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = function () {\n        if (this._wrapper && this._wrapper.parentNode) {\n            this._wrapper.parentNode.removeChild(this._wrapper);\n            this._wrapper = null;\n        }\n    };\n    return GlobalPositionStrategy;\n}());\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _viewportRuler\n     */\n    function OverlayPositionBuilder(_viewportRuler) {\n        this._viewportRuler = _viewportRuler;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n    };\n    return OverlayPositionBuilder;\n}());\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nvar OverlayContainer = /*@__PURE__*/ (function () {\n    function OverlayContainer() {\n    }\n    Object.defineProperty(OverlayContainer.prototype, \"themeClass\", {\n        /**\n         * Base theme to be applied to all overlay-based components.\n         * @return {?}\n         */\n        get: function () { return this._themeClass; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._containerElement) {\n                this._containerElement.classList.remove(this._themeClass);\n                if (value) {\n                    this._containerElement.classList.add(value);\n                }\n            }\n            this._themeClass = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method returns the overlay container element.  It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = function () {\n        var /** @type {?} */ container = document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        if (this._themeClass) {\n            container.classList.add(this._themeClass);\n        }\n        document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    return OverlayContainer;\n}());\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {\n    return parentContainer || new OverlayContainer();\n}\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), OverlayContainer]],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/**\n * Next overlay unique ID.\n */\nvar nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nvar defaultState = /*@__PURE__*/ new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _ngZone\n     */\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} state State to apply to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = function (state$$1) {\n        if (state$$1 === void 0) {\n            state$$1 = defaultState;\n        }\n        return this._createOverlayRef(this._createPaneElement(), state$$1);\n    };\n    /**\n     * Returns a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?}\n     */\n    Overlay.prototype.position = function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = function () {\n        var /** @type {?} */ pane = document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        this._overlayContainer.getContainerElement().appendChild(pane);\n        return pane;\n    };\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal host.\n     * @return {?} A portal host for the given DOM element.\n     */\n    Overlay.prototype._createPortalHost = function (pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param {?} pane DOM element for the overlay\n     * @param {?} state\n     * @return {?}\n     */\n    Overlay.prototype._createOverlayRef = function (pane, state$$1) {\n        var /** @type {?} */ scrollStrategy = state$$1.scrollStrategy || this.scrollStrategies.noop();\n        var /** @type {?} */ portalHost = this._createPortalHost(pane);\n        return new OverlayRef(portalHost, pane, state$$1, scrollStrategy, this._ngZone);\n    };\n    return Overlay;\n}());\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nvar defaultPositionList = [\n    /*@__PURE__*/ new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n    /*@__PURE__*/ new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar OverlayOrigin = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function OverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    return OverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nvar ConnectedOverlayDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _renderer\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} _dir\n     */\n    function ConnectedOverlayDirective(_overlay, _renderer, templateRef, viewContainerRef, _dir) {\n        this._overlay = _overlay;\n        this._renderer = _renderer;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._offsetX = 0;\n        this._offsetY = 0;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = this._overlay.scrollStrategies.reposition();\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetX\", {\n        /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetX;\n        },\n        /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        set: function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._position.withOffsetX(offsetX);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"offsetY\", {\n        /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        get: function () {\n            return this._offsetY;\n        },\n        /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        set: function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._position.withOffsetY(offsetY);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"hasBackdrop\", {\n        /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        get: function () {\n            return this._hasBackdrop;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hasBackdrop = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\n        /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        get: function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"dir\", {\n        /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\n        this._destroyOverlay();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createOverlay = function () {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._buildConfig = function () {\n        var /** @type {?} */ overlayConfig = new OverlayState();\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        overlayConfig.hasBackdrop = this.hasBackdrop;\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        this._position = (this._createPositionStrategy());\n        overlayConfig.positionStrategy = this._position;\n        overlayConfig.scrollStrategy = this.scrollStrategy;\n        return overlayConfig;\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._createPositionStrategy = function () {\n        var /** @type {?} */ pos = this.positions[0];\n        var /** @type {?} */ originPoint = { originX: pos.originX, originY: pos.originY };\n        var /** @type {?} */ overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };\n        var /** @type {?} */ strategy = this._overlay.position()\n            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n            .withOffsetX(this.offsetX)\n            .withOffsetY(this.offsetY);\n        this._handlePositionChanges(strategy);\n        return strategy;\n    };\n    /**\n     * @param {?} strategy\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._handlePositionChanges = function (strategy) {\n        var _this = this;\n        for (var /** @type {?} */ i = 1; i < this.positions.length; i++) {\n            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });\n        }\n        this._positionSubscription =\n            strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._attachOverlay = function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        this._position.withDirection(this.dir);\n        this._overlayRef.getState().direction = this.dir;\n        this._initEscapeListener();\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n                _this.backdropClick.emit();\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._detachOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n            this._backdropSubscription = null;\n        }\n        if (this._escapeListener) {\n            this._escapeListener();\n        }\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n        if (this._escapeListener) {\n            this._escapeListener();\n        }\n    };\n    /**\n     * Sets the event listener that closes the overlay when pressing Escape.\n     * @return {?}\n     */\n    ConnectedOverlayDirective.prototype._initEscapeListener = function () {\n        var _this = this;\n        this._escapeListener = this._renderer.listen('document', 'keydown', function (event) {\n            if (event.keyCode === ESCAPE) {\n                _this._detachOverlay();\n            }\n        });\n    };\n    return ConnectedOverlayDirective;\n}());\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nvar FullscreenOverlayContainer = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n        if (!this._containerElement) {\n            return;\n        }\n        var /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n        var /** @type {?} */ parent = fullscreenElement || document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n        if (document.fullscreenEnabled) {\n            document.addEventListener('fullscreenchange', fn);\n        }\n        else if (document.webkitFullscreenEnabled) {\n            document.addEventListener('webkitfullscreenchange', fn);\n        }\n        else if (((document)).mozFullScreenEnabled) {\n            document.addEventListener('mozfullscreenchange', fn);\n        }\n        else if (((document)).msFullscreenEnabled) {\n            document.addEventListener('MSFullscreenChange', fn);\n        }\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n        return document.fullscreenElement ||\n            document.webkitFullscreenElement ||\n            ((document)).mozFullScreenElement ||\n            ((document)).msFullscreenElement ||\n            null;\n    };\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n];\nvar OverlayModule = /*@__PURE__*/ (function () {\n    function OverlayModule() {\n    }\n    return OverlayModule;\n}());\nvar GestureConfig = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GestureConfig, _super);\n    function GestureConfig() {\n        var _this = _super.call(this) || this;\n        _this._hammer = typeof window !== 'undefined' ? ((window)).Hammer : null;\n        /* List of new event names to add to the gesture support list */\n        _this.events = _this._hammer ? [\n            'longpress',\n            'slide',\n            'slidestart',\n            'slideend',\n            'slideright',\n            'slideleft'\n        ] : [];\n        if (!_this._hammer && isDevMode()) {\n            console.warn('Could not find HammerJS. Certain Angular Material ' +\n                'components may not work correctly.');\n        }\n        return _this;\n    }\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param {?} element Element to which to assign the new HammerJS gestures.\n     * @return {?} Newly-created HammerJS instance.\n     */\n    GestureConfig.prototype.buildHammer = function (element) {\n        var /** @type {?} */ mc = new this._hammer(element);\n        // Default Hammer Recognizers.\n        var /** @type {?} */ pan = new this._hammer.Pan();\n        var /** @type {?} */ swipe = new this._hammer.Swipe();\n        var /** @type {?} */ press = new this._hammer.Press();\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n        // Otherwise the previous `recognizeWith` will be dropped.\n        // TODO: Confirm threshold numbers with Material Design UX Team\n        var /** @type {?} */ slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\n        var /** @type {?} */ longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\n        // Overwrite the default `pan` event to use the swipe event.\n        pan.recognizeWith(swipe);\n        // Add customized gestures to Hammer manager\n        mc.add([swipe, press, pan, slide, longpress]);\n        return (mc);\n    };\n    /**\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\n     * @param {?} base\n     * @param {?} options\n     * @param {...?} inheritances\n     * @return {?}\n     */\n    GestureConfig.prototype._createRecognizer = function (base, options) {\n        var inheritances = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            inheritances[_i - 2] = arguments[_i];\n        }\n        var /** @type {?} */ recognizer = new ((base.constructor))(options);\n        inheritances.push(base);\n        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });\n        return recognizer;\n    };\n    return GestureConfig;\n}(HammerGestureConfig));\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nvar SelectionModel = /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} _isMulti\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    function SelectionModel(_isMulti, initiallySelectedValues, _emitChanges) {\n        if (_isMulti === void 0) {\n            _isMulti = false;\n        }\n        if (_emitChanges === void 0) {\n            _emitChanges = true;\n        }\n        var _this = this;\n        this._isMulti = _isMulti;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected option that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.onChange = this._emitChanges ? new Subject() : null;\n        if (initiallySelectedValues) {\n            if (_isMulti) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /**\n         * Selected value(s).\n         * @return {?}\n         */\n        get: function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.select = function (value) {\n        this._markSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Deselects a value or an array of values.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = function (value) {\n        this._unmarkSelected(value);\n        this._emitChangeEvent();\n    };\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = function (value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    };\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = function () {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    };\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = function (value) {\n        return this._selection.has(value);\n    };\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = function () {\n        return this._selection.size === 0;\n    };\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = function () {\n        return !this.isEmpty();\n    };\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = function (predicate) {\n        if (this._isMulti && this._selected) {\n            this._selected.sort(predicate);\n        }\n    };\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = function () {\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            var /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n            if (this.onChange) {\n                this.onChange.next(eventData);\n            }\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n        this._selected = null;\n    };\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = function (value) {\n        if (!this.isSelected(value)) {\n            if (!this._isMulti) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = function (value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = function () {\n        var _this = this;\n        if (!this.isEmpty()) {\n            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n        }\n    };\n    return SelectionModel;\n}());\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nvar SelectionChange = /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} added\n     * @param {?=} removed\n     */\n    function SelectionChange(added, removed) {\n        this.added = added;\n        this.removed = removed;\n    }\n    return SelectionChange;\n}());\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = /*@__PURE__*/ (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     *\n     */\n    UniqueSelectionDispatcher.prototype.listen = function (listener) {\n        var _this = this;\n        this._listeners.push(listener);\n        return function () {\n            _this._listeners = _this._listeners.filter(function (registered) {\n                return listener !== registered;\n            });\n        };\n    };\n    return UniqueSelectionDispatcher;\n}());\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nfunction UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(parentDispatcher) {\n    return parentDispatcher || new UniqueSelectionDispatcher();\n}\nvar UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n    // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n    provide: UniqueSelectionDispatcher,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), UniqueSelectionDispatcher]],\n    useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nvar FocusOriginMonitor = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    function FocusOriginMonitor(_ngZone, _platform) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * The focus origin that the next focus event is a result of.\n         */\n        this._origin = null;\n        /**\n         * Whether the window has just been focused.\n         */\n        this._windowFocused = false;\n        /**\n         * Weak map of elements being monitored to their info.\n         */\n        this._elementInfo = new WeakMap();\n        this._ngZone.runOutsideAngular(function () { return _this._registerDocumentEvents(); });\n    }\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param {?} element The element to monitor\n     * @param {?} renderer The renderer to use to apply CSS classes to the element.\n     * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n     * @return {?} An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    FocusOriginMonitor.prototype.monitor = function (element, renderer, checkChildren) {\n        var _this = this;\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            var /** @type {?} */ info_1 = this._elementInfo.get(element); /** @type {?} */\n            ((info_1)).checkChildren = checkChildren;\n            return ((info_1)).subject.asObservable();\n        }\n        // Create monitored element info.\n        var /** @type {?} */ info = {\n            unlisten: function () { },\n            checkChildren: checkChildren,\n            renderer: renderer,\n            subject: new Subject()\n        };\n        this._elementInfo.set(element, info);\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        var /** @type {?} */ focusListener = function (event) { return _this._onFocus(event, element); };\n        var /** @type {?} */ blurListener = function (event) { return _this._onBlur(event, element); };\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = function () {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    };\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.stopMonitoring = function (element) {\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(element);\n            this._elementInfo.delete(element);\n        }\n    };\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param {?} element The element to focus.\n     * @param {?} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype.focusVia = function (element, origin) {\n        this._setOriginForCurrentEventQueue(origin);\n        element.focus();\n    };\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._registerDocumentEvents = function () {\n        var _this = this;\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        // On keydown record the origin and clear any touch event that may be in progress.\n        document.addEventListener('keydown', function () {\n            _this._lastTouchTarget = null;\n            _this._setOriginForCurrentEventQueue('keyboard');\n        }, true);\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        document.addEventListener('mousedown', function () {\n            if (!_this._lastTouchTarget) {\n                _this._setOriginForCurrentEventQueue('mouse');\n            }\n        }, true);\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        document.addEventListener('touchstart', function (event) {\n            if (_this._touchTimeout != null) {\n                clearTimeout(_this._touchTimeout);\n            }\n            _this._lastTouchTarget = event.target;\n            _this._touchTimeout = setTimeout(function () { return _this._lastTouchTarget = null; }, TOUCH_BUFFER_MS);\n        }, true);\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        window.addEventListener('focus', function () {\n            _this._windowFocused = true;\n            setTimeout(function () { return _this._windowFocused = false; }, 0);\n        });\n    };\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setClasses = function (element, origin) {\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            var /** @type {?} */ toggleClass = function (className, shouldSet) {\n                shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n            };\n            toggleClass('cdk-focused', !!origin);\n            toggleClass('cdk-touch-focused', origin === 'touch');\n            toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n            toggleClass('cdk-mouse-focused', origin === 'mouse');\n            toggleClass('cdk-program-focused', origin === 'program');\n        }\n    };\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {\n        var _this = this;\n        this._origin = origin;\n        setTimeout(function () { return _this._origin = null; }, 0);\n    };\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    FocusOriginMonitor.prototype._wasCausedByTouch = function (event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, renderer,  'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        var /** @type {?} */ focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    };\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onFocus = function (event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (!this._origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                this._origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                this._origin = 'touch';\n            }\n            else {\n                this._origin = 'program';\n            }\n        }\n        this._setClasses(element, this._origin);\n        elementInfo.subject.next(this._origin);\n        this._lastFocusOrigin = this._origin;\n        this._origin = null;\n    };\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    FocusOriginMonitor.prototype._onBlur = function (event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        var /** @type {?} */ elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        elementInfo.subject.next(null);\n    };\n    return FocusOriginMonitor;\n}());\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nvar CdkMonitorFocus = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} renderer\n     */\n    function CdkMonitorFocus(_elementRef, _focusOriginMonitor, renderer) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._monitorSubscription = this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(function (origin) { return _this.cdkFocusChange.emit(origin); });\n    }\n    /**\n     * @return {?}\n     */\n    CdkMonitorFocus.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this._monitorSubscription.unsubscribe();\n    };\n    return CdkMonitorFocus;\n}());\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\nvar FOCUS_ORIGIN_MONITOR_PROVIDER = {\n    // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusOriginMonitor,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n    useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nfunction applyCssTransform(element, transformValue) {\n    // It's important to trim the result, because the browser will ignore the set operation\n    // if the string contains only whitespace.\n    var /** @type {?} */ value = transformValue.trim();\n    element.style.transform = value;\n    element.style.webkitTransform = value;\n}\nvar StyleModule = /*@__PURE__*/ (function () {\n    function StyleModule() {\n    }\n    return StyleModule;\n}());\n/**\n * \\@docs-private\n */\nvar AnimationCurves = /*@__PURE__*/ (function () { function AnimationCurves() {\n} AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)'; AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)'; AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)'; AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)'; return AnimationCurves; }());\n/**\n * \\@docs-private\n */\nvar AnimationDurations = /*@__PURE__*/ (function () { function AnimationDurations() {\n} AnimationDurations.COMPLEX = '375ms'; AnimationDurations.ENTERING = '225ms'; AnimationDurations.EXITING = '195ms'; return AnimationDurations; }());\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nvar DateAdapter = /*@__PURE__*/ (function () {\n    function DateAdapter() {\n    }\n    /**\n     * Gets the year component of the given date.\n     * @abstract\n     * @param {?} date The date to extract the year from.\n     * @return {?} The year component.\n     */\n    DateAdapter.prototype.getYear = function (date) { };\n    /**\n     * Gets the month component of the given date.\n     * @abstract\n     * @param {?} date The date to extract the month from.\n     * @return {?} The month component (0-indexed, 0 = January).\n     */\n    DateAdapter.prototype.getMonth = function (date) { };\n    /**\n     * Gets the date of the month component of the given date.\n     * @abstract\n     * @param {?} date The date to extract the date of the month from.\n     * @return {?} The month component (1-indexed, 1 = first of month).\n     */\n    DateAdapter.prototype.getDate = function (date) { };\n    /**\n     * Gets the day of the week component of the given date.\n     * @abstract\n     * @param {?} date The date to extract the day of the week from.\n     * @return {?} The month component (0-indexed, 0 = Sunday).\n     */\n    DateAdapter.prototype.getDayOfWeek = function (date) { };\n    /**\n     * Gets a list of names for the months.\n     * @abstract\n     * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n     * @return {?} An ordered list of all month names, starting with January.\n     */\n    DateAdapter.prototype.getMonthNames = function (style$$1) { };\n    /**\n     * Gets a list of names for the dates of the month.\n     * @abstract\n     * @return {?} An ordered list of all date of the month names, starting with '1'.\n     */\n    DateAdapter.prototype.getDateNames = function () { };\n    /**\n     * Gets a list of names for the days of the week.\n     * @abstract\n     * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n     * @return {?} An ordered list of all weekday names, starting with Sunday.\n     */\n    DateAdapter.prototype.getDayOfWeekNames = function (style$$1) { };\n    /**\n     * Gets the name for the year of the given date.\n     * @abstract\n     * @param {?} date The date to get the year name for.\n     * @return {?} The name of the given year (e.g. '2017').\n     */\n    DateAdapter.prototype.getYearName = function (date) { };\n    /**\n     * Gets the first day of the week.\n     * @abstract\n     * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n     */\n    DateAdapter.prototype.getFirstDayOfWeek = function () { };\n    /**\n     * Gets the number of days in the month of the given date.\n     * @abstract\n     * @param {?} date The date whose month should be checked.\n     * @return {?} The number of days in the month of the given date.\n     */\n    DateAdapter.prototype.getNumDaysInMonth = function (date) { };\n    /**\n     * Clones the given date.\n     * @abstract\n     * @param {?} date The date to clone\n     * @return {?} A new date equal to the given date.\n     */\n    DateAdapter.prototype.clone = function (date) { };\n    /**\n     * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n     * month and date.\n     * @abstract\n     * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n     * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n     * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n     * @return {?} The new date, or null if invalid.\n     */\n    DateAdapter.prototype.createDate = function (year, month, date) { };\n    /**\n     * Gets today's date.\n     * @abstract\n     * @return {?} Today's date.\n     */\n    DateAdapter.prototype.today = function () { };\n    /**\n     * Parses a date from a value.\n     * @abstract\n     * @param {?} value The value to parse.\n     * @param {?} parseFormat The expected format of the value being parsed\n     *     (type is implementation-dependent).\n     * @return {?} The parsed date, or null if date could not be parsed.\n     */\n    DateAdapter.prototype.parse = function (value, parseFormat) { };\n    /**\n     * Formats a date as a string.\n     * @abstract\n     * @param {?} date The value to parse.\n     * @param {?} displayFormat The format to use to display the date as a string.\n     * @return {?} The parsed date, or null if date could not be parsed.\n     */\n    DateAdapter.prototype.format = function (date, displayFormat) { };\n    /**\n     * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n     * calendar for each year and then finding the closest date in the new month. For example when\n     * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n     * @abstract\n     * @param {?} date The date to add years to.\n     * @param {?} years The number of years to add (may be negative).\n     * @return {?} A new date equal to the given one with the specified number of years added.\n     */\n    DateAdapter.prototype.addCalendarYears = function (date, years) { };\n    /**\n     * Adds the given number of months to the date. Months are counted as if flipping a page on the\n     * calendar for each month and then finding the closest date in the new month. For example when\n     * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n     * @abstract\n     * @param {?} date The date to add months to.\n     * @param {?} months The number of months to add (may be negative).\n     * @return {?} A new date equal to the given one with the specified number of months added.\n     */\n    DateAdapter.prototype.addCalendarMonths = function (date, months) { };\n    /**\n     * Adds the given number of days to the date. Days are counted as if moving one cell on the\n     * calendar for each day.\n     * @abstract\n     * @param {?} date The date to add days to.\n     * @param {?} days The number of days to add (may be negative).\n     * @return {?} A new date equal to the given one with the specified number of days added.\n     */\n    DateAdapter.prototype.addCalendarDays = function (date, days) { };\n    /**\n     * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n     * date.\n     * @abstract\n     * @param {?} date The date to get the ISO date string for.\n     * @return {?} The ISO date string date string.\n     */\n    DateAdapter.prototype.getISODateString = function (date) { };\n    /**\n     * Sets the locale used for all dates.\n     * @param {?} locale The new locale.\n     * @return {?}\n     */\n    DateAdapter.prototype.setLocale = function (locale) {\n        this.locale = locale;\n    };\n    /**\n     * Compares two dates.\n     * @param {?} first The first date to compare.\n     * @param {?} second The second date to compare.\n     * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    DateAdapter.prototype.compareDate = function (first$$1, second) {\n        return this.getYear(first$$1) - this.getYear(second) ||\n            this.getMonth(first$$1) - this.getMonth(second) ||\n            this.getDate(first$$1) - this.getDate(second);\n    };\n    /**\n     * Checks if two dates are equal.\n     * @param {?} first The first date to check.\n     * @param {?} second The second date to check.\n     *     Null dates are considered equal to other null dates.\n     * @return {?}\n     */\n    DateAdapter.prototype.sameDate = function (first$$1, second) {\n        return first$$1 && second ? !this.compareDate(first$$1, second) : first$$1 == second;\n    };\n    /**\n     * Clamp the given date between min and max dates.\n     * @param {?} date The date to clamp.\n     * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n     * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n     * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    DateAdapter.prototype.clampDate = function (date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    };\n    return DateAdapter;\n}());\n/**\n * Whether the browser supports the Intl API.\n */\nvar SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nvar DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nvar DEFAULT_DATE_NAMES = /*@__PURE__*/ range(31, function (i) { return String(i + 1); });\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nvar DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range(length, valueFunction) {\n    var /** @type {?} */ valuesArray = Array(length);\n    for (var /** @type {?} */ i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nvar NativeDateAdapter = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(NativeDateAdapter, _super);\n    function NativeDateAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getYear = function (date) {\n        return date.getFullYear();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getMonth = function (date) {\n        return date.getMonth();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getDate = function (date) {\n        return date.getDate();\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getDayOfWeek = function (date) {\n        return date.getDay();\n    };\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getMonthNames = function (style$$1) {\n        var _this = this;\n        if (SUPPORTS_INTL_API) {\n            var /** @type {?} */ dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style$$1 });\n            return range(12, function (i) { return _this._stripDirectionalityCharacters(dtf_1.format(new Date(2017, i, 1))); });\n        }\n        return DEFAULT_MONTH_NAMES[style$$1];\n    };\n    /**\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getDateNames = function () {\n        var _this = this;\n        if (SUPPORTS_INTL_API) {\n            var /** @type {?} */ dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric' });\n            return range(31, function (i) { return _this._stripDirectionalityCharacters(dtf_2.format(new Date(2017, 0, i + 1))); });\n        }\n        return DEFAULT_DATE_NAMES;\n    };\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getDayOfWeekNames = function (style$$1) {\n        var _this = this;\n        if (SUPPORTS_INTL_API) {\n            var /** @type {?} */ dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style$$1 });\n            return range(7, function (i) { return _this._stripDirectionalityCharacters(dtf_3.format(new Date(2017, 0, i + 1))); });\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style$$1];\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getYearName = function (date) {\n        if (SUPPORTS_INTL_API) {\n            var /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric' });\n            return this._stripDirectionalityCharacters(dtf.format(date));\n        }\n        return String(this.getYear(date));\n    };\n    /**\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getFirstDayOfWeek = function () {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getNumDaysInMonth = function (date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.clone = function (date) {\n        return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n    };\n    /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.createDate = function (year, month, date) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n            throw Error(\"Invalid month index \\\"\" + month + \"\\\". Month index has to be between 0 and 11.\");\n        }\n        if (date < 1) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\". Date has to be greater than 0.\");\n        }\n        var /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\" for month with index \\\"\" + month + \"\\\".\");\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.today = function () {\n        return new Date();\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.parse = function (value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        var /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n        return isNaN(timestamp) ? null : new Date(timestamp);\n    };\n    /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.format = function (date, displayFormat) {\n        if (SUPPORTS_INTL_API) {\n            var /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this._stripDirectionalityCharacters(dtf.format(date));\n        }\n        return this._stripDirectionalityCharacters(date.toDateString());\n    };\n    /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.addCalendarYears = function (date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    };\n    /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.addCalendarMonths = function (date, months) {\n        var /** @type {?} */ newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    };\n    /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.addCalendarDays = function (date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype.getISODateString = function (date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate())\n        ].join('-');\n    };\n    /**\n     * Creates a date but allows the month and date to overflow.\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n    NativeDateAdapter.prototype._createDateWithOverflow = function (year, month, date) {\n        var /** @type {?} */ result = new Date(year, month, date);\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n        // abbreviations for 19xx.\n        if (year >= 0 && year < 100) {\n            result.setFullYear(this.getYear(result) - 1900);\n        }\n        return result;\n    };\n    /**\n     * Pads a number to make it two digits.\n     * @param {?} n The number to pad.\n     * @return {?} The padded number.\n     */\n    NativeDateAdapter.prototype._2digit = function (n) {\n        return ('00' + n).slice(-2);\n    };\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param {?} str The string to strip direction characters from.\n     * @return {?} The stripped string.\n     */\n    NativeDateAdapter.prototype._stripDirectionalityCharacters = function (str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    };\n    return NativeDateAdapter;\n}(DateAdapter));\nvar MD_DATE_FORMATS = /*@__PURE__*/ new InjectionToken('md-date-formats');\nvar MD_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    }\n};\nvar NativeDateModule = /*@__PURE__*/ (function () {\n    function NativeDateModule() {\n    }\n    return NativeDateModule;\n}());\nvar MdNativeDateModule = /*@__PURE__*/ (function () {\n    function MdNativeDateModule() {\n    }\n    return MdNativeDateModule;\n}());\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nvar MD_PLACEHOLDER_GLOBAL_OPTIONS = /*@__PURE__*/ new InjectionToken('md-placeholder-global-options');\n/**\n * Injection token that can be used to specify the global error options.\n */\nvar MD_ERROR_GLOBAL_OPTIONS = /*@__PURE__*/ new InjectionToken('md-error-global-options');\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nfunction defaultErrorStateMatcher(control, form) {\n    var /** @type {?} */ isSubmitted = form && form.submitted;\n    return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nfunction showOnDirtyErrorStateMatcher(control, form) {\n    var /** @type {?} */ isSubmitted = form && form.submitted;\n    return !!(control.invalid && (control.dirty || isSubmitted));\n}\nvar MdCoreModule = /*@__PURE__*/ (function () {\n    function MdCoreModule() {\n    }\n    return MdCoreModule;\n}());\n/**\n * \\@docs-private\n */\nvar MdButtonToggleGroupBase = /*@__PURE__*/ (function () {\n    function MdButtonToggleGroupBase() {\n    }\n    return MdButtonToggleGroupBase;\n}());\nvar _MdButtonToggleGroupMixinBase = /*@__PURE__*/ mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdButtonToggleGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$1 = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nvar MdButtonToggleChange = /*@__PURE__*/ (function () {\n    function MdButtonToggleChange() {\n    }\n    return MdButtonToggleChange;\n}());\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nvar MdButtonToggleGroup = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdButtonToggleGroup, _super);\n    function MdButtonToggleGroup() {\n        var _this = _super.apply(this, arguments) || this;\n        /**\n         * The value for the button toggle group. Should match currently selected button toggle.\n         */\n        _this._value = null;\n        /**\n         * The HTML name attribute applied to toggles in this group.\n         */\n        _this._name = \"md-button-toggle-group-\" + _uniqueIdCounter$1++;\n        /**\n         * Whether the button toggle group should be vertical.\n         */\n        _this._vertical = false;\n        /**\n         * The currently selected button toggle, should match the value.\n         */\n        _this._selected = null;\n        /**\n         * Whether the button toggle group is initialized or not.\n         */\n        _this._isInitialized = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        _this._controlValueAccessorChangeFn = function () { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        _this.onTouched = function () { };\n        /**\n         * Event emitted when the group's value changes.\n         */\n        _this.change = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.ngAfterViewInit = function () {\n        this._isInitialized = true;\n    };\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"name\", {\n        /**\n         * `name` attribute for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this._name;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateButtonToggleNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"value\", {\n        /**\n         * Value of the toggle group.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                this._value = newValue;\n                this._updateSelectedButtonToggleFromValue();\n                // Only emit a change event if the view is completely initialized.\n                // We don't want to emit a change event for the initial values.\n                if (this._isInitialized) {\n                    this._emitChangeEvent();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggleGroup.prototype, \"selected\", {\n        /**\n         * Whether the toggle group is selected.\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            if (selected && !selected.checked) {\n                selected.checked = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {\n        var _this = this;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(function (toggle) {\n                toggle.name = _this._name;\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {\n        var _this = this;\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._buttonToggles != null && !isAlreadySelected) {\n            var /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) { return buttonToggle.value == _this._value; })[0];\n            if (matchingButtonToggle) {\n                this.selected = matchingButtonToggle;\n            }\n            else if (this.value == null) {\n                this.selected = null;\n                this._buttonToggles.forEach(function (buttonToggle) {\n                    buttonToggle.checked = false;\n                });\n            }\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this._selected;\n        event.value = this._value;\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback that will be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On change callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback that will be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On touch callback function.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the component should be disabled.\n     * @return {?}\n     */\n    MdButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdButtonToggleGroup;\n}(_MdButtonToggleGroupMixinBase));\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nvar MdButtonToggleGroupMultiple = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdButtonToggleGroupMultiple, _super);\n    function MdButtonToggleGroupMultiple() {\n        var _this = _super.apply(this, arguments) || this;\n        /**\n         * Whether the button toggle group should be vertical.\n         */\n        _this._vertical = false;\n        return _this;\n    }\n    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, \"vertical\", {\n        /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        get: function () {\n            return this._vertical;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdButtonToggleGroupMultiple;\n}(_MdButtonToggleGroupMixinBase));\n/**\n * Single button inside of a toggle group.\n */\nvar MdButtonToggle = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} toggleGroupMultiple\n     * @param {?} _buttonToggleDispatcher\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButtonToggle(toggleGroup, toggleGroupMultiple, _buttonToggleDispatcher, _renderer, _elementRef, _focusOriginMonitor) {\n        var _this = this;\n        this._buttonToggleDispatcher = _buttonToggleDispatcher;\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._focusOriginMonitor = _focusOriginMonitor;\n        /**\n         * Whether or not this button toggle is checked.\n         */\n        this._checked = false;\n        /**\n         * Whether or not this button toggle is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Value assigned to this button toggle.\n         */\n        this._value = null;\n        /**\n         * Whether or not the button toggle is a single selection.\n         */\n        this._isSingleSelector = false;\n        /**\n         * Unregister function for _buttonToggleDispatcher *\n         */\n        this._removeUniqueSelectionListener = function () { };\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        this.buttonToggleGroup = toggleGroup;\n        this.buttonToggleGroupMultiple = toggleGroupMultiple;\n        if (this.buttonToggleGroup) {\n            this._removeUniqueSelectionListener =\n                _buttonToggleDispatcher.listen(function (id, name) {\n                    if (id != _this.id && name == _this.name) {\n                        _this.checked = false;\n                    }\n                });\n            this._type = 'radio';\n            this.name = this.buttonToggleGroup.name;\n            this._isSingleSelector = true;\n        }\n        else {\n            // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n            // toggled on or off.\n            this._type = 'checkbox';\n            this._isSingleSelector = false;\n        }\n    }\n    Object.defineProperty(MdButtonToggle.prototype, \"inputId\", {\n        /**\n         * Unique ID for the underlying `input` element.\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"checked\", {\n        /**\n         * Whether the button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._isSingleSelector) {\n                if (newCheckedState) {\n                    // Notify all button toggles with the same name (in the same group) to un-check.\n                    this._buttonToggleDispatcher.notify(this.id, this.name);\n                }\n            }\n            this._checked = newCheckedState;\n            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n                this.buttonToggleGroup.selected = this;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"value\", {\n        /**\n         * MdButtonToggleGroup reads this to assign its own value.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                if (this.buttonToggleGroup != null && this.checked) {\n                    this.buttonToggleGroup.value = value;\n                }\n                this._value = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdButtonToggle.prototype, \"disabled\", {\n        /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n                (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButtonToggle.prototype.ngOnInit = function () {\n        if (this.id == null) {\n            this.id = \"md-button-toggle-\" + _uniqueIdCounter$1++;\n        }\n        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n            this._checked = true;\n        }\n        this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButtonToggle.prototype.focus = function () {\n        this._inputElement.nativeElement.focus();\n    };\n    /**\n     * Toggle the state of the current button toggle.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Checks the button toggle due to an interaction with the underlying native input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputChange = function (event) {\n        event.stopPropagation();\n        if (this._isSingleSelector) {\n            // Propagate the change one-way via the group, which will in turn mark this\n            // button toggle as checked.\n            this.checked = true;\n            this.buttonToggleGroup.selected = this;\n            this.buttonToggleGroup.onTouched();\n        }\n        else {\n            this._toggle();\n        }\n        // Emit a change event when the native input does.\n        this._emitChangeEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdButtonToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdButtonToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdButtonToggleChange();\n        event.source = this;\n        event.value = this._value;\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdButtonToggle.prototype.ngOnDestroy = function () {\n        this._removeUniqueSelectionListener();\n    };\n    return MdButtonToggle;\n}());\nvar MdButtonToggleModule = /*@__PURE__*/ (function () {\n    function MdButtonToggleModule() {\n    }\n    return MdButtonToggleModule;\n}());\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nvar DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdButtonCssMatStyler = /*@__PURE__*/ (function () {\n    function MdButtonCssMatStyler() {\n    }\n    return MdButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdRaisedButtonCssMatStyler = /*@__PURE__*/ (function () {\n    function MdRaisedButtonCssMatStyler() {\n    }\n    return MdRaisedButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdIconButtonCssMatStyler = /*@__PURE__*/ (function () {\n    function MdIconButtonCssMatStyler() {\n    }\n    return MdIconButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdFab = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} button\n     * @param {?} anchor\n     */\n    function MdFab(button, anchor) {\n        // Set the default color palette for the md-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n    return MdFab;\n}());\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nvar MdMiniFab = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} button\n     * @param {?} anchor\n     */\n    function MdMiniFab(button, anchor) {\n        // Set the default color palette for the md-mini-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n    return MdMiniFab;\n}());\n/**\n * \\@docs-private\n */\nvar MdButtonBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdButtonBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdButtonBase;\n}());\nvar _MdButtonMixinBase = /*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisabled(MdButtonBase));\n/**\n * Material design button.\n */\nvar MdButton = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdButton, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusOriginMonitor\n     */\n    function MdButton(renderer, elementRef, _platform, _focusOriginMonitor) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._platform = _platform;\n        _this._focusOriginMonitor = _focusOriginMonitor;\n        /**\n         * Whether the button is round.\n         */\n        _this._isRoundButton = _this._hasAttributeWithPrefix('fab', 'mini-fab');\n        /**\n         * Whether the button is icon button.\n         */\n        _this._isIconButton = _this._hasAttributeWithPrefix('icon-button');\n        /**\n         * Whether the ripple effect on click should be disabled.\n         */\n        _this._disableRipple = false;\n        _this._focusOriginMonitor.monitor(_this._elementRef.nativeElement, _this._renderer, true);\n        return _this;\n    }\n    Object.defineProperty(MdButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._disableRipple = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MdButton.prototype.focus = function () {\n        this._getHostElement().focus();\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * @return {?}\n     */\n    MdButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Gets whether the button has one of the given attributes\n     * with either an 'md-' or 'mat-' prefix.\n     * @param {...?} unprefixedAttributeNames\n     * @return {?}\n     */\n    MdButton.prototype._hasAttributeWithPrefix = function () {\n        var _this = this;\n        var unprefixedAttributeNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            unprefixedAttributeNames[_i] = arguments[_i];\n        }\n        // If not on the browser, say that there are none of the attributes present.\n        // Since these only affect how the ripple displays (and ripples only happen on the client),\n        // detecting these attributes isn't necessary when not on the browser.\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        return unprefixedAttributeNames.some(function (suffix) {\n            var /** @type {?} */ el = _this._getHostElement();\n            return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n        });\n    };\n    return MdButton;\n}(_MdButtonMixinBase));\n/**\n * Raised Material design button.\n */\nvar MdAnchor = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdAnchor, _super);\n    /**\n     * @param {?} platform\n     * @param {?} focusOriginMonitor\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdAnchor(platform, focusOriginMonitor, elementRef, renderer) {\n        return _super.call(this, renderer, elementRef, platform, focusOriginMonitor) || this;\n    }\n    Object.defineProperty(MdAnchor.prototype, \"tabIndex\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAnchor.prototype._haltDisabledEvents = function (event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    };\n    return MdAnchor;\n}(MdButton));\nvar MdButtonModule = /*@__PURE__*/ (function () {\n    function MdButtonModule() {\n    }\n    return MdButtonModule;\n}());\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nvar nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdCheckbox; }),\n    multi: true\n};\nvar TransitionCheckState = /*@__PURE__*/ (function () {\n    var TransitionCheckState = {};\n    TransitionCheckState.Init = 0;\n    TransitionCheckState.Checked = 1;\n    TransitionCheckState.Unchecked = 2;\n    TransitionCheckState.Indeterminate = 3;\n    TransitionCheckState[TransitionCheckState.Init] = \"Init\";\n    TransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\n    TransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\n    TransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n    return TransitionCheckState;\n}());\n/**\n * Change event object emitted by MdCheckbox.\n */\nvar MdCheckboxChange = /*@__PURE__*/ (function () {\n    function MdCheckboxChange() {\n    }\n    return MdCheckboxChange;\n}());\n/**\n * \\@docs-private\n */\nvar MdCheckboxBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdCheckboxBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdCheckboxBase;\n}());\nvar _MdCheckboxMixinBase = /*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisabled(MdCheckboxBase), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nvar MdCheckbox = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdCheckbox, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusOriginMonitor\n     */\n    function MdCheckbox(renderer, elementRef, _changeDetectorRef, _focusOriginMonitor) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._focusOriginMonitor = _focusOriginMonitor;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        _this.ariaLabelledby = null;\n        /**\n         * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n         */\n        _this.id = \"md-checkbox-\" + ++nextId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        _this.labelPosition = 'after';\n        /**\n         * Tabindex value that is passed to the underlying input element.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Name value will be applied to the input element if present\n         */\n        _this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        _this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        _this.onTouched = function () { };\n        _this._currentAnimationClass = '';\n        _this._currentCheckState = TransitionCheckState.Init;\n        _this._checked = false;\n        _this._indeterminate = false;\n        _this._controlValueAccessorChangeFn = function () { };\n        return _this;\n    }\n    Object.defineProperty(MdCheckbox.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this checkbox is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-checkbox>`\n         * @return {?}\n         */\n        get: function () {\n            return \"input-\" + this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"required\", {\n        /**\n         * Whether the checkbox is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"align\", {\n        /**\n         * Whether or not the checkbox should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    Object.defineProperty(MdCheckbox.prototype, \"checked\", {\n        /**\n         * Whether the checkbox is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} checked\n         * @return {?}\n         */\n        set: function (checked) {\n            if (checked != this.checked) {\n                this._checked = checked;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCheckbox.prototype, \"indeterminate\", {\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         * @return {?}\n         */\n        get: function () {\n            return this._indeterminate;\n        },\n        /**\n         * @param {?} indeterminate\n         * @return {?}\n         */\n        set: function (indeterminate) {\n            var /** @type {?} */ changed = indeterminate != this._indeterminate;\n            this._indeterminate = indeterminate;\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(TransitionCheckState.Indeterminate);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    MdCheckbox.prototype._onLabelTextChange = function () {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MdCheckbox.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Function to be called on change.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be triggered when the checkbox is touched.\n     * @return {?}\n     */\n    MdCheckbox.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the checkbox should be disabled.\n     * @return {?}\n     */\n    MdCheckbox.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._transitionCheckState = function (newState) {\n        var /** @type {?} */ oldState = this._currentCheckState;\n        var /** @type {?} */ renderer = this._renderer;\n        var /** @type {?} */ elementRef = this._elementRef;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdCheckbox.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            this._removeFocusRipple();\n            this.onTouched();\n        }\n    };\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInputClick = function (event) {\n        var _this = this;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        this._removeFocusRipple();\n        if (!this.disabled) {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this._indeterminate) {\n                Promise.resolve().then(function () {\n                    _this._indeterminate = false;\n                    _this.indeterminateChange.emit(_this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    MdCheckbox.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdCheckbox.prototype._onInteractionEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    };\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {\n        var /** @type {?} */ animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return \"mat-checkbox-anim-\" + animSuffix;\n    };\n    /**\n     * Fades out the focus state ripple.\n     * @return {?}\n     */\n    MdCheckbox.prototype._removeFocusRipple = function () {\n        if (this._focusRipple) {\n            this._focusRipple.fadeOut();\n            this._focusRipple = null;\n        }\n    };\n    return MdCheckbox;\n}(_MdCheckboxMixinBase));\nvar MdCheckboxModule = /*@__PURE__*/ (function () {\n    function MdCheckboxModule() {\n    }\n    return MdCheckboxModule;\n}());\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nvar MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdRadioGroup; }),\n    multi: true\n};\nvar _uniqueIdCounter$2 = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nvar MdRadioChange = /*@__PURE__*/ (function () {\n    function MdRadioChange() {\n    }\n    return MdRadioChange;\n}());\n/**\n * \\@docs-private\n */\nvar MdRadioGroupBase = /*@__PURE__*/ (function () {\n    function MdRadioGroupBase() {\n    }\n    return MdRadioGroupBase;\n}());\nvar _MdRadioGroupMixinBase = /*@__PURE__*/ mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nvar MdRadioGroup = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdRadioGroup, _super);\n    /**\n     * @param {?} _changeDetector\n     */\n    function MdRadioGroup(_changeDetector) {\n        var _this = _super.call(this) || this;\n        _this._changeDetector = _changeDetector;\n        /**\n         * Selected value for group. Should equal the value of the selected radio button if there *is*\n         * a corresponding radio button with a matching value. If there is *not* such a corresponding\n         * radio button, this value persists to be applied in case a new radio button is added with a\n         * matching value.\n         */\n        _this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        _this._name = \"md-radio-group-\" + _uniqueIdCounter$2++;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        _this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        _this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        _this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        _this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        _this._controlValueAccessorChangeFn = function () { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        _this.onTouched = function () { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        _this.change = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MdRadioGroup.prototype, \"name\", {\n        /**\n         * Name of the radio button group. All radio buttons inside this group will use this name.\n         * @return {?}\n         */\n        get: function () { return this._name; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"align\", {\n        /**\n         * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"labelPosition\", {\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         * @return {?}\n         */\n        get: function () {\n            return this._labelPosition;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._labelPosition = (v == 'before') ? 'before' : 'after';\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"value\", {\n        /**\n         * Value of the radio button.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (this._value != newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._checkSelectedRadioButton = function () {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    };\n    Object.defineProperty(MdRadioGroup.prototype, \"selected\", {\n        /**\n         * Whether the radio button is selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioGroup.prototype, \"disabled\", {\n        /**\n         * Whether the radio group is diabled\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = value;\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.ngAfterContentInit = function () {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MdRadioGroup.\n        this._isInitialized = true;\n    };\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._touch = function () {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateRadioButtonNames = function () {\n        var _this = this;\n        if (this._radios) {\n            this._radios.forEach(function (radio) {\n                radio.name = _this.name;\n            });\n        }\n    };\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {\n        var _this = this;\n        // If the value already matches the selected radio, do nothing.\n        var /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(function (radio) {\n                radio.checked = _this.value == radio.value;\n                if (radio.checked) {\n                    _this._selected = radio;\n                }\n            });\n        }\n    };\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MdRadioGroup.prototype._emitChangeEvent = function () {\n        if (this._isInitialized) {\n            var /** @type {?} */ event = new MdRadioChange();\n            event.source = this._selected;\n            event.value = this._value;\n            this.change.emit(event);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioGroup.prototype._markRadiosForCheck = function () {\n        if (this._radios) {\n            this._radios.forEach(function (radio) { return radio._markForCheck(); });\n        }\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdRadioGroup.prototype.writeValue = function (value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    };\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    MdRadioGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    };\n    return MdRadioGroup;\n}(_MdRadioGroupMixinBase));\n/**\n * \\@docs-private\n */\nvar MdRadioButtonBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdRadioButtonBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdRadioButtonBase;\n}());\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nvar _MdRadioButtonMixinBase = /*@__PURE__*/ mixinColor(MdRadioButtonBase, 'accent');\n/**\n * A radio-button. May be inside of\n */\nvar MdRadioButton = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdRadioButton, _super);\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} _changeDetector\n     * @param {?} _focusOriginMonitor\n     * @param {?} _radioDispatcher\n     */\n    function MdRadioButton(radioGroup, elementRef, renderer, _changeDetector, _focusOriginMonitor, _radioDispatcher) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._changeDetector = _changeDetector;\n        _this._focusOriginMonitor = _focusOriginMonitor;\n        _this._radioDispatcher = _radioDispatcher;\n        /**\n         * The unique ID for the radio button.\n         */\n        _this.id = \"md-radio-\" + _uniqueIdCounter$2++;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        _this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        _this._value = null;\n        /**\n         * Unregister function for _radioDispatcher *\n         */\n        _this._removeUniqueSelectionListener = function () { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        _this.radioGroup = radioGroup;\n        _this._removeUniqueSelectionListener =\n            _radioDispatcher.listen(function (id, name) {\n                if (id != _this.id && name == _this.name) {\n                    _this.checked = false;\n                }\n            });\n        return _this;\n    }\n    Object.defineProperty(MdRadioButton.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this radio button is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"checked\", {\n        /**\n         * Whether this radio button is checked.\n         * @return {?}\n         */\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * @param {?} newCheckedState\n         * @return {?}\n         */\n        set: function (newCheckedState) {\n            if (this._checked != newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n                this._changeDetector.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"value\", {\n        /**\n         * The value of this radio button.\n         * @return {?}\n         */\n        get: function () {\n            return this._value;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._value != value) {\n                this._value = value;\n                if (this.radioGroup != null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value == value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"align\", {\n        /**\n         * Whether or not the radio-button should appear before or after the label.\n         * @deprecated\n         * @return {?}\n         */\n        get: function () {\n            // align refers to the checkbox relative to the label, while labelPosition refers to the\n            // label relative to the checkbox. As such, they are inverted.\n            return this.labelPosition == 'after' ? 'start' : 'end';\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.labelPosition = (v == 'start') ? 'after' : 'before';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"labelPosition\", {\n        /**\n         * Whether the label should appear after or before the radio button. Defaults to 'after'\n         * @return {?}\n         */\n        get: function () {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._labelPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"disabled\", {\n        /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdRadioButton.prototype, \"inputId\", {\n        /**\n         * ID of the native input element inside `<md-radio-button>`\n         * @return {?}\n         */\n        get: function () {\n            return this.id + \"-input\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    MdRadioButton.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    };\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    MdRadioButton.prototype._markForCheck = function () {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnInit = function () {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n        this._removeUniqueSelectionListener();\n    };\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    MdRadioButton.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdRadioChange();\n        event.source = this;\n        event.value = this._value;\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdRadioButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputChange = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        var /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            this.radioGroup._touch();\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MdRadioButton.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            if (this.radioGroup) {\n                this.radioGroup._touch();\n            }\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    };\n    return MdRadioButton;\n}(_MdRadioButtonMixinBase));\nvar MdRadioModule = /*@__PURE__*/ (function () {\n    function MdRadioModule() {\n    }\n    return MdRadioModule;\n}());\nvar FocusKeyManager = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FocusKeyManager, _super);\n    /**\n     * @param {?} items\n     */\n    function FocusKeyManager(items) {\n        return _super.call(this, items) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds focuses the newly active item.\n     * @param {?} index\n     * @return {?}\n     */\n    FocusKeyManager.prototype.setActiveItem = function (index) {\n        _super.prototype.setActiveItem.call(this, index);\n        if (this.activeItem) {\n            this.activeItem.focus();\n        }\n    };\n    return FocusKeyManager;\n}(ListKeyManager));\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nvar transformPlaceholder = /*@__PURE__*/ trigger('transformPlaceholder', [\n    /*@__PURE__*/ state('floating-ltr', /*@__PURE__*/ style({\n        top: '-22px',\n        left: '-2px',\n        transform: 'scale(0.75)'\n    })),\n    /*@__PURE__*/ state('floating-rtl', /*@__PURE__*/ style({\n        top: '-22px',\n        left: '2px',\n        transform: 'scale(0.75)'\n    })),\n    /*@__PURE__*/ transition('* => *', /*@__PURE__*/ animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nvar transformPanel = /*@__PURE__*/ trigger('transformPanel', [\n    /*@__PURE__*/ state('showing', /*@__PURE__*/ style({\n        opacity: 1,\n        minWidth: 'calc(100% + 32px)',\n        transform: 'scaleY(1)'\n    })),\n    /*@__PURE__*/ state('showing-multiple', /*@__PURE__*/ style({\n        opacity: 1,\n        minWidth: 'calc(100% + 64px)',\n        transform: 'scaleY(1)'\n    })),\n    /*@__PURE__*/ transition('void => *', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            minWidth: '100%',\n            transform: 'scaleY(0)'\n        }),\n        /*@__PURE__*/ animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    /*@__PURE__*/ transition('* => void', [\n        /*@__PURE__*/ animate('250ms 100ms linear', /*@__PURE__*/ style({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nvar fadeInContent = /*@__PURE__*/ trigger('fadeInContent', [\n    /*@__PURE__*/ state('showing', /*@__PURE__*/ style({ opacity: 1 })),\n    /*@__PURE__*/ transition('void => showing', [\n        /*@__PURE__*/ style({ opacity: 0 }),\n        /*@__PURE__*/ animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n]);\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMdSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMdSelectNonArrayValueError() {\n    return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nvar SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nvar SELECT_MAX_OPTIONS_DISPLAYED = /*@__PURE__*/ Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nvar SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nvar SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nvar SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar MdSelectChange = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    function MdSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MdSelectChange;\n}());\n/**\n * \\@docs-private\n */\nvar MdSelectBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdSelectBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdSelectBase;\n}());\nvar _MdSelectMixinBase = /*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisabled(MdSelectBase), 'primary');\nvar MdSelect = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdSelect, _super);\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _control\n     * @param {?} tabIndex\n     * @param {?} placeholderOptions\n     */\n    function MdSelect(_viewportRuler, _changeDetectorRef, renderer, elementRef, _dir, _control, tabIndex, placeholderOptions) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._viewportRuler = _viewportRuler;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this._control = _control;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        _this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        _this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        _this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        _this._multiple = false;\n        /**\n         * The animation state of the placeholder.\n         */\n        _this._placeholderState = '';\n        /**\n         * View -> model callback called when value changes\n         */\n        _this._onChange = function () { };\n        /**\n         * View -> model callback called when select has been touched\n         */\n        _this._onTouched = function () { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        _this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        _this._transformOrigin = 'top';\n        /**\n         * Whether the panel's animation is done.\n         */\n        _this._panelDoneAnimating = false;\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        _this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        _this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Input that can be used to specify the `aria-labelledby` attribute.\n         */\n        _this.ariaLabelledby = '';\n        /**\n         * Event emitted when the select has been opened.\n         */\n        _this.onOpen = new EventEmitter();\n        /**\n         * Event emitted when the select has been closed.\n         */\n        _this.onClose = new EventEmitter();\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        _this.change = new EventEmitter();\n        if (_this._control) {\n            _this._control.valueAccessor = _this;\n        }\n        _this._tabIndex = parseInt(tabIndex) || 0;\n        _this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n        _this.floatPlaceholder = _this._placeholderOptions.float || 'auto';\n        return _this;\n    }\n    Object.defineProperty(MdSelect.prototype, \"placeholder\", {\n        /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var _this = this;\n            this._placeholder = value;\n            // Must wait to record the trigger width to ensure placeholder width is included.\n            Promise.resolve(null).then(function () { return _this._setTriggerWidth(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"required\", {\n        /**\n         * Whether the component is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"multiple\", {\n        /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */\n        get: function () { return this._multiple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._selectionModel) {\n                throw getMdSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether to float the placeholder text.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"tabIndex\", {\n        /**\n         * Tab index for the select element.\n         * @return {?}\n         */\n        get: function () { return this.disabled ? -1 : this._tabIndex; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (typeof value !== 'undefined') {\n                this._tabIndex = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"optionSelectionChanges\", {\n        /**\n         * Combined stream of all of the child options' change events.\n         * @return {?}\n         */\n        get: function () {\n            return merge.apply(void 0, this.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnInit = function () {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._initKeyManager();\n        this._changeSubscription = startWith.call(this.options.changes, null).subscribe(function () {\n            _this._resetOptions();\n            if (_this._control) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve(null).then(function () { return _this._setSelectionByValue(_this._control.value); });\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype.ngOnDestroy = function () {\n        this._dropSubscriptions();\n        if (this._changeSubscription) {\n            this._changeSubscription.unsubscribe();\n        }\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MdSelect.prototype.toggle = function () {\n        this.panelOpen ? this.close() : this.open();\n    };\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype.open = function () {\n        if (this.disabled || !this.options.length) {\n            return;\n        }\n        if (!this._triggerWidth) {\n            this._setTriggerWidth();\n        }\n        this._calculateOverlayPosition();\n        this._placeholderState = this._floatPlaceholderState();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MdSelect.prototype.close = function () {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            if (this._selectionModel.isEmpty()) {\n                this._placeholderState = '';\n            }\n            this.focus();\n        }\n    };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdSelect.prototype.writeValue = function (value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdSelect.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MdSelect.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(MdSelect.prototype, \"panelOpen\", {\n        /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"selected\", {\n        /**\n         * The currently selected option.\n         * @return {?}\n         */\n        get: function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSelect.prototype, \"triggerValue\", {\n        /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */\n        get: function () {\n            if (this._multiple) {\n                var /** @type {?} */ selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MdSelect.prototype._isRtl = function () {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    };\n    /**\n     * Sets the width of the trigger element. This is necessary to match\n     * the overlay width to the trigger width.\n     * @return {?}\n     */\n    MdSelect.prototype._setTriggerWidth = function () {\n        this._triggerWidth = this._getTriggerRect().width;\n    };\n    /**\n     * Handles the keyboard interactions of a closed select.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSelect.prototype._handleClosedKeydown = function (event) {\n        if (!this.disabled) {\n            if (event.keyCode === ENTER || event.keyCode === SPACE) {\n                event.preventDefault(); // prevents the page from scrolling down when pressing space\n                this.open();\n            }\n            else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n                this._handleArrowKey(event);\n            }\n        }\n    };\n    /**\n     * Handles keypresses inside the panel.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSelect.prototype._handlePanelKeydown = function (event) {\n        if (event.keyCode === HOME || event.keyCode === END) {\n            event.preventDefault();\n            event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                this._keyManager.setLastItemActive();\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    };\n    /**\n     * When the panel element is finished transforming in (though not fading in), it\n     * emits an event and focuses an option if the panel is open.\n     * @return {?}\n     */\n    MdSelect.prototype._onPanelDone = function () {\n        if (this.panelOpen) {\n            this._focusCorrectOption();\n            this.onOpen.emit();\n        }\n        else {\n            this.onClose.emit();\n            this._panelDoneAnimating = false;\n            this.overlayDir.offsetX = 0;\n        }\n    };\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._onFadeInDone = function () {\n        this._panelDoneAnimating = this.panelOpen;\n    };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MdSelect.prototype._onBlur = function () {\n        if (!this.panelOpen) {\n            this._onTouched();\n        }\n    };\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    MdSelect.prototype._onAttached = function () {\n        this._calculateOverlayOffsetX();\n        this._setScrollTop();\n    };\n    /**\n     * Sets the scroll position of the scroll container. This must be called after\n     * the overlay pane is attached or the scroll container element will not yet be\n     * present in the DOM.\n     * @return {?}\n     */\n    MdSelect.prototype._setScrollTop = function () {\n        var /** @type {?} */ scrollContainer = this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */\n        ((scrollContainer)).scrollTop = this._scrollTop;\n    };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    MdSelect.prototype._setSelectionByValue = function (value, isUserInput) {\n        var _this = this;\n        if (isUserInput === void 0) {\n            isUserInput = false;\n        }\n        var /** @type {?} */ isArray = Array.isArray(value);\n        if (this.multiple && value && !isArray) {\n            throw getMdSelectNonArrayValueError();\n        }\n        this._clearSelection();\n        if (isArray) {\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });\n            this._sortValues();\n        }\n        else {\n            this._selectValue(value, isUserInput);\n        }\n        this._setValueWidth();\n        if (this._selectionModel.isEmpty()) {\n            this._placeholderState = '';\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Option that has the corresponding value.\n     */\n    MdSelect.prototype._selectValue = function (value, isUserInput) {\n        if (isUserInput === void 0) {\n            isUserInput = false;\n        }\n        var /** @type {?} */ optionsArray = this.options.toArray();\n        var /** @type {?} */ correspondingOption = optionsArray.find(function (option) {\n            return option.value != null && option.value === value;\n        });\n        if (correspondingOption) {\n            isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n            this._selectionModel.select(correspondingOption);\n            this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n        }\n        return correspondingOption;\n    };\n    /**\n     * Clears the select trigger and deselects every option in the list.\n     * @param {?=} skip Option that should not be deselected.\n     * @return {?}\n     */\n    MdSelect.prototype._clearSelection = function (skip) {\n        this._selectionModel.clear();\n        this.options.forEach(function (option) {\n            if (option !== skip) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdSelect.prototype._getTriggerRect = function () {\n        return this.trigger.nativeElement.getBoundingClientRect();\n    };\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._initKeyManager = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.options);\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () { return _this.close(); });\n    };\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    MdSelect.prototype._resetOptions = function () {\n        this._dropSubscriptions();\n        this._listenToOptions();\n        this._setOptionIds();\n        this._setOptionMultiple();\n    };\n    /**\n     * Listens to user-generated selection events on each option.\n     * @return {?}\n     */\n    MdSelect.prototype._listenToOptions = function () {\n        var _this = this;\n        this._optionSubscription = filter.call(this.optionSelectionChanges, function (event) { return event.isUserInput; }).subscribe(function (event) {\n            _this._onSelect(event.source);\n            _this._setValueWidth();\n            if (!_this.multiple) {\n                _this.close();\n            }\n        });\n    };\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._onSelect = function (option) {\n        var /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n        // TODO(crisbeto): handle blank/null options inside multi-select.\n        if (this.multiple) {\n            this._selectionModel.toggle(option);\n            wasSelected ? option.deselect() : option.select();\n            this._sortValues();\n        }\n        else {\n            this._clearSelection(option.value == null ? undefined : option);\n            if (option.value == null) {\n                this._propagateChanges(option.value);\n            }\n            else {\n                this._selectionModel.select(option);\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n    };\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n    MdSelect.prototype._sortValues = function () {\n        var _this = this;\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.options.forEach(function (option) {\n                if (option.selected) {\n                    _this._selectionModel.select(option);\n                }\n            });\n        }\n    };\n    /**\n     * Unsubscribes from all option subscriptions.\n     * @return {?}\n     */\n    MdSelect.prototype._dropSubscriptions = function () {\n        if (this._optionSubscription) {\n            this._optionSubscription.unsubscribe();\n            this._optionSubscription = null;\n        }\n    };\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    MdSelect.prototype._propagateChanges = function (fallbackValue) {\n        var /** @type {?} */ valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(function (option) { return option.value; });\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._onChange(valueToEmit);\n        this.change.emit(new MdSelectChange(this, valueToEmit));\n    };\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionIds = function () {\n        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n    };\n    /**\n     * Sets the `multiple` property on each option. The promise is necessary\n     * in order to avoid Angular errors when modifying the property after init.\n     * @return {?}\n     */\n    MdSelect.prototype._setOptionMultiple = function () {\n        var _this = this;\n        if (this.multiple) {\n            Promise.resolve(null).then(function () {\n                _this.options.forEach(function (option) { return option.multiple = _this.multiple; });\n            });\n        }\n    };\n    /**\n     * Must set the width of the selected option's value programmatically\n     * because it is absolutely positioned and otherwise will not clip\n     * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n     * @return {?}\n     */\n    MdSelect.prototype._setValueWidth = function () {\n        this._selectedValueWidth = this._triggerWidth - 13;\n    };\n    /**\n     * Focuses the selected item. If no option is selected, it will focus\n     * the first item instead.\n     * @return {?}\n     */\n    MdSelect.prototype._focusCorrectOption = function () {\n        if (this._selectionModel.isEmpty()) {\n            this._keyManager.setFirstItemActive();\n        }\n        else {\n            this._keyManager.setActiveItem(/** @type {?} */ ((this._getOptionIndex(this._selectionModel.selected[0]))));\n        }\n    };\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    MdSelect.prototype.focus = function () {\n        this._elementRef.nativeElement.focus();\n    };\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    MdSelect.prototype._getOptionIndex = function (option) {\n        return this.options.reduce(function (result, current, index) {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    };\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayPosition = function () {\n        var /** @type {?} */ items = this._getItemCount();\n        var /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n        // The farthest the panel can be scrolled before it hits the bottom\n        var /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n        if (this._selectionModel.hasValue()) {\n            var /** @type {?} */ selectedOptionOffset = ((this._getOptionIndex(this._selectionModel.selected[0])));\n            selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n            // We must maintain a scroll buffer so the selected option will be scrolled to the\n            // center of the overlay panel rather than the top.\n            var /** @type {?} */ scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        }\n        else {\n            // If no option is selected, the panel centers on the first option. In this case,\n            // we must only adjust for the height difference between the option element\n            // and the trigger element, then multiply it by -1 to ensure the panel moves\n            // in the correct direction up the page.\n            this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n                (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n        }\n        this._checkOverlayWithinViewport(maxScroll);\n    };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n        var /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        var /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return clampValue(0, optimalScrollPosition, maxScroll);\n    };\n    /**\n     * Figures out the appropriate animation state for the placeholder.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderAnimationState = function () {\n        if (this.floatPlaceholder === 'never') {\n            return '';\n        }\n        if (this.floatPlaceholder === 'always') {\n            return this._floatPlaceholderState();\n        }\n        return this._placeholderState;\n    };\n    /**\n     * Determines the CSS `opacity` of the placeholder element.\n     * @return {?}\n     */\n    MdSelect.prototype._getPlaceholderOpacity = function () {\n        return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n            '1' : '0';\n    };\n    Object.defineProperty(MdSelect.prototype, \"_ariaLabel\", {\n        /**\n         * Returns the aria-label of the select component.\n         * @return {?}\n         */\n        get: function () {\n            // If an ariaLabelledby value has been set, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayOffsetX = function () {\n        var /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ isRtl = this._isRtl();\n        var /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        var /** @type {?} */ offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            var /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        var /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        var /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors.\n        this.overlayDir.offsetX = offsetX;\n        this.overlayDir.overlayRef.updatePosition();\n    };\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._calculateOverlayOffsetY = function (selectedIndex, scrollBuffer, maxScroll) {\n        var /** @type {?} */ optionOffsetFromPanelTop;\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n        }\n        else if (this._scrollTop === maxScroll) {\n            var /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n            var /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop =\n                selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height\n        // difference, multiplied by -1 to ensure that the overlay moves in the correct\n        // direction up the page.\n        return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n    };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {\n        var /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n        var /** @type {?} */ triggerRect = this._getTriggerRect();\n        var /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ bottomSpaceAvailable = viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n        var /** @type {?} */ totalPanelHeight = Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n        var /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    };\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {\n        var /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% bottom 0px\";\n        }\n    };\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MdSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {\n        var /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% top 0px\";\n            return;\n        }\n    };\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    MdSelect.prototype._getOriginBasedOnOption = function () {\n        var /** @type {?} */ originY = Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n        return \"50% \" + originY + \"px 0px\";\n    };\n    /**\n     * Figures out the floating placeholder state value.\n     * @return {?}\n     */\n    MdSelect.prototype._floatPlaceholderState = function () {\n        return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n    };\n    /**\n     * Handles the user pressing the arrow keys on a closed select.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSelect.prototype._handleArrowKey = function (event) {\n        if (this._multiple) {\n            event.preventDefault();\n            this.open();\n        }\n        else {\n            var /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n            // Cycle though the select options even when the select is closed,\n            // matching the behavior of the native select element.\n            // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n            // however the key manager only supports up/down at the moment.\n            this._keyManager.onKeydown(event);\n            var /** @type {?} */ currentActiveItem = (this._keyManager.activeItem);\n            if (currentActiveItem !== prevActiveItem) {\n                this._clearSelection();\n                this._setSelectionByValue(currentActiveItem.value, true);\n                this._propagateChanges();\n            }\n        }\n    };\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n    MdSelect.prototype._getItemCount = function () {\n        return this.options.length + this.optionGroups.length;\n    };\n    /**\n     * Calculates the amount of option group labels that precede the specified option.\n     * Useful when positioning the panel, because the labels will offset the index of the\n     * currently-selected option.\n     * @param {?} optionIndex\n     * @return {?}\n     */\n    MdSelect.prototype._getLabelCountBeforeOption = function (optionIndex) {\n        if (this.optionGroups.length) {\n            var /** @type {?} */ options = this.options.toArray();\n            var /** @type {?} */ groups = this.optionGroups.toArray();\n            var /** @type {?} */ groupCounter = 0;\n            for (var /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n                if (options[i].group && options[i].group === groups[groupCounter]) {\n                    groupCounter++;\n                }\n            }\n            return groupCounter;\n        }\n        return 0;\n    };\n    return MdSelect;\n}(_MdSelectMixinBase));\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min, n, max) {\n    return Math.min(Math.max(min, n), max);\n}\nvar MdSelectModule = /*@__PURE__*/ (function () {\n    function MdSelectModule() {\n    }\n    return MdSelectModule;\n}());\nvar MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdSlideToggle; }),\n    multi: true\n};\nvar MdSlideToggleChange = /*@__PURE__*/ (function () {\n    function MdSlideToggleChange() {\n    }\n    return MdSlideToggleChange;\n}());\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextId$1 = 0;\n/**\n * \\@docs-private\n */\nvar MdSlideToggleBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdSlideToggleBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdSlideToggleBase;\n}());\nvar _MdSlideToggleMixinBase = /*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisabled(MdSlideToggleBase), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nvar MdSlideToggle = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdSlideToggle, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} _platform\n     * @param {?} _focusOriginMonitor\n     * @param {?} _changeDetectorRef\n     */\n    function MdSlideToggle(elementRef, renderer, _platform, _focusOriginMonitor, _changeDetectorRef) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._platform = _platform;\n        _this._focusOriginMonitor = _focusOriginMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.onChange = function (_) { };\n        _this.onTouched = function () { };\n        _this._uniqueId = \"md-slide-toggle-\" + ++nextId$1;\n        _this._checked = false;\n        _this._required = false;\n        _this._disableRipple = false;\n        /**\n         * Name value will be applied to the input element if present\n         */\n        _this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        _this.id = _this._uniqueId;\n        /**\n         * Used to specify the tabIndex value for the underlying input element.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n         */\n        _this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        _this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        _this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        _this.change = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MdSlideToggle.prototype, \"required\", {\n        /**\n         * Whether the slide-toggle is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect for this slide-toggle is disabled.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlideToggle.prototype, \"inputId\", {\n        /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n        this._focusOriginMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * The onChangeEvent method will be also called on click.\n     * This is because everything for the slide-toggle is wrapped inside of a label,\n     * which triggers a onChange event on click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n        if (!this.disabled && !this._slideRenderer.dragging) {\n            this.toggle();\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputClick = function (event) {\n        this.onTouched();\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlideToggle.prototype.writeValue = function (value) {\n        this.checked = value;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MdSlideToggle.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.focus = function () {\n        this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    };\n    Object.defineProperty(MdSlideToggle.prototype, \"checked\", {\n        /**\n         * Whether the slide-toggle is checked.\n         * @return {?}\n         */\n        get: function () { return !!this._checked; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this.checked !== !!value) {\n                this._checked = value;\n                this.onChange(this._checked);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    MdSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            // For keyboard focus show a persistent ripple as focus indicator.\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            this.onTouched();\n            // Fade out and clear the focus ripple if one is currently present.\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    };\n    /**\n     * Emits the change event to the `change` output EventEmitter\n     * @return {?}\n     */\n    MdSlideToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MdSlideToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragStart = function () {\n        if (!this.disabled) {\n            this._slideRenderer.startThumbDrag(this.checked);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDrag = function (event) {\n        if (this._slideRenderer.dragging) {\n            this._slideRenderer.updateThumbPosition(event.deltaX);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSlideToggle.prototype._onDragEnd = function () {\n        var _this = this;\n        if (this._slideRenderer.dragging) {\n            var /** @type {?} */ _previousChecked = this.checked;\n            this.checked = this._slideRenderer.dragPercentage > 50;\n            if (_previousChecked !== this.checked) {\n                this._emitChangeEvent();\n            }\n            // The drag should be stopped outside of the current event handler, because otherwise the\n            // click event will be fired before and will revert the drag change.\n            setTimeout(function () { return _this._slideRenderer.stopThumbDrag(); });\n        }\n    };\n    return MdSlideToggle;\n}(_MdSlideToggleMixinBase));\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nvar SlideToggleRenderer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     */\n    function SlideToggleRenderer(_elementRef, platform) {\n        this._elementRef = _elementRef;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this.dragging = false;\n        // We only need to interact with these elements when we're on the browser, so only grab\n        // the reference in that case.\n        if (platform.isBrowser) {\n            this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n            this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n        }\n    }\n    /**\n     * Initializes the drag of the slide-toggle.\n     * @param {?} checked\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {\n        if (this.dragging) {\n            return;\n        }\n        this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n        this._thumbEl.classList.add('mat-dragging');\n        this._previousChecked = checked;\n        this.dragging = true;\n    };\n    /**\n     * Resets the current drag and returns the new checked value.\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.stopThumbDrag = function () {\n        if (!this.dragging) {\n            return false;\n        }\n        this.dragging = false;\n        this._thumbEl.classList.remove('mat-dragging');\n        // Reset the transform because the component will take care of the thumb position after drag.\n        applyCssTransform(this._thumbEl, '');\n        return this.dragPercentage > 50;\n    };\n    /**\n     * Updates the thumb containers position from the specified distance.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {\n        this.dragPercentage = this._getDragPercentage(distance);\n        // Calculate the moved distance based on the thumb bar width.\n        var /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n        applyCssTransform(this._thumbEl, \"translate3d(\" + dragX + \"px, 0, 0)\");\n    };\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype._getDragPercentage = function (distance) {\n        var /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    };\n    return SlideToggleRenderer;\n}());\nvar MdSlideToggleModule = /*@__PURE__*/ (function () {\n    function MdSlideToggleModule() {\n    }\n    return MdSlideToggleModule;\n}());\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nvar DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nvar MD_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdSlider; }),\n    multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nvar MdSliderChange = /*@__PURE__*/ (function () {\n    function MdSliderChange() {\n    }\n    return MdSliderChange;\n}());\n/**\n * \\@docs-private\n */\nvar MdSliderBase = /*@__PURE__*/ (function () {\n    function MdSliderBase() {\n    }\n    return MdSliderBase;\n}());\nvar _MdSliderMixinBase = /*@__PURE__*/ mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nvar MdSlider = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdSlider, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} _elementRef\n     * @param {?} _focusOriginMonitor\n     * @param {?} _dir\n     */\n    function MdSlider(renderer, _elementRef, _focusOriginMonitor, _dir) {\n        var _this = _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        _this._focusOriginMonitor = _focusOriginMonitor;\n        _this._dir = _dir;\n        _this._invert = false;\n        _this._max = 100;\n        _this._min = 0;\n        _this._step = 1;\n        _this._thumbLabel = false;\n        _this._tickInterval = 0;\n        _this._value = null;\n        _this._vertical = false;\n        _this.color = 'accent';\n        /**\n         * Event emitted when the slider value has changed.\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Event emitted when the slider thumb moves.\n         */\n        _this.input = new EventEmitter();\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        _this.onTouched = function () { };\n        _this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        _this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        _this._isActive = false;\n        /**\n         * The size of a tick interval as a percentage of the size of the track.\n         */\n        _this._tickIntervalPercent = 0;\n        /**\n         * The dimensions of the slider.\n         */\n        _this._sliderDimensions = null;\n        _this._controlValueAccessorChangeFn = function () { };\n        _this._focusOriginMonitor.monitor(_this._elementRef.nativeElement, renderer, true)\n            .subscribe(function (origin) { return _this._isActive = !!origin && origin !== 'keyboard'; });\n        _this._renderer = new SliderRenderer(_this._elementRef);\n        return _this;\n    }\n    Object.defineProperty(MdSlider.prototype, \"invert\", {\n        /**\n         * Whether the slider is inverted.\n         * @return {?}\n         */\n        get: function () { return this._invert; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._invert = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"max\", {\n        /**\n         * The maximum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._max;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"min\", {\n        /**\n         * The minimum value that the slider can have.\n         * @return {?}\n         */\n        get: function () {\n            return this._min;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"step\", {\n        /**\n         * The values at which the thumb will snap.\n         * @return {?}\n         */\n        get: function () { return this._step; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundLabelTo = ((this._step.toString().split('.').pop())).length;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"thumbLabel\", {\n        /**\n         * Whether or not to show the thumb label.\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbLabelDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._thumbLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._thumbLabel = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"tickInterval\", {\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         * @return {?}\n         */\n        get: function () { return this._tickInterval; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, /** @type {?} */ (this._tickInterval));\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_tickIntervalDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.tickInterval; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.tickInterval = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"value\", {\n        /**\n         * Value of the slider.\n         * @return {?}\n         */\n        get: function () {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._value = coerceNumberProperty(v, this._value || 0);\n            this._percent = this._calculatePercentage(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"vertical\", {\n        /**\n         * Whether the slider is vertical.\n         * @return {?}\n         */\n        get: function () { return this._vertical; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._vertical = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"displayValue\", {\n        /**\n         * The value to be used for display purposes.\n         * @return {?}\n         */\n        get: function () {\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundLabelTo);\n            }\n            return this.value || 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"percent\", {\n        /**\n         * The percentage of the slider that coincides with the value.\n         * @return {?}\n         */\n        get: function () { return this._clamp(this._percent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertAxis\", {\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         * @return {?}\n         */\n        get: function () {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_isMinValue\", {\n        /**\n         * Whether the slider is at its minimum value.\n         * @return {?}\n         */\n        get: function () {\n            return this.percent === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbGap\", {\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         * @return {?}\n         */\n        get: function () {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackBackgroundStyles\", {\n        /**\n         * CSS styles for the track background element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + (1 - this.percent) + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_trackFillStyles\", {\n        /**\n         * CSS styles for the track fill element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            var /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale\" + axis + \"(\" + this.percent + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksContainerStyles\", {\n        /**\n         * CSS styles for the ticks container element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n            var /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_ticksStyles\", {\n        /**\n         * CSS styles for the ticks element.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n            var /** @type {?} */ backgroundSize = this.vertical ? \"2px \" + tickSize + \"%\" : tickSize + \"% 2px\";\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n            var /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n            var /** @type {?} */ styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': \"translateZ(0) translate\" + axis + \"(\" + sign + tickSize / 2 + \"%)\" + rotate\n            };\n            if (this._isMinValue && this._thumbGap) {\n                var /** @type {?} */ side = this.vertical ?\n                    (this._invertAxis ? 'Bottom' : 'Top') :\n                    (this._invertAxis ? 'Right' : 'Left');\n                styles[\"padding\" + side] = this._thumbGap + \"px\";\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_thumbContainerStyles\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var /** @type {?} */ invertOffset = (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            var /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': \"translate\" + axis + \"(-\" + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_invertMouseCoords\", {\n        /**\n         * Whether mouse events should be converted to a slider position by calculating their distance\n         * from the right or bottom edge of the slider as opposed to the top or left.\n         * @return {?}\n         */\n        get: function () {\n            return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSlider.prototype, \"_direction\", {\n        /**\n         * The language direction for this slider element.\n         * @return {?}\n         */\n        get: function () {\n            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype.ngOnDestroy = function () {\n        this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onMouseenter = function () {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onClick = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        this._isSliding = false;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\n        /* Emits a change and input event if the value changed. */\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlide = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n        // Native range elements always emit `input` events when the value changed while sliding.\n        this._emitInputEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideStart = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // Simulate mouseenter in case this is a mobile device.\n        this._onMouseenter();\n        event.preventDefault();\n        this._isSliding = true;\n        this._renderer.addFocus();\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onSlideEnd = function () {\n        this._isSliding = false;\n        this._emitValueIfChanged();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onFocus = function () {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._renderer.getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onBlur = function () {\n        this.onTouched();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdSlider.prototype._onKeydown = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._direction == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._direction == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    MdSlider.prototype._onKeyup = function () {\n        this._isSliding = false;\n    };\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @param {?} numSteps\n     * @return {?}\n     */\n    MdSlider.prototype._increment = function (numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n        this._emitInputEvent();\n        this._emitValueIfChanged();\n    };\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @param {?} pos\n     * @return {?}\n     */\n    MdSlider.prototype._updateValueFromPosition = function (pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        var /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        var /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        var /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n        if (this._invertMouseCoords) {\n            percent = 1 - percent;\n        }\n        var /** @type {?} */ exactValue = this._calculateValue(percent);\n        // This calculation finds the closest step by finding the closest whole number divisible by the\n        // step relative to the min.\n        var /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n        // The value needs to snap to the min and max.\n        this.value = this._clamp(closestValue, this.min, this.max);\n    };\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitValueIfChanged = function () {\n        if (this.value != this._lastChangeValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastChangeValue = this.value;\n            this._controlValueAccessorChangeFn(this.value);\n            this.change.emit(event);\n        }\n    };\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @return {?}\n     */\n    MdSlider.prototype._emitInputEvent = function () {\n        if (this.value != this._lastInputValue) {\n            var /** @type {?} */ event = this._createChangeEvent();\n            this._lastInputValue = this.value;\n            this.input.emit(event);\n        }\n    };\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @return {?}\n     */\n    MdSlider.prototype._updateTickIntervalPercent = function () {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            var /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            var /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            var /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            var /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    };\n    /**\n     * Creates a slider change object from the specified value.\n     * @param {?=} value\n     * @return {?}\n     */\n    MdSlider.prototype._createChangeEvent = function (value) {\n        if (value === void 0) {\n            value = this.value;\n        }\n        var /** @type {?} */ event = new MdSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    };\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype._calculatePercentage = function (value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    };\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @param {?} percentage\n     * @return {?}\n     */\n    MdSlider.prototype._calculateValue = function (percentage) {\n        return this.min + percentage * (this.max - this.min);\n    };\n    /**\n     * Return a number between two numbers.\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    MdSlider.prototype._clamp = function (value, min, max) {\n        if (min === void 0) {\n            min = 0;\n        }\n        if (max === void 0) {\n            max = 1;\n        }\n        return Math.max(min, Math.min(value, max));\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MdSlider.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to eb triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MdSlider.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MdSlider.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return MdSlider;\n}(_MdSliderMixinBase));\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nvar SliderRenderer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function SliderRenderer(elementRef) {\n        this._sliderElement = elementRef.nativeElement;\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @return {?}\n     */\n    SliderRenderer.prototype.getSliderDimensions = function () {\n        var /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n        return wrapperElement ? wrapperElement.getBoundingClientRect() : null;\n    };\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @return {?}\n     */\n    SliderRenderer.prototype.addFocus = function () {\n        this._sliderElement.focus();\n    };\n    return SliderRenderer;\n}());\nvar MdSliderModule = /*@__PURE__*/ (function () {\n    function MdSliderModule() {\n    }\n    return MdSliderModule;\n}());\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nfunction throwMdDuplicatedSidenavError(align) {\n    throw Error(\"A sidenav was already declared for 'align=\\\"\" + align + \"\\\"'\");\n}\n/**\n * Sidenav toggle promise result.\n */\nvar MdSidenavToggleResult = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} type\n     * @param {?} animationFinished\n     */\n    function MdSidenavToggleResult(type, animationFinished) {\n        this.type = type;\n        this.animationFinished = animationFinished;\n    }\n    return MdSidenavToggleResult;\n}());\n/**\n * <md-sidenav> component.\n *\n * This component corresponds to the drawer of the sidenav.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MdSidenav = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n     *     If not available we do not hook on transitions.\n     * @param {?} _focusTrapFactory\n     * @param {?} _doc\n     */\n    function MdSidenav(_elementRef, _focusTrapFactory, _doc) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._doc = _doc;\n        /**\n         * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n         */\n        this._align = 'start';\n        /**\n         * Mode of the sidenav; one of 'over', 'push' or 'side'.\n         */\n        this.mode = 'over';\n        this._disableClose = false;\n        /**\n         * Whether the sidenav is opened.\n         */\n        this._opened = false;\n        /**\n         * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n         */\n        this.onOpenStart = new EventEmitter();\n        /**\n         * Event emitted when the sidenav is fully opened.\n         */\n        this.onOpen = new EventEmitter();\n        /**\n         * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n         */\n        this.onCloseStart = new EventEmitter();\n        /**\n         * Event emitted when the sidenav is fully closed.\n         */\n        this.onClose = new EventEmitter();\n        /**\n         * Event emitted when the sidenav alignment changes.\n         */\n        this.onAlignChanged = new EventEmitter();\n        /**\n         * The current toggle animation promise. `null` if no animation is in progress.\n         */\n        this._toggleAnimationPromise = null;\n        /**\n         * The current toggle animation promise resolution function.\n         * `null` if no animation is in progress.\n         */\n        this._resolveToggleAnimationPromise = null;\n        this._elementFocusedBeforeSidenavWasOpened = null;\n        this.onOpen.subscribe(function () {\n            if (_this._doc) {\n                _this._elementFocusedBeforeSidenavWasOpened = _this._doc.activeElement;\n            }\n            if (_this.isFocusTrapEnabled && _this._focusTrap) {\n                _this._focusTrap.focusInitialElementWhenReady();\n            }\n        });\n        this.onClose.subscribe(function () { return _this._restoreFocus(); });\n    }\n    Object.defineProperty(MdSidenav.prototype, \"align\", {\n        /**\n         * Direction which the sidenav is aligned in.\n         * @return {?}\n         */\n        get: function () { return this._align; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // Make sure we have a valid value.\n            value = (value == 'end') ? 'end' : 'start';\n            if (value != this._align) {\n                this._align = value;\n                this.onAlignChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"disableClose\", {\n        /**\n         * Whether the sidenav can be closed with the escape key or not.\n         * @return {?}\n         */\n        get: function () { return this._disableClose; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"isFocusTrapEnabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            // The focus trap is only enabled when the sidenav is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n     * opened.\n     * @return {?}\n     */\n    MdSidenav.prototype._restoreFocus = function () {\n        var /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n                this._elementFocusedBeforeSidenavWasOpened.focus();\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeSidenavWasOpened = null;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngAfterContentInit = function () {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n        // This can happen when the sidenav is set to opened in\n        // the template and the transition hasn't ended.\n        if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(true);\n            this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenav.prototype.ngOnDestroy = function () {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"opened\", {\n        /**\n         * Whether the sidenav is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */\n        get: function () { return this._opened; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.toggle(coerceBooleanProperty(v));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.open = function () {\n        return this.toggle(true);\n    };\n    /**\n     * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n     * rejected if it didn't).\n     * @return {?}\n     */\n    MdSidenav.prototype.close = function () {\n        return this.toggle(false);\n    };\n    /**\n     * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n     * close() when it's closed.\n     * @param {?=} isOpen Whether the sidenav should be open.\n     * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n     */\n    MdSidenav.prototype.toggle = function (isOpen) {\n        var _this = this;\n        if (isOpen === void 0) {\n            isOpen = !this.opened;\n        }\n        // Shortcut it if we're already opened.\n        if (isOpen === this.opened) {\n            return this._toggleAnimationPromise ||\n                Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n        }\n        this._opened = isOpen;\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this.isFocusTrapEnabled;\n        }\n        if (isOpen) {\n            this.onOpenStart.emit();\n        }\n        else {\n            this.onCloseStart.emit();\n        }\n        if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n            this._resolveToggleAnimationPromise(false);\n        }\n        this._toggleAnimationPromise = new Promise(function (resolve) {\n            _this._resolveToggleAnimationPromise = function (animationFinished) { return resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished)); };\n        });\n        return this._toggleAnimationPromise;\n    };\n    /**\n     * Handles the keyboard events.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MdSidenav.prototype.handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE && !this.disableClose) {\n            this.close();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * When transition has finished, set the internal state for classes and emit the proper event.\n     * The event passed is actually of type TransitionEvent, but that type is not available in\n     * Android so we use any.\n     * @param {?} transitionEvent\n     * @return {?}\n     */\n    MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {\n        if (transitionEvent.target == this._elementRef.nativeElement\n            && transitionEvent.propertyName.endsWith('transform')) {\n            if (this._opened) {\n                this.onOpen.emit();\n            }\n            else {\n                this.onClose.emit();\n            }\n            if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n                this._resolveToggleAnimationPromise(true);\n                this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n            }\n        }\n    };\n    Object.defineProperty(MdSidenav.prototype, \"_isClosing\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpening\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !!this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isClosed\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return !this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isOpened\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._opened && !this._toggleAnimationPromise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_isEnd\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.align == 'end';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeSide\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modeOver\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'over';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_modePush\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'push';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenav.prototype, \"_width\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._elementRef.nativeElement) {\n                return this._elementRef.nativeElement.offsetWidth;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdSidenav;\n}());\n/**\n * <md-sidenav-container> component.\n *\n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MdSidenavContainer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _ngZone\n     */\n    function MdSidenavContainer(_dir, _element, _renderer, _ngZone) {\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        /**\n         * Event emitted when the sidenav backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Whether to enable open/close trantions.\n         */\n        this._enableTransitions = false;\n        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n        // properties to point to the proper start/end.\n        if (_dir != null) {\n            _dir.change.subscribe(function () { return _this._validateDrawers(); });\n        }\n    }\n    Object.defineProperty(MdSidenavContainer.prototype, \"start\", {\n        /**\n         * The sidenav child with the `start` alignment.\n         * @return {?}\n         */\n        get: function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSidenavContainer.prototype, \"end\", {\n        /**\n         * The sidenav child with the `end` alignment.\n         * @return {?}\n         */\n        get: function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // On changes, assert on consistency.\n        this._sidenavs.changes.subscribe(function () { return _this._validateDrawers(); });\n        this._sidenavs.forEach(function (sidenav) {\n            _this._watchSidenavToggle(sidenav);\n            _this._watchSidenavAlign(sidenav);\n        });\n        this._validateDrawers();\n        // Give the view a chance to render the initial state, then enable transitions.\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(function () { return _this._enableTransitions = true; });\n    };\n    /**\n     * Calls `open` of both start and end sidenavs\n     * @return {?}\n     */\n    MdSidenavContainer.prototype.open = function () {\n        return Promise.all([this._start, this._end]\n            .filter(function (sidenav) { return sidenav; })\n            .map(function (sidenav) { return ((sidenav)).open(); }));\n    };\n    /**\n     * Calls `close` of both start and end sidenavs\n     * @return {?}\n     */\n    MdSidenavContainer.prototype.close = function () {\n        return Promise.all([this._start, this._end]\n            .filter(function (sidenav) { return sidenav; })\n            .map(function (sidenav) { return ((sidenav)).close(); }));\n    };\n    /**\n     * Subscribes to sidenav events in order to set a class on the main container element when the\n     * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavToggle = function (sidenav) {\n        var _this = this;\n        if (!sidenav || sidenav.mode === 'side') {\n            return;\n        }\n        sidenav.onOpen.subscribe(function () { return _this._setContainerClass(true); });\n        sidenav.onClose.subscribe(function () { return _this._setContainerClass(false); });\n    };\n    /**\n     * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n     * changes.\n     * @param {?} sidenav\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._watchSidenavAlign = function (sidenav) {\n        var _this = this;\n        if (!sidenav) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping sides at the same time.\n        sidenav.onAlignChanged.subscribe(function () { return first.call(_this._ngZone.onMicrotaskEmpty).subscribe(function () { return _this._validateDrawers(); }); });\n    };\n    /**\n     * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._setContainerClass = function (isAdd) {\n        if (isAdd) {\n            this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n        }\n        else {\n            this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n        }\n    };\n    /**\n     * Validate the state of the sidenav children components.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._validateDrawers = function () {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end sidenav.\n        // NOTE: We must call toArray on _sidenavs even though it's iterable\n        // (see https://github.com/Microsoft/TypeScript/issues/3164).\n        for (var _i = 0, _a = this._sidenavs.toArray(); _i < _a.length; _i++) {\n            var sidenav = _a[_i];\n            if (sidenav.align == 'end') {\n                if (this._end != null) {\n                    throwMdDuplicatedSidenavError('end');\n                }\n                this._end = sidenav;\n            }\n            else {\n                if (this._start != null) {\n                    throwMdDuplicatedSidenavError('start');\n                }\n                this._start = sidenav;\n            }\n        }\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir == null || this._dir.value == 'ltr') {\n            this._left = this._start;\n            this._right = this._end;\n        }\n        else {\n            this._left = this._end;\n            this._right = this._start;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._onBackdropClicked = function () {\n        this.backdropClick.emit();\n        this._closeModalSidenav();\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._closeModalSidenav = function () {\n        // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(function (sidenav) { return sidenav && !sidenav.disableClose && sidenav.mode !== 'side'; })\n            .forEach(function (sidenav) { return ((sidenav)).close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isShowingBackdrop = function () {\n        return (this._isSidenavOpen(this._start) && ((this._start)).mode != 'side')\n            || (this._isSidenavOpen(this._end) && ((this._end)).mode != 'side');\n    };\n    /**\n     * @param {?} side\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._isSidenavOpen = function (side) {\n        return side != null && side.opened;\n    };\n    /**\n     * Return the width of the sidenav, if it's in the proper mode and opened.\n     * This may relayout the view, so do not call this often.\n     * @param {?} sidenav\n     * @param {?} mode\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {\n        return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginLeft = function () {\n        return this._left ? this._getSidenavEffectiveWidth(this._left, 'side') : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getMarginRight = function () {\n        return this._right ? this._getSidenavEffectiveWidth(this._right, 'side') : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionLeft = function () {\n        return this._left ? this._getSidenavEffectiveWidth(this._left, 'push') : 0;\n    };\n    /**\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionRight = function () {\n        return this._right ? this._getSidenavEffectiveWidth(this._right, 'push') : 0;\n    };\n    /**\n     * Returns the horizontal offset for the content area.  There should never be a value for both\n     * left and right, so by subtracting the right value from the left value, we should always get\n     * the appropriate offset.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getPositionOffset = function () {\n        return this._getPositionLeft() - this._getPositionRight();\n    };\n    /**\n     * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n     * doesn't seem to work right now.\n     * @return {?}\n     */\n    MdSidenavContainer.prototype._getStyles = function () {\n        return {\n            marginLeft: this._getMarginLeft() + \"px\",\n            marginRight: this._getMarginRight() + \"px\",\n            transform: \"translate3d(\" + this._getPositionOffset() + \"px, 0, 0)\"\n        };\n    };\n    return MdSidenavContainer;\n}());\nvar MdSidenavModule = /*@__PURE__*/ (function () {\n    function MdSidenavModule() {\n    }\n    return MdSidenavModule;\n}());\nvar MdListDivider = /*@__PURE__*/ (function () {\n    function MdListDivider() {\n    }\n    return MdListDivider;\n}());\nvar MdList = /*@__PURE__*/ (function () {\n    function MdList() {\n        this._disableRipple = false;\n    }\n    Object.defineProperty(MdList.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect should be disabled on the list-items or not.\n         * This flag only has an effect for `md-nav-list` components.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    return MdList;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListCssMatStyler = /*@__PURE__*/ (function () {\n    function MdListCssMatStyler() {\n    }\n    return MdListCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdNavListCssMatStyler = /*@__PURE__*/ (function () {\n    function MdNavListCssMatStyler() {\n    }\n    return MdNavListCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdDividerCssMatStyler = /*@__PURE__*/ (function () {\n    function MdDividerCssMatStyler() {\n    }\n    return MdDividerCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListAvatarCssMatStyler = /*@__PURE__*/ (function () {\n    function MdListAvatarCssMatStyler() {\n    }\n    return MdListAvatarCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListIconCssMatStyler = /*@__PURE__*/ (function () {\n    function MdListIconCssMatStyler() {\n    }\n    return MdListIconCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdListSubheaderCssMatStyler = /*@__PURE__*/ (function () {\n    function MdListSubheaderCssMatStyler() {\n    }\n    return MdListSubheaderCssMatStyler;\n}());\nvar MdListItem = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _list\n     * @param {?} navList\n     */\n    function MdListItem(_renderer, _element, _list, navList) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._list = _list;\n        this._disableRipple = false;\n        this._isNavList = false;\n        this._isNavList = !!navList;\n    }\n    Object.defineProperty(MdListItem.prototype, \"disableRipple\", {\n        /**\n         * Whether the ripple effect on click should be disabled. This applies only to list items that are\n         * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdListItem.prototype, \"_hasAvatar\", {\n        /**\n         * @param {?} avatar\n         * @return {?}\n         */\n        set: function (avatar) {\n            if (avatar != null) {\n                this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n            }\n            else {\n                this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    MdListItem.prototype.isRippleEnabled = function () {\n        return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleFocus = function () {\n        this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n    };\n    /**\n     * @return {?}\n     */\n    MdListItem.prototype._handleBlur = function () {\n        this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n    };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdListItem.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    return MdListItem;\n}());\nvar MdListModule = /*@__PURE__*/ (function () {\n    function MdListModule() {\n    }\n    return MdListModule;\n}());\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToString(value) {\n    return \"\" + (value || '');\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToNumber(value) {\n    return typeof value === 'string' ? parseInt(value, 10) : value;\n}\nvar MdGridTile = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTile(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    Object.defineProperty(MdGridTile.prototype, \"rowspan\", {\n        /**\n         * Amount of rows that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._rowspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._rowspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridTile.prototype, \"colspan\", {\n        /**\n         * Amount of columns that the grid tile takes up.\n         * @return {?}\n         */\n        get: function () { return this._colspan; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._colspan = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MdGridTile.prototype._setStyle = function (property, value) {\n        this._renderer.setStyle(this._element.nativeElement, property, value);\n    };\n    return MdGridTile;\n}());\nvar MdGridTileText = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function MdGridTileText(_renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    MdGridTileText.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n    };\n    return MdGridTileText;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridAvatarCssMatStyler = /*@__PURE__*/ (function () {\n    function MdGridAvatarCssMatStyler() {\n    }\n    return MdGridAvatarCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileHeaderCssMatStyler = /*@__PURE__*/ (function () {\n    function MdGridTileHeaderCssMatStyler() {\n    }\n    return MdGridTileHeaderCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdGridTileFooterCssMatStyler = /*@__PURE__*/ (function () {\n    function MdGridTileFooterCssMatStyler() {\n    }\n    return MdGridTileFooterCssMatStyler;\n}());\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nvar TileCoordinator = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} numColumns\n     * @param {?} tiles\n     */\n    function TileCoordinator(numColumns, tiles) {\n        var _this = this;\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });\n    }\n    Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\n        /**\n         * Gets the total number of rows occupied by tiles\n         * @return {?}\n         */\n        get: function () { return this.rowIndex + 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\n        /**\n         * Gets the total span of rows occupied by tiles.\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ lastRowMax = Math.max.apply(Math, this.tracker);\n            // if any of the tiles has a rowspan that pushes it beyond the total row count,\n            // add the difference to the rowcount\n            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._trackTile = function (tile) {\n        // Find a gap large enough for this tile.\n        var /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    };\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    TileCoordinator.prototype._findMatchingGap = function (tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(\"md-grid-list: tile with colspan \" + tileCols + \" is wider than \" +\n                (\"grid with cols=\\\"\" + this.tracker.length + \"\\\".\"));\n        }\n        // Start index is inclusive, end index is exclusive.\n        var /** @type {?} */ gapStartIndex = -1;\n        var /** @type {?} */ gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile.\n        } while (gapEndIndex - gapStartIndex < tileCols);\n        return gapStartIndex;\n    };\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    TileCoordinator.prototype._nextRow = function () {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (var /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    };\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {\n        for (var /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    };\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._markTilePosition = function (start, tile) {\n        for (var /** @type {?} */ i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    };\n    return TileCoordinator;\n}());\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nvar TilePosition = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    function TilePosition(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n    return TilePosition;\n}());\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nvar TileStyler = /*@__PURE__*/ (function () {\n    function TileStyler() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    };\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return \"(\" + sizePercent + \"% - ( \" + this._gutterSize + \" * \" + gutterFraction + \" ))\";\n    };\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTilePosition = function (baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\n    };\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTileSize = function (baseSize, span) {\n        return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\n    };\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        var /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        var /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    };\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        var /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        var /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    };\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    TileStyler.prototype.getGutterSpan = function () {\n        return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\n    };\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    TileStyler.prototype.getTileSpan = function (tileHeight) {\n        return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\n    };\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    TileStyler.prototype.getComputedHeight = function () { return null; };\n    return TileStyler;\n}());\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nvar FixedTileStyler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FixedTileStyler, _super);\n    /**\n     * @param {?} fixedRowHeight\n     */\n    function FixedTileStyler(fixedRowHeight) {\n        var _this = _super.call(this) || this;\n        _this.fixedRowHeight = fixedRowHeight;\n        return _this;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    };\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    FixedTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    return FixedTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nvar RatioTileStyler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RatioTileStyler, _super);\n    /**\n     * @param {?} value\n     */\n    function RatioTileStyler(value) {\n        var _this = _super.call(this) || this;\n        _this._parseRatio(value);\n        return _this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n        var /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use paddingTop and marginTop to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    };\n    /**\n     * @return {?}\n     */\n    RatioTileStyler.prototype.getComputedHeight = function () {\n        return [\n            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\n        ];\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RatioTileStyler.prototype._parseRatio = function (value) {\n        var /** @type {?} */ ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(\"md-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\");\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    };\n    return RatioTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * \\@docs-private\n */\nvar FitTileStyler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FitTileStyler, _super);\n    function FitTileStyler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    FitTileStyler.prototype.setRowStyles = function (tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        var /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        var /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        var /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    };\n    return FitTileStyler;\n}(TileStyler));\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return \"calc(\" + exp + \")\"; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nvar MD_FIT_MODE = 'fit';\nvar MdGridList = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    function MdGridList(_renderer, _element, _dir) {\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    Object.defineProperty(MdGridList.prototype, \"cols\", {\n        /**\n         * Amount of columns in the grid list.\n         * @return {?}\n         */\n        get: function () { return this._cols; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._cols = coerceToNumber(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"gutterSize\", {\n        /**\n         * Size of the grid list's gutter in pixels.\n         * @return {?}\n         */\n        get: function () { return this._gutter; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._gutter = coerceToString(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdGridList.prototype, \"rowHeight\", {\n        /**\n         * Set internal representation of row height from the user-provided value.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._rowHeight = coerceToString(value);\n            this._setTileStyler();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdGridList.prototype.ngOnInit = function () {\n        this._checkCols();\n        this._checkRowHeight();\n    };\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    MdGridList.prototype.ngAfterContentChecked = function () {\n        this._layoutTiles();\n    };\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkCols = function () {\n        if (!this.cols) {\n            throw Error(\"md-grid-list: must pass in number of columns. \" +\n                \"Example: <md-grid-list cols=\\\"3\\\">\");\n        }\n    };\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    MdGridList.prototype._checkRowHeight = function () {\n        if (!this._rowHeight) {\n            this._tileStyler = new RatioTileStyler('1:1');\n        }\n    };\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @return {?}\n     */\n    MdGridList.prototype._setTileStyler = function () {\n        if (this._rowHeight === MD_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(this._rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(this._rowHeight);\n        }\n    };\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    MdGridList.prototype._layoutTiles = function () {\n        var _this = this;\n        var /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n        var /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        this._tiles.forEach(function (tile, index) {\n            var /** @type {?} */ pos = tracker.positions[index];\n            _this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    };\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    MdGridList.prototype._setListStyle = function (style$$1) {\n        if (style$$1) {\n            this._renderer.setStyle(this._element.nativeElement, style$$1[0], style$$1[1]);\n        }\n    };\n    return MdGridList;\n}());\nvar MdGridListModule = /*@__PURE__*/ (function () {\n    function MdGridListModule() {\n    }\n    return MdGridListModule;\n}());\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardContent = /*@__PURE__*/ (function () {\n    function MdCardContent() {\n    }\n    return MdCardContent;\n}());\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardTitle = /*@__PURE__*/ (function () {\n    function MdCardTitle() {\n    }\n    return MdCardTitle;\n}());\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardSubtitle = /*@__PURE__*/ (function () {\n    function MdCardSubtitle() {\n    }\n    return MdCardSubtitle;\n}());\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardActions = /*@__PURE__*/ (function () {\n    function MdCardActions() {\n    }\n    return MdCardActions;\n}());\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nvar MdCardFooter = /*@__PURE__*/ (function () {\n    function MdCardFooter() {\n    }\n    return MdCardFooter;\n}());\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardImage = /*@__PURE__*/ (function () {\n    function MdCardImage() {\n    }\n    return MdCardImage;\n}());\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardSmImage = /*@__PURE__*/ (function () {\n    function MdCardSmImage() {\n    }\n    return MdCardSmImage;\n}());\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardMdImage = /*@__PURE__*/ (function () {\n    function MdCardMdImage() {\n    }\n    return MdCardMdImage;\n}());\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardLgImage = /*@__PURE__*/ (function () {\n    function MdCardLgImage() {\n    }\n    return MdCardLgImage;\n}());\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardXlImage = /*@__PURE__*/ (function () {\n    function MdCardXlImage() {\n    }\n    return MdCardXlImage;\n}());\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nvar MdCardAvatar = /*@__PURE__*/ (function () {\n    function MdCardAvatar() {\n    }\n    return MdCardAvatar;\n}());\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nvar MdCard = /*@__PURE__*/ (function () {\n    function MdCard() {\n    }\n    return MdCard;\n}());\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nvar MdCardHeader = /*@__PURE__*/ (function () {\n    function MdCardHeader() {\n    }\n    return MdCardHeader;\n}());\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nvar MdCardTitleGroup = /*@__PURE__*/ (function () {\n    function MdCardTitleGroup() {\n    }\n    return MdCardTitleGroup;\n}());\nvar MdCardModule = /*@__PURE__*/ (function () {\n    function MdCardModule() {\n    }\n    return MdCardModule;\n}());\n/**\n * \\@docs-private\n */\nvar MdChipBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdChipBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdChipBase;\n}());\nvar _MdChipMixinBase = /*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nvar MdBasicChip = /*@__PURE__*/ (function () {\n    function MdBasicChip() {\n    }\n    return MdBasicChip;\n}());\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nvar MdChip = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdChip, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     */\n    function MdChip(renderer, elementRef) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._selected = false;\n        /**\n         * Whether the chip has focus.\n         */\n        _this._hasFocus = false;\n        /**\n         * Emitted when the chip is focused.\n         */\n        _this.onFocus = new EventEmitter();\n        /**\n         * Emitted when the chip is selected.\n         */\n        _this.select = new EventEmitter();\n        /**\n         * Emitted when the chip is deselected.\n         */\n        _this.deselect = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        _this.destroy = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MdChip.prototype, \"selected\", {\n        /**\n         * Whether the chip is selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = coerceBooleanProperty(value);\n            (this.selected ? this.select : this.deselect).emit({ chip: this });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdChip.prototype.ngOnDestroy = function () {\n        this.destroy.emit({ chip: this });\n    };\n    /**\n     * Toggles the current selected state of this chip.\n     * @return {?} Whether the chip is selected.\n     */\n    MdChip.prototype.toggleSelected = function () {\n        this.selected = !this.selected;\n        return this.selected;\n    };\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    MdChip.prototype.focus = function () {\n        this._elementRef.nativeElement.focus();\n        this.onFocus.emit({ chip: this });\n    };\n    /**\n     * Ensures events fire properly upon click.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChip.prototype._handleClick = function (event) {\n        // Check disabled\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else {\n            this.focus();\n        }\n    };\n    return MdChip;\n}(_MdChipMixinBase));\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n *\n * Example:\n *\n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nvar MdChipList = /*@__PURE__*/ (function () {\n    function MdChipList() {\n        /**\n         * Track which chips we're listening to for focus/destruction.\n         */\n        this._subscribed = new WeakMap();\n        /**\n         * Whether or not the chip is selectable.\n         */\n        this._selectable = true;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n    }\n    /**\n     * @return {?}\n     */\n    MdChipList.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.chips).withWrap();\n        // Prevents the chip list from capturing focus and redirecting\n        // it back to the first chip when the user tabs out.\n        this._tabOutSubscription = this._keyManager.tabOut.subscribe(function () {\n            _this._tabIndex = -1;\n            setTimeout(function () { return _this._tabIndex = 0; });\n        });\n        // Go ahead and subscribe all of the initial chips\n        this._subscribeChips(this.chips);\n        // When the list changes, re-subscribe\n        this.chips.changes.subscribe(function (chips) {\n            _this._subscribeChips(chips);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdChipList.prototype.ngOnDestroy = function () {\n        if (this._tabOutSubscription) {\n            this._tabOutSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(MdChipList.prototype, \"selectable\", {\n        /**\n         * Whether or not this chip is selectable. When a chip is not selectable,\n         * it's selected state is always ignored.\n         * @return {?}\n         */\n        get: function () { return this._selectable; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Programmatically focus the chip list. This in turn focuses the first\n     * non-disabled chip in this chip list.\n     * @return {?}\n     */\n    MdChipList.prototype.focus = function () {\n        // TODO: ARIA says this should focus the first `selected` chip.\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    MdChipList.prototype._keydown = function (event) {\n        var /** @type {?} */ target = (event.target);\n        // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n        if (target && target.classList.contains('mat-chip')) {\n            switch (event.keyCode) {\n                case SPACE:\n                    // If we are selectable, toggle the focused chip\n                    if (this.selectable) {\n                        this._toggleSelectOnFocusedChip();\n                    }\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n                case LEFT_ARROW:\n                    this._keyManager.setPreviousItemActive();\n                    event.preventDefault();\n                    break;\n                case RIGHT_ARROW:\n                    this._keyManager.setNextItemActive();\n                    event.preventDefault();\n                    break;\n                default:\n                    this._keyManager.onKeydown(event);\n            }\n        }\n    };\n    /**\n     * Toggles the selected state of the currently focused chip.\n     * @return {?}\n     */\n    MdChipList.prototype._toggleSelectOnFocusedChip = function () {\n        // Allow disabling of chip selection\n        if (!this.selectable) {\n            return;\n        }\n        var /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n        if (typeof focusedIndex === 'number' && this._isValidIndex(focusedIndex)) {\n            var /** @type {?} */ focusedChip = this.chips.toArray()[focusedIndex];\n            if (focusedChip) {\n                focusedChip.toggleSelected();\n            }\n        }\n    };\n    /**\n     * Iterate through the list of chips and add them to our list of\n     * subscribed chips.\n     *\n     * @param {?} chips The list of chips to be subscribed.\n     * @return {?}\n     */\n    MdChipList.prototype._subscribeChips = function (chips) {\n        var _this = this;\n        chips.forEach(function (chip) { return _this._addChip(chip); });\n    };\n    /**\n     * Add a specific chip to our subscribed list. If the chip has\n     * already been subscribed, this ensures it is only subscribed\n     * once.\n     *\n     * @param {?} chip The chip to be subscribed (or checked for existing\n     * subscription).\n     * @return {?}\n     */\n    MdChipList.prototype._addChip = function (chip) {\n        var _this = this;\n        // If we've already been subscribed to a parent, do nothing\n        if (this._subscribed.has(chip)) {\n            return;\n        }\n        // Watch for focus events outside of the keyboard navigation\n        chip.onFocus.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex)) {\n                _this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n        });\n        // On destroy, remove the item from our list, and check focus\n        chip.destroy.subscribe(function () {\n            var /** @type {?} */ chipIndex = _this.chips.toArray().indexOf(chip);\n            if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\n                // Check whether the chip is the last item\n                if (chipIndex < _this.chips.length - 1) {\n                    _this._keyManager.setActiveItem(chipIndex);\n                }\n                else if (chipIndex - 1 >= 0) {\n                    _this._keyManager.setActiveItem(chipIndex - 1);\n                }\n            }\n            _this._subscribed.delete(chip);\n            chip.destroy.unsubscribe();\n        });\n        this._subscribed.set(chip, true);\n    };\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    MdChipList.prototype._isValidIndex = function (index) {\n        return index >= 0 && index < this.chips.length;\n    };\n    return MdChipList;\n}());\nvar MdChipsModule = /*@__PURE__*/ (function () {\n    function MdChipsModule() {\n    }\n    return MdChipsModule;\n}());\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMdIconNameNotFoundError(iconName) {\n    return Error(\"Unable to find icon with the name \\\"\" + iconName + \"\\\"\");\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMdIconNoHttpProviderError() {\n    return Error('Could not find Http provider for use with Angular Material icons. ' +\n        'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMdIconFailedToSanitizeError(url) {\n    return Error(\"The URL provided to MdIconRegistry was not trusted as a resource URL \" +\n        (\"via Angular's DomSanitizer. Attempted URL was \\\"\" + url + \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nvar SvgIconConfig = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} url\n     */\n    function SvgIconConfig(url) {\n        this.url = url;\n        this.svgElement = null;\n    }\n    return SvgIconConfig;\n}());\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nvar MdIconRegistry = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _http\n     * @param {?} _sanitizer\n     */\n    function MdIconRegistry(_http, _sanitizer) {\n        this._http = _http;\n        this._sanitizer = _sanitizer;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    };\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {\n        var /** @type {?} */ key = iconKey(namespace, iconName);\n        this._svgIconConfigs.set(key, new SvgIconConfig(url));\n        return this;\n    };\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSet = function (url) {\n        return this.addSvgIconSetInNamespace('', url);\n    };\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {\n        var /** @type {?} */ config = new SvgIconConfig(url);\n        var /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    };\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the <md-icon> element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {\n        if (className === void 0) {\n            className = alias;\n        }\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    };\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    MdIconRegistry.prototype.classNameForFontAlias = function (alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    };\n    /**\n     * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {\n        this._defaultFontSetClass = className;\n        return this;\n    };\n    /**\n     * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getDefaultFontSetClass = function () {\n        return this._defaultFontSetClass;\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {\n        var _this = this;\n        var /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMdIconFailedToSanitizeError(safeUrl);\n        }\n        var /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n            .call(doOperator, function (svg) { return _this._cachedIconsByUrl.set(/** @type {?} */ ((url)), svg); })\n            .call(map, function (svg) { return cloneSvg(svg); })\n            .result();\n    };\n    /**\n     * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {\n        if (namespace === void 0) {\n            namespace = '';\n        }\n        // Return (copy of) cached icon if possible.\n        var /** @type {?} */ key = iconKey(namespace, name);\n        var /** @type {?} */ config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        var /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return _throw(getMdIconNameNotFoundError(key));\n    };\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromConfig = function (config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return RxChain.from(this._loadSvgIconFromConfig(config))\n                .call(doOperator, function (svg) { return config.svgElement = svg; })\n                .call(map, function (svg) { return cloneSvg(svg); })\n                .result();\n        }\n    };\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {\n        var _this = this;\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        var /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        var /** @type {?} */ iconSetFetchRequests = iconSetConfigs\n            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })\n            .map(function (iconSetConfig) {\n            return RxChain.from(_this._loadSvgIconSetFromConfig(iconSetConfig))\n                .call(catchOperator, function (err) {\n                var /** @type {?} */ url = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the combined Observable won't\n                // necessarily fail.\n                console.log(\"Loading icon set URL: \" + url + \" failed: \" + err);\n                return of(null);\n            })\n                .call(doOperator, function (svg) {\n                // Cache the SVG element.\n                if (svg) {\n                    iconSetConfig.svgElement = svg;\n                }\n            })\n                .result();\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return map.call(forkJoin.call(Observable, iconSetFetchRequests), function () {\n            var /** @type {?} */ foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMdIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        });\n    };\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (var /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n            var /** @type {?} */ config = iconSetConfigs[i];\n            if (config.svgElement) {\n                var /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {\n        var _this = this;\n        return map.call(this._fetchUrl(config.url), function (svgText) { return _this._createSvgElementForSingleIcon(svgText); });\n    };\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {\n        var _this = this;\n        // TODO: Document that icons should only be loaded from trusted sources.\n        return map.call(this._fetchUrl(config.url), function (svgText) { return _this._svgElementFromString(svgText); });\n    };\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText) {\n        var /** @type {?} */ svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    };\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName) {\n        var /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n        if (!iconNode) {\n            return null;\n        }\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconNode.tagName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconNode.cloneNode(true)));\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconNode.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconNode));\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        var /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconNode.cloneNode(true));\n        return this._setSvgAttributes(svg);\n    };\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    MdIconRegistry.prototype._svgElementFromString = function (str) {\n        // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n        // creating an element from an HTML string.\n        var /** @type {?} */ div = document.createElement('DIV');\n        div.innerHTML = str;\n        var /** @type {?} */ svg = (div.querySelector('svg'));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    };\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @param {?} element\n     * @return {?}\n     */\n    MdIconRegistry.prototype._toSvgElement = function (element) {\n        var /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n        for (var /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    };\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIconRegistry.prototype._setSvgAttributes = function (svg) {\n        if (!svg.getAttribute('xmlns')) {\n            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        }\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    };\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    MdIconRegistry.prototype._fetchUrl = function (safeUrl) {\n        var _this = this;\n        if (!this._http) {\n            throw getMdIconNoHttpProviderError();\n        }\n        var /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMdIconFailedToSanitizeError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        var /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        var /** @type {?} */ req = RxChain.from(this._http.get(url))\n            .call(map, function (response) { return response.text(); })\n            .call(finallyOperator, function () { return _this._inProgressUrlFetches.delete(url); })\n            .call(share)\n            .result();\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    };\n    return MdIconRegistry;\n}());\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http, sanitizer) {\n    return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\nvar ICON_REGISTRY_PROVIDER = {\n    // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MdIconRegistry,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), MdIconRegistry], [/*@__PURE__*/ new Optional(), Http], DomSanitizer],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (svg.cloneNode(true));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n/**\n * \\@docs-private\n */\nvar MdIconBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdIconBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdIconBase;\n}());\nvar _MdIconMixinBase = /*@__PURE__*/ mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nvar MdIcon = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdIcon, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _mdIconRegistry\n     * @param {?} ariaHidden\n     */\n    function MdIcon(renderer, elementRef, _mdIconRegistry, ariaHidden) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._mdIconRegistry = _mdIconRegistry;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n        }\n        return _this;\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)\n     * @param {?} iconName\n     * @return {?}\n     */\n    MdIcon.prototype._splitIconName = function (iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        var /** @type {?} */ parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                // Use default namespace.\n                return ['', parts[0]];\n            case 2:\n                return (parts);\n            default:\n                throw Error(\"Invalid icon name: \\\"\" + iconName + \"\\\"\");\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ changedInputs = Object.keys(changes);\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n            if (this.svgIcon) {\n                var _a = this._splitIconName(this.svgIcon), namespace = _a[0], iconName = _a[1];\n                first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) { return console.log(\"Error retrieving icon: \" + err.message); });\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype.ngOnInit = function () {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._usingFontIcon = function () {\n        return !this.svgIcon;\n    };\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    MdIcon.prototype._setSvgElement = function (svg) {\n        var /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n        // Remove existing child nodes and add the new SVG element.\n        // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n        // but it fails in IE11: https://github.com/angular/angular/issues/6327\n        layoutElement.innerHTML = '';\n        this._renderer.appendChild(layoutElement, svg);\n    };\n    /**\n     * @return {?}\n     */\n    MdIcon.prototype._updateFontIconClasses = function () {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        var /** @type {?} */ elem = this._elementRef.nativeElement;\n        var /** @type {?} */ fontSetClass = this.fontSet ?\n            this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n            this._mdIconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                this._renderer.removeClass(elem, this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                this._renderer.addClass(elem, fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                this._renderer.removeClass(elem, this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                this._renderer.addClass(elem, this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    };\n    return MdIcon;\n}(_MdIconMixinBase));\nvar MdIconModule = /*@__PURE__*/ (function () {\n    function MdIconModule() {\n    }\n    return MdIconModule;\n}());\n/**\n * A single degree in radians.\n */\nvar DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nvar DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nvar DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nvar startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nvar endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nvar MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nvar HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nvar PROGRESS_SPINNER_STROKE_WIDTH = 10;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MdProgressSpinnerCssMatStyler = /*@__PURE__*/ (function () {\n    function MdProgressSpinnerCssMatStyler() {\n    }\n    return MdProgressSpinnerCssMatStyler;\n}());\n/**\n * \\@docs-private\n */\nvar MdProgressSpinnerBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdProgressSpinnerBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdProgressSpinnerBase;\n}());\nvar _MdProgressSpinnerMixinBase = /*@__PURE__*/ mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nvar MdProgressSpinner = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdProgressSpinner, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _ngZone\n     */\n    function MdProgressSpinner(renderer, elementRef, _ngZone) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._ngZone = _ngZone;\n        /**\n         * The id of the last requested animation.\n         */\n        _this._lastAnimationId = 0;\n        _this._mode = 'determinate';\n        /**\n         * Stroke width of the progress spinner. By default uses 10px as stroke width.\n         */\n        _this.strokeWidth = PROGRESS_SPINNER_STROKE_WIDTH;\n        return _this;\n    }\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMin\", {\n        /**\n         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n         * because voiceover does not report the progress indicator as indeterminate if the aria min\n         * and/or max value are number values.\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"_ariaValueMax\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 100 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"interdeterminateInterval\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._interdeterminateInterval;\n        },\n        /**\n         * \\@docs-private\n         * @param {?} interval\n         * @return {?}\n         */\n        set: function (interval) {\n            if (this._interdeterminateInterval) {\n                clearInterval(this._interdeterminateInterval);\n            }\n            this._interdeterminateInterval = interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up any animations that were running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype.ngOnDestroy = function () {\n        this._cleanupIndeterminateAnimation();\n    };\n    Object.defineProperty(MdProgressSpinner.prototype, \"value\", {\n        /**\n         * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n         * @return {?}\n         */\n        get: function () {\n            if (this.mode == 'determinate') {\n                return this._value;\n            }\n            return 0;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            if (v != null && this.mode == 'determinate') {\n                var /** @type {?} */ newValue = clamp(v);\n                this._animateCircle(this.value || 0, newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressSpinner.prototype, \"mode\", {\n        /**\n         * Mode of the progress circle\n         *\n         * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n         * mode is bound to the host as the attribute host.\n         * @return {?}\n         */\n        get: function () {\n            return this._mode;\n        },\n        /**\n         * @param {?} mode\n         * @return {?}\n         */\n        set: function (mode) {\n            if (mode !== this._mode) {\n                if (mode === 'indeterminate') {\n                    this._startIndeterminateAnimation();\n                }\n                else {\n                    this._cleanupIndeterminateAnimation();\n                    this._animateCircle(0, this._value);\n                }\n                this._mode = mode;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Animates the circle from one percentage value to another.\n     *\n     * @param {?} animateFrom The percentage of the circle filled starting the animation.\n     * @param {?} animateTo The percentage of the circle filled ending the animation.\n     * @param {?=} ease The easing function to manage the pace of change in the animation.\n     * @param {?=} duration The length of time to show the animation, in milliseconds.\n     * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n     *    of the circle.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {\n        var _this = this;\n        if (ease === void 0) {\n            ease = linearEase;\n        }\n        if (duration === void 0) {\n            duration = DURATION_DETERMINATE;\n        }\n        if (rotation === void 0) {\n            rotation = 0;\n        }\n        var /** @type {?} */ id = ++this._lastAnimationId;\n        var /** @type {?} */ startTime = Date.now();\n        var /** @type {?} */ changeInValue = animateTo - animateFrom;\n        // No need to animate it if the values are the same\n        if (animateTo === animateFrom) {\n            this._renderArc(animateTo, rotation);\n        }\n        else {\n            var /** @type {?} */ animation_1 = function () {\n                // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n                var /** @type {?} */ elapsedTime = HAS_RAF ?\n                    Math.max(0, Math.min(Date.now() - startTime, duration)) :\n                    duration;\n                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);\n                // Prevent overlapping animations by checking if a new animation has been called for and\n                // if the animation has lasted longer than the animation duration.\n                if (id === _this._lastAnimationId && elapsedTime < duration) {\n                    requestAnimationFrame(animation_1);\n                }\n            };\n            // Run the animation outside of Angular's zone, in order to avoid\n            // hitting ZoneJS and change detection on each frame.\n            this._ngZone.runOutsideAngular(animation_1);\n        }\n    };\n    /**\n     * Starts the indeterminate animation interval, if it is not already running.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._startIndeterminateAnimation = function () {\n        var _this = this;\n        var /** @type {?} */ rotationStartPoint = 0;\n        var /** @type {?} */ start = startIndeterminate;\n        var /** @type {?} */ end = endIndeterminate;\n        var /** @type {?} */ duration = DURATION_INDETERMINATE;\n        var /** @type {?} */ animate$$1 = function () {\n            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n            rotationStartPoint = (rotationStartPoint + end) % 100;\n            var /** @type {?} */ temp = start;\n            start = -end;\n            end = -temp;\n        };\n        if (!this.interdeterminateInterval) {\n            this._ngZone.runOutsideAngular(function () {\n                _this.interdeterminateInterval = setInterval(animate$$1, duration + 50, 0, false);\n                animate$$1();\n            });\n        }\n    };\n    /**\n     * Removes interval, ending the animation.\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {\n        this.interdeterminateInterval = null;\n    };\n    /**\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n     * DOM attribute on the `<path>`.\n     * @param {?} currentValue\n     * @param {?=} rotation\n     * @return {?}\n     */\n    MdProgressSpinner.prototype._renderArc = function (currentValue, rotation) {\n        if (rotation === void 0) {\n            rotation = 0;\n        }\n        if (this._path) {\n            var /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n            this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n        }\n    };\n    return MdProgressSpinner;\n}(_MdProgressSpinnerMixinBase));\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nvar MdSpinner = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdSpinner, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} renderer\n     */\n    function MdSpinner(elementRef, ngZone, renderer) {\n        var _this = _super.call(this, renderer, elementRef, ngZone) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MdSpinner.prototype.ngOnDestroy = function () {\n        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    return MdSpinner;\n}(MdProgressSpinner));\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v) {\n    return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius, pathRadius, angleInDegrees) {\n    var /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n    return (radius + (pathRadius * Math.cos(angleInRadians))) +\n        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime, startValue, changeInValue, duration) {\n    return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime, startValue, changeInValue, duration) {\n    var /** @type {?} */ time = currentTime / duration;\n    var /** @type {?} */ timeCubed = Math.pow(time, 3);\n    var /** @type {?} */ timeQuad = Math.pow(time, 4);\n    var /** @type {?} */ timeQuint = Math.pow(time, 5);\n    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue, rotation, strokeWidth) {\n    var /** @type {?} */ startPoint = rotation || 0;\n    var /** @type {?} */ radius = 50;\n    var /** @type {?} */ pathRadius = radius - strokeWidth;\n    var /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n    var /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n    var /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n    var /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n    var /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n    var /** @type {?} */ largeArcFlag;\n    if (endAngle < 0) {\n        largeArcFlag = endAngle >= -180 ? 0 : 1;\n    }\n    else {\n        largeArcFlag = endAngle <= 180 ? 0 : 1;\n    }\n    return \"M\" + start + \"A\" + pathRadius + \",\" + pathRadius + \" 0 \" + largeArcFlag + \",\" + arcSweep + \" \" + end;\n}\nvar MdProgressSpinnerModule = /*@__PURE__*/ (function () {\n    function MdProgressSpinnerModule() {\n    }\n    return MdProgressSpinnerModule;\n}());\n/**\n * <md-progress-bar> component.\n */\nvar MdProgressBar = /*@__PURE__*/ (function () {\n    function MdProgressBar() {\n        /**\n         * Color of the progress bar.\n         */\n        this.color = 'primary';\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n    }\n    Object.defineProperty(MdProgressBar.prototype, \"value\", {\n        /**\n         * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n         * @return {?}\n         */\n        get: function () { return this._value; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._value = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdProgressBar.prototype, \"bufferValue\", {\n        /**\n         * Buffer value of the progress bar. Defaults to zero.\n         * @return {?}\n         */\n        get: function () { return this._bufferValue; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._bufferValue = clamp$1(v || 0); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    MdProgressBar.prototype._primaryTransform = function () {\n        var /** @type {?} */ scale = this.value / 100;\n        return { transform: \"scaleX(\" + scale + \")\" };\n    };\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    MdProgressBar.prototype._bufferTransform = function () {\n        if (this.mode == 'buffer') {\n            var /** @type {?} */ scale = this.bufferValue / 100;\n            return { transform: \"scaleX(\" + scale + \")\" };\n        }\n    };\n    return MdProgressBar;\n}());\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp$1(v, min, max) {\n    if (min === void 0) {\n        min = 0;\n    }\n    if (max === void 0) {\n        max = 100;\n    }\n    return Math.max(min, Math.min(max, v));\n}\nvar MdProgressBarModule = /*@__PURE__*/ (function () {\n    function MdProgressBarModule() {\n    }\n    return MdProgressBarModule;\n}());\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMdInputContainerPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMdInputContainerUnsupportedTypeError(type) {\n    return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by md-input-container.\");\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nfunction getMdInputContainerDuplicatedHintError(align) {\n    return Error(\"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMdInputContainerMissingMdInputError() {\n    return Error('md-input-container must contain an mdInput directive. ' +\n        'Did you forget to add mdInput to the native input or textarea element?');\n}\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nvar MD_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'color',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar nextUniqueId$1 = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nvar MdPlaceholder = /*@__PURE__*/ (function () {\n    function MdPlaceholder() {\n    }\n    return MdPlaceholder;\n}());\n/**\n * Hint text to be shown underneath the input.\n */\nvar MdHint = /*@__PURE__*/ (function () {\n    function MdHint() {\n        /**\n         * Whether to align the hint label at the start or end of the line.\n         */\n        this.align = 'start';\n        /**\n         * Unique ID for the hint. Used for the aria-describedby on the input.\n         */\n        this.id = \"md-input-hint-\" + nextUniqueId$1++;\n    }\n    return MdHint;\n}());\n/**\n * Single error message to be shown underneath the input.\n */\nvar MdErrorDirective = /*@__PURE__*/ (function () {\n    function MdErrorDirective() {\n    }\n    return MdErrorDirective;\n}());\n/**\n * Prefix to be placed the the front of the input.\n */\nvar MdPrefix = /*@__PURE__*/ (function () {\n    function MdPrefix() {\n    }\n    return MdPrefix;\n}());\n/**\n * Suffix to be placed at the end of the input.\n */\nvar MdSuffix = /*@__PURE__*/ (function () {\n    function MdSuffix() {\n    }\n    return MdSuffix;\n}());\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nvar MdInputDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _platform\n     * @param {?} _ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} errorOptions\n     */\n    function MdInputDirective(_elementRef, _renderer, _platform, _ngControl, _parentForm, _parentFormGroup, errorOptions) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._platform = _platform;\n        this._ngControl = _ngControl;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        /**\n         * Variables used as cache for getters and setters.\n         */\n        this._type = 'text';\n        this._placeholder = '';\n        this._disabled = false;\n        this._required = false;\n        /**\n         * Whether the element is focused or not.\n         */\n        this.focused = false;\n        /**\n         * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n         */\n        this._placeholderChange = new EventEmitter();\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        this._errorOptions = errorOptions ? errorOptions : {};\n        this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n    }\n    Object.defineProperty(MdInputDirective.prototype, \"disabled\", {\n        /**\n         * Whether the element is disabled.\n         * @return {?}\n         */\n        get: function () {\n            return this._ngControl ? this._ngControl.disabled : this._disabled;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"id\", {\n        /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        get: function () { return this._id; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"placeholder\", {\n        /**\n         * Placeholder attribute of the element.\n         * @return {?}\n         */\n        get: function () { return this._placeholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._placeholder !== value) {\n                this._placeholder = value;\n                this._placeholderChange.emit(this._placeholder);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"required\", {\n        /**\n         * Whether the element is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"type\", {\n        /**\n         * Input type of the element.\n         * @return {?}\n         */\n        get: function () { return this._type; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"value\", {\n        /**\n         * The input element's value.\n         * @return {?}\n         */\n        get: function () { return this._elementRef.nativeElement.value; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._elementRef.nativeElement.value = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"empty\", {\n        /**\n         * Whether the input is empty.\n         * @return {?}\n         */\n        get: function () {\n            return !this._isNeverEmpty() &&\n                (this.value == null || this.value === '') &&\n                // Check if the input contains bad input. If so, we know that it only appears empty because\n                // the value failed to parse. From the user's perspective it is not empty.\n                // TODO(mmalerba): Add e2e test for bad input case.\n                !this._isBadInput();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputDirective.prototype, \"_uid\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._cachedUid = this._cachedUid || \"md-input-\" + nextUniqueId$1++; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the input element.\n     * @return {?}\n     */\n    MdInputDirective.prototype.focus = function () { this._elementRef.nativeElement.focus(); };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onFocus = function () { this.focused = true; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onBlur = function () { this.focused = false; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._onInput = function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /**\n     * Whether the input is in an error state.\n     * @return {?}\n     */\n    MdInputDirective.prototype._isErrorState = function () {\n        var /** @type {?} */ control = this._ngControl;\n        var /** @type {?} */ form = this._parentFormGroup || this._parentForm;\n        return control && this.errorStateMatcher(/** @type {?} */ (control.control), form);\n    };\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    MdInputDirective.prototype._validateType = function () {\n        if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n            throw getMdInputContainerUnsupportedTypeError(this._type);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isNeverEmpty = function () { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; };\n    /**\n     * @return {?}\n     */\n    MdInputDirective.prototype._isBadInput = function () {\n        // The `validity` property won't be present on platform-server.\n        var /** @type {?} */ validity = ((this._elementRef.nativeElement)).validity;\n        return validity && validity.badInput;\n    };\n    /**\n     * Determines if the component host is a textarea. If not recognizable it returns false.\n     * @return {?}\n     */\n    MdInputDirective.prototype._isTextarea = function () {\n        var /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n        // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n        // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n        // DOM closer.\n        var /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n        return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n    };\n    return MdInputDirective;\n}());\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nvar MdInputContainer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} placeholderOptions\n     */\n    function MdInputContainer(_elementRef, _changeDetectorRef, placeholderOptions) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Color of the input divider, based on the theme.\n         */\n        this.color = 'primary';\n        /**\n         * State of the md-hint and md-error animations.\n         */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = \"md-input-hint-\" + nextUniqueId$1++;\n        this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n        this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n    Object.defineProperty(MdInputContainer.prototype, \"dividerColor\", {\n        /**\n         * @deprecated Use color instead.\n         * @return {?}\n         */\n        get: function () { return this.color; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.color = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"hideRequiredMarker\", {\n        /**\n         * Whether the required marker should be hidden.\n         * @return {?}\n         */\n        get: function () { return this._hideRequiredMarker; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hideRequiredMarker = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"_shouldAlwaysFloat\", {\n        /**\n         * Whether the floating label should always float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder === 'always'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"_canPlaceholderFloat\", {\n        /**\n         * Whether the placeholder can float or not.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder !== 'never'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"hintLabel\", {\n        /**\n         * Text for the input hint.\n         * @return {?}\n         */\n        get: function () { return this._hintLabel; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._hintLabel = value;\n            this._processHints();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdInputContainer.prototype, \"floatPlaceholder\", {\n        /**\n         * Whether the placeholder should always float, never float or float as the user types.\n         * @return {?}\n         */\n        get: function () { return this._floatPlaceholder; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._validateInputChild();\n        this._processHints();\n        this._validatePlaceholders();\n        // Re-validate when things change.\n        this._hintChildren.changes.subscribe(function () { return _this._processHints(); });\n        this._mdInputChild._placeholderChange.subscribe(function () { return _this._validatePlaceholders(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterContentChecked = function () {\n        this._validateInputChild();\n    };\n    /**\n     * @return {?}\n     */\n    MdInputContainer.prototype.ngAfterViewInit = function () {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    };\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    MdInputContainer.prototype._shouldForward = function (prop) {\n        var /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n        return control && ((control))[prop];\n    };\n    /**\n     * Whether the input has a placeholder.\n     * @return {?}\n     */\n    MdInputContainer.prototype._hasPlaceholder = function () { return !!(this._mdInputChild.placeholder || this._placeholderChild); };\n    /**\n     * Focuses the underlying input.\n     * @return {?}\n     */\n    MdInputContainer.prototype._focusInput = function () { this._mdInputChild.focus(); };\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    MdInputContainer.prototype._getDisplayedMessages = function () {\n        var /** @type {?} */ input = this._mdInputChild;\n        return (this._errorChildren.length > 0 && input._isErrorState()) ? 'error' : 'hint';\n    };\n    /**\n     * Ensure that there is only one placeholder (either `input` attribute or child element with the\n     * `md-placeholder` attribute.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validatePlaceholders = function () {\n        if (this._mdInputChild.placeholder && this._placeholderChild) {\n            throw getMdInputContainerPlaceholderConflictError();\n        }\n    };\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    MdInputContainer.prototype._processHints = function () {\n        this._validateHints();\n        this._syncAriaDescribedby();\n    };\n    /**\n     * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validateHints = function () {\n        var _this = this;\n        if (this._hintChildren) {\n            var /** @type {?} */ startHint_1;\n            var /** @type {?} */ endHint_1;\n            this._hintChildren.forEach(function (hint) {\n                if (hint.align == 'start') {\n                    if (startHint_1 || _this.hintLabel) {\n                        throw getMdInputContainerDuplicatedHintError('start');\n                    }\n                    startHint_1 = hint;\n                }\n                else if (hint.align == 'end') {\n                    if (endHint_1) {\n                        throw getMdInputContainerDuplicatedHintError('end');\n                    }\n                    endHint_1 = hint;\n                }\n            });\n        }\n    };\n    /**\n     * Sets the child input's `aria-describedby` to a space-separated list of the ids\n     * of the currently-specified hints, as well as a generated id for the hint label.\n     * @return {?}\n     */\n    MdInputContainer.prototype._syncAriaDescribedby = function () {\n        if (this._mdInputChild) {\n            var /** @type {?} */ ids = [];\n            var /** @type {?} */ startHint = this._hintChildren ?\n                this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n            var /** @type {?} */ endHint = this._hintChildren ?\n                this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n            if (startHint) {\n                ids.push(startHint.id);\n            }\n            else if (this._hintLabel) {\n                ids.push(this._hintLabelId);\n            }\n            if (endHint) {\n                ids.push(endHint.id);\n            }\n            this._mdInputChild.ariaDescribedby = ids.join(' ');\n        }\n    };\n    /**\n     * Throws an error if the container's input child was removed.\n     * @return {?}\n     */\n    MdInputContainer.prototype._validateInputChild = function () {\n        if (!this._mdInputChild) {\n            throw getMdInputContainerMissingMdInputError();\n        }\n    };\n    return MdInputContainer;\n}());\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar MdTextareaAutosize = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} formControl\n     */\n    function MdTextareaAutosize(_elementRef, formControl) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        if (formControl && formControl.valueChanges) {\n            formControl.valueChanges.subscribe(function () { return _this.resizeToFitContent(); });\n        }\n    }\n    Object.defineProperty(MdTextareaAutosize.prototype, \"minRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._minRows; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._minRows = value;\n            this._setMinHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"maxRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._maxRows; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._maxRows = value;\n            this._setMaxHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_matAutosizeMinRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.minRows; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.minRows = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTextareaAutosize.prototype, \"_matAutosizeMaxRows\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.maxRows; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.maxRows = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._setMinHeight = function () {\n        var /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n            this.minRows * this._cachedLineHeight + \"px\" : null;\n        if (minHeight) {\n            this._setTextareaStyle('minHeight', minHeight);\n        }\n    };\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._setMaxHeight = function () {\n        var /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\n        if (maxHeight) {\n            this._setTextareaStyle('maxHeight', maxHeight);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.ngAfterViewInit = function () {\n        this._cacheTextareaLineHeight();\n        this.resizeToFitContent();\n    };\n    /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._setTextareaStyle = function (property, value) {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        textarea.style[property] = value;\n    };\n    /**\n     * Cache the height of a single-row textarea.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        // Use a clone element because we have to override some styles.\n        var /** @type {?} */ textareaClone = (textarea.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = ''; /** @type {?} */\n        ((textarea.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */\n        ((textarea.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @return {?}\n     */\n    MdTextareaAutosize.prototype.resizeToFitContent = function () {\n        var /** @type {?} */ textarea = (this._elementRef.nativeElement);\n        if (textarea.value === this._previousValue) {\n            return;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        textarea.style.height = 'auto';\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = textarea.scrollHeight + \"px\";\n        this._previousValue = textarea.value;\n    };\n    return MdTextareaAutosize;\n}());\nvar MdInputModule = /*@__PURE__*/ (function () {\n    function MdInputModule() {\n    }\n    return MdInputModule;\n}());\n/**\n * Configuration used when opening a snack-bar.\n */\nvar MdSnackBarConfig = /*@__PURE__*/ (function () {\n    function MdSnackBarConfig() {\n        /**\n         * The politeness level for the MdAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the MdAriaLiveAnnouncer\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Text layout direction for the snack bar.\n         */\n        this.direction = 'ltr';\n    }\n    return MdSnackBarConfig;\n}());\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nvar MdSnackBarRef = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} instance\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    function MdSnackBarRef(instance, containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has closed.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        // Sets the readonly instance of the snack bar content component.\n        this._instance = instance;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit().subscribe(function () { return _this._finishDismiss(); });\n    }\n    Object.defineProperty(MdSnackBarRef.prototype, \"instance\", {\n        /**\n         * The instance of the component making up the content of the snack bar.\n         * @return {?}\n         */\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.dismiss = function () {\n        if (!this._afterClosed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    };\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._dismissAfter = function (duration) {\n        var _this = this;\n        this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, duration);\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._action = function () {\n        if (!this._onAction.closed) {\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._open = function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype._finishDismiss = function () {\n        this._overlayRef.dispose();\n        this._afterClosed.next();\n        this._afterClosed.complete();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterDismissed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.afterOpened = function () {\n        return this.containerInstance._onEnter();\n    };\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MdSnackBarRef.prototype.onAction = function () {\n        return this._onAction.asObservable();\n    };\n    return MdSnackBarRef;\n}());\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nvar SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nvar HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MdSnackBarContainer = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdSnackBarContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdSnackBarContainer(_ngZone, _renderer, _elementRef) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        _this.onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        _this.onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        _this.animationState = 'initial';\n        return _this;\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n        if (this.snackBarConfig.extraClasses) {\n            // Not the most efficient way of adding classes, but the renderer doesn't allow us\n            // to pass in an array or a space-separated list.\n            for (var _i = 0, _a = this.snackBarConfig.extraClasses; _i < _a.length; _i++) {\n                var cssClass = _a[_i];\n                this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n            }\n        }\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.attachTemplatePortal = function () {\n        throw Error('Not yet implemented');\n    };\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.onAnimationEnd = function (event) {\n        if (event.toState === 'void' || event.toState === 'complete') {\n            this._completeExit();\n        }\n        if (event.toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            var /** @type {?} */ onEnter_1 = this.onEnter;\n            this._ngZone.run(function () {\n                onEnter_1.next();\n                onEnter_1.complete();\n            });\n        }\n    };\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.enter = function () {\n        this.animationState = 'visible';\n    };\n    /**\n     * Returns an observable resolving when the enter animation completes.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onEnter = function () {\n        this.animationState = 'visible';\n        return this.onEnter.asObservable();\n    };\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.exit = function () {\n        this.animationState = 'complete';\n        return this._onExit();\n    };\n    /**\n     * Returns an observable that completes after the closing animation is done.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._onExit = function () {\n        return this.onExit.asObservable();\n    };\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype.ngOnDestroy = function () {\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MdSnackBarContainer.prototype._completeExit = function () {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        var /** @type {?} */ onExit = this.onExit;\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(function () {\n            onExit.next();\n            onExit.complete();\n        });\n    };\n    return MdSnackBarContainer;\n}(BasePortalHost));\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /*@__PURE__*/ (function () {\n    function SimpleSnackBar() {\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.dismiss = function () {\n        this.snackBarRef._action();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        get: function () {\n            return !!this.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SimpleSnackBar;\n}());\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {\n        var source = sources_1[_a];\n        if (source != null) {\n            for (var /** @type {?} */ key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MdSnackBar = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _parentSnackBar\n     */\n    function MdSnackBar(_overlay, _live, _parentSnackBar) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._parentSnackBar = _parentSnackBar;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MdSnackBar.prototype, \"_openedSnackBarRef\", {\n        /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.openFromComponent = function (component, config) {\n        var _this = this;\n        config = _applyConfigDefaults(config);\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n        var /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n        });\n        // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n        // animation is complete.\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n            // If no snack bar is in view, enter the new snack bar.\n        }\n        else {\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () {\n                snackBarRef._dismissAfter(/** @type {?} */ ((((config)).duration)));\n            });\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.open = function (message, action, config) {\n        if (action === void 0) {\n            action = '';\n        }\n        var /** @type {?} */ _config = _applyConfigDefaults(config);\n        _config.announcementMessage = message;\n        var /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, _config);\n        simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n        simpleSnackBarRef.instance.message = message;\n        simpleSnackBarRef.instance.action = action;\n        return simpleSnackBarRef;\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MdSnackBar.prototype.dismiss = function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n        var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        // The snackbar animation needs the content to be resolved in order to transform the bar\n        // out of the view initially (so it can slide in). To make the content resolve, we manually\n        // detect changes.\n        containerRef.changeDetectorRef.detectChanges();\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component as the content of the snack bar container.\n     * @template T\n     * @param {?} component\n     * @param {?} container\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {\n        var /** @type {?} */ portal = new ComponentPortal(component);\n        var /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n        return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    MdSnackBar.prototype._createOverlay = function (config) {\n        var /** @type {?} */ state$$1 = new OverlayState();\n        state$$1.direction = config.direction;\n        state$$1.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n        return this._overlay.create(state$$1);\n    };\n    return MdSnackBar;\n}());\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return extendObject(new MdSnackBarConfig(), config);\n}\nvar MdSnackBarModule = /*@__PURE__*/ (function () {\n    function MdSnackBarModule() {\n    }\n    return MdSnackBarModule;\n}());\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nvar _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nvar MdTabLabel = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdTabLabel, _super);\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    function MdTabLabel(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    return MdTabLabel;\n}(_MdTabLabelBaseClass));\n/**\n * \\@docs-private\n */\nvar MdTabBase = /*@__PURE__*/ (function () {\n    function MdTabBase() {\n    }\n    return MdTabBase;\n}());\nvar _MdTabMixinBase = /*@__PURE__*/ mixinDisabled(MdTabBase);\nvar MdTab = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdTab, _super);\n    /**\n     * @param {?} _viewContainerRef\n     */\n    function MdTab(_viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * The plain text label for the tab, used when there is no template label.\n         */\n        _this.textLabel = '';\n        /**\n         * The portal that will be the hosted content of the tab\n         */\n        _this._contentPortal = null;\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        _this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        _this.origin = null;\n        return _this;\n    }\n    Object.defineProperty(MdTab.prototype, \"content\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._contentPortal; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTab.prototype.ngOnInit = function () {\n        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n    };\n    return MdTab;\n}(_MdTabMixinBase));\n/**\n * Used to generate unique ID's for each tab component\n */\nvar nextId$2 = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nvar MdTabChangeEvent = /*@__PURE__*/ (function () {\n    function MdTabChangeEvent() {\n    }\n    return MdTabChangeEvent;\n}());\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nvar MdTabGroup = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     */\n    function MdTabGroup(_renderer) {\n        this._renderer = _renderer;\n        /**\n         * Whether this component has been initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * The tab index that should be selected after the content has been checked.\n         */\n        this._indexToSelect = 0;\n        /**\n         * Snapshot of the height of the tab body wrapper before another tab is activated.\n         */\n        this._tabBodyWrapperHeight = 0;\n        this._dynamicHeight = false;\n        this._disableRipple = false;\n        this._selectedIndex = null;\n        /**\n         * Position of the tab header.\n         */\n        this.headerPosition = 'above';\n        /**\n         * Event emitted when focus has changed within a tab group.\n         */\n        this.focusChange = new EventEmitter();\n        /**\n         * Event emitted when the tab selection has changed.\n         */\n        this.selectChange = new EventEmitter(true);\n        this._groupId = nextId$2++;\n    }\n    Object.defineProperty(MdTabGroup.prototype, \"dynamicHeight\", {\n        /**\n         * Whether the tab group should grow to the size of the active tab.\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"_dynamicHeightDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._dynamicHeight; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._dynamicHeight = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"disableRipple\", {\n        /**\n         * Whether ripples for the tab-group should be disabled or not.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndex\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * The index of the active tab.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._indexToSelect = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabGroup.prototype, \"selectedIndexChange\", {\n        /**\n         * Output to enable support for two-way binding on `[(selectedIndex)]`\n         * @return {?}\n         */\n        get: function () {\n            return map.call(this.selectChange, function (event) { return event.index; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterContentChecked = function () {\n        var _this = this;\n        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n        // ensures that values like NaN can't get through and which would otherwise throw the\n        // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n        var /** @type {?} */ indexToSelect = this._indexToSelect =\n            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n            this.selectChange.emit(this._createChangeEvent(indexToSelect));\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach(function (tab, index) {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - _this._selectedIndex;\n            }\n        });\n        this._selectedIndex = indexToSelect;\n    };\n    /**\n     * Waits one frame for the view to update, then updates the ink bar\n     * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n     * @return {?}\n     */\n    MdTabGroup.prototype.ngAfterViewChecked = function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._focusChanged = function (index) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabGroup.prototype._createChangeEvent = function (index) {\n        var /** @type {?} */ event = new MdTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    };\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabLabelId = function (i) {\n        return \"md-tab-label-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n    MdTabGroup.prototype._getTabContentId = function (i) {\n        return \"md-tab-content-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n    MdTabGroup.prototype._setTabBodyWrapperHeight = function (tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', this._tabBodyWrapperHeight + 'px');\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', tabHeight + 'px');\n        }\n    };\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n    MdTabGroup.prototype._removeTabBodyWrapperHeight = function () {\n        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n        this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n    };\n    return MdTabGroup;\n}());\n/**\n * \\@docs-private\n */\nvar MdTabLabelWrapperBase = /*@__PURE__*/ (function () {\n    function MdTabLabelWrapperBase() {\n    }\n    return MdTabLabelWrapperBase;\n}());\nvar _MdTabLabelWrapperMixinBase = /*@__PURE__*/ mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nvar MdTabLabelWrapper = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdTabLabelWrapper, _super);\n    /**\n     * @param {?} elementRef\n     */\n    function MdTabLabelWrapper(elementRef) {\n        var _this = _super.call(this) || this;\n        _this.elementRef = elementRef;\n        return _this;\n    }\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.focus = function () {\n        this.elementRef.nativeElement.focus();\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetLeft = function () {\n        return this.elementRef.nativeElement.offsetLeft;\n    };\n    /**\n     * @return {?}\n     */\n    MdTabLabelWrapper.prototype.getOffsetWidth = function () {\n        return this.elementRef.nativeElement.offsetWidth;\n    };\n    return MdTabLabelWrapper;\n}(_MdTabLabelWrapperMixinBase));\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nvar MdInkBar = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    function MdInkBar(_renderer, _elementRef, _ngZone) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype.alignToElement = function (element) {\n        var _this = this;\n        this.show();\n        this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n                _this._renderer.setStyle(_this._elementRef.nativeElement, 'left', _this._getLeftPosition(element));\n                _this._renderer.setStyle(_this._elementRef.nativeElement, 'width', _this._getElementWidth(element));\n            });\n        });\n    };\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.show = function () {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n    };\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n    MdInkBar.prototype.hide = function () {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n    };\n    /**\n     * Generates the pixel distance from the left based on the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getLeftPosition = function (element) {\n        return element ? element.offsetLeft + 'px' : '0';\n    };\n    /**\n     * Generates the pixel width from the provided element in string format.\n     * @param {?} element\n     * @return {?}\n     */\n    MdInkBar.prototype._getElementWidth = function (element) {\n        return element ? element.offsetWidth + 'px' : '0';\n    };\n    return MdInkBar;\n}());\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nvar MdTabNav = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _ngZone\n     */\n    function MdTabNav(_dir, _ngZone) {\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * @param {?} element\n     * @return {?}\n     */\n    MdTabNav.prototype.updateActiveLink = function (element) {\n        this._activeLinkChanged = this._activeLinkElement != element;\n        this._activeLinkElement = element;\n    };\n    /**\n     * @return {?}\n     */\n    MdTabNav.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._resizeSubscription = this._ngZone.runOutsideAngular(function () {\n            var /** @type {?} */ dirChange = _this._dir ? _this._dir.change : of(null);\n            var /** @type {?} */ resize = typeof window !== 'undefined' ?\n                auditTime.call(fromEvent(window, 'resize'), 10) :\n                of(null);\n            return takeUntil.call(merge(dirChange, resize), _this._onDestroy)\n                .subscribe(function () { return _this._alignInkBar(); });\n        });\n    };\n    /**\n     * Checks if the active link has been changed and, if so, will update the ink bar.\n     * @return {?}\n     */\n    MdTabNav.prototype.ngAfterContentChecked = function () {\n        if (this._activeLinkChanged) {\n            this._alignInkBar();\n            this._activeLinkChanged = false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdTabNav.prototype.ngOnDestroy = function () {\n        this._onDestroy.next();\n        this._resizeSubscription.unsubscribe();\n    };\n    /**\n     * Aligns the ink bar to the active link.\n     * @return {?}\n     */\n    MdTabNav.prototype._alignInkBar = function () {\n        if (this._activeLinkElement) {\n            this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n        }\n    };\n    return MdTabNav;\n}());\nvar MdTabLinkBase = /*@__PURE__*/ (function () {\n    function MdTabLinkBase() {\n    }\n    return MdTabLinkBase;\n}());\nvar _MdTabLinkMixinBase = /*@__PURE__*/ mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nvar MdTabLink = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdTabLink, _super);\n    /**\n     * @param {?} _mdTabNavBar\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} ruler\n     * @param {?} platform\n     * @param {?} globalOptions\n     */\n    function MdTabLink(_mdTabNavBar, _elementRef, ngZone, ruler, platform, globalOptions) {\n        var _this = _super.call(this) || this;\n        _this._mdTabNavBar = _mdTabNavBar;\n        _this._elementRef = _elementRef;\n        /**\n         * Whether the tab link is active or not.\n         */\n        _this._isActive = false;\n        // Manually create a ripple instance that uses the tab link element as trigger element.\n        // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n        _this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n        return _this;\n    }\n    Object.defineProperty(MdTabLink.prototype, \"active\", {\n        /**\n         * Whether the link is active.\n         * @return {?}\n         */\n        get: function () { return this._isActive; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._isActive = value;\n            if (value) {\n                this._mdTabNavBar.updateActiveLink(this._elementRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabLink.prototype, \"tabIndex\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this.disabled ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTabLink.prototype.ngOnDestroy = function () {\n        // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n        // called automatically since its instance is not created by Angular.\n        this._tabLinkRipple.ngOnDestroy();\n    };\n    return MdTabLink;\n}(_MdTabLinkMixinBase));\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nvar MdTabBody = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     */\n    function MdTabBody(_elementRef, _dir) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /**\n         * Event emitted when the tab begins to animate towards the center as the active tab.\n         */\n        this.onCentering = new EventEmitter();\n        /**\n         * Event emitted when the tab completes its animation towards the center.\n         */\n        this.onCentered = new EventEmitter(true);\n    }\n    Object.defineProperty(MdTabBody.prototype, \"position\", {\n        /**\n         * @param {?} position\n         * @return {?}\n         */\n        set: function (position) {\n            if (position < 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n            }\n            else if (position > 0) {\n                this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n            }\n            else {\n                this._position = 'center';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabBody.prototype, \"origin\", {\n        /**\n         * The origin position from which this tab should appear when it is centered into view.\n         * @param {?} origin\n         * @return {?}\n         */\n        set: function (origin) {\n            if (origin == null) {\n                return;\n            }\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n                this._origin = 'left';\n            }\n            else {\n                this._origin = 'right';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngOnInit = function () {\n        if (this._position == 'center' && this._origin) {\n            this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n        }\n    };\n    /**\n     * After the view has been set, check if the tab content is set to the center and attach the\n     * content if it is not already attached.\n     * @return {?}\n     */\n    MdTabBody.prototype.ngAfterViewChecked = function () {\n        if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n            this._portalHost.attach(this._content);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabStarted = function (e) {\n        if (this._isCenterPosition(e.toState)) {\n            this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MdTabBody.prototype._onTranslateTabComplete = function (e) {\n        // If the end state is that the tab is not centered, then detach the content.\n        if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n            this._portalHost.detach();\n        }\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n            this.onCentered.emit();\n        }\n    };\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    MdTabBody.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n    MdTabBody.prototype._isCenterPosition = function (position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    };\n    return MdTabBody;\n}());\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nvar EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nvar MdTabHeader = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _dir\n     */\n    function MdTabHeader(_elementRef, _ngZone, _renderer, _dir) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._dir = _dir;\n        /**\n         * The tab index that is focused.\n         */\n        this._focusIndex = 0;\n        /**\n         * The distance in pixels that the tab labels should be translated to the left.\n         */\n        this._scrollDistance = 0;\n        /**\n         * Whether the header should scroll to the selected index after the view has been checked.\n         */\n        this._selectedIndexChanged = false;\n        /**\n         * Combines listeners that will re-align the ink bar whenever they're invoked.\n         */\n        this._realignInkBar = null;\n        /**\n         * Whether the controls for pagination should be displayed\n         */\n        this._showPaginationControls = false;\n        /**\n         * Whether the tab list can be scrolled more towards the end of the tab label list.\n         */\n        this._disableScrollAfter = true;\n        /**\n         * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n         */\n        this._disableScrollBefore = true;\n        this._selectedIndex = 0;\n        this._disableRipple = false;\n        /**\n         * Event emitted when the option is selected.\n         */\n        this.selectFocusedIndex = new EventEmitter();\n        /**\n         * Event emitted when a label is focused.\n         */\n        this.indexFocused = new EventEmitter();\n    }\n    Object.defineProperty(MdTabHeader.prototype, \"selectedIndex\", {\n        /**\n         * The index of the active tab.\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selectedIndexChanged = this._selectedIndex != value;\n            this._selectedIndex = value;\n            this._focusIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTabHeader.prototype, \"disableRipple\", {\n        /**\n         * Whether ripples for the tab-header labels should be disabled or not.\n         * @return {?}\n         */\n        get: function () { return this._disableRipple; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentChecked = function () {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._labelWrappers.length) {\n            this._updatePagination();\n            this._tabLabelCount = this._labelWrappers.length;\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdTabHeader.prototype._handleKeydown = function (event) {\n        switch (event.keyCode) {\n            case RIGHT_ARROW:\n                this._focusNextTab();\n                break;\n            case LEFT_ARROW:\n                this._focusPreviousTab();\n                break;\n            case ENTER:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                break;\n        }\n    };\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._realignInkBar = this._ngZone.runOutsideAngular(function () {\n            var /** @type {?} */ dirChange = _this._dir ? _this._dir.change : of(null);\n            var /** @type {?} */ resize = typeof window !== 'undefined' ?\n                auditTime.call(fromEvent(window, 'resize'), 10) :\n                of(null);\n            return startWith.call(merge(dirChange, resize), null).subscribe(function () {\n                _this._updatePagination();\n                _this._alignInkBarToSelectedTab();\n            });\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdTabHeader.prototype.ngOnDestroy = function () {\n        if (this._realignInkBar) {\n            this._realignInkBar.unsubscribe();\n            this._realignInkBar = null;\n        }\n    };\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n    MdTabHeader.prototype._onContentChanges = function () {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n    };\n    /**\n     * Updating the view whether pagination should be enabled or not\n     * @return {?}\n     */\n    MdTabHeader.prototype._updatePagination = function () {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"focusIndex\", {\n        /**\n         * Tracks which element has focus; used for keyboard navigation\n         * @return {?}\n         */\n        get: function () { return this._focusIndex; },\n        /**\n         * When the focus index is set, we must manually send focus to the correct label\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (!this._isValidIndex(value) || this._focusIndex == value) {\n                return;\n            }\n            this._focusIndex = value;\n            this.indexFocused.emit(value);\n            this._setTabFocus(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    MdTabHeader.prototype._isValidIndex = function (index) {\n        if (!this._labelWrappers) {\n            return true;\n        }\n        var /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    };\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._setTabFocus = function (tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._labelWrappers && this._labelWrappers.length) {\n            this._labelWrappers.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            var /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n            var /** @type {?} */ dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    };\n    /**\n     * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n     * Valid offsets are 1 and -1.\n     * @param {?} offset\n     * @return {?}\n     */\n    MdTabHeader.prototype._moveFocus = function (offset) {\n        if (this._labelWrappers) {\n            var /** @type {?} */ tabs = this._labelWrappers.toArray();\n            for (var /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n                if (this._isValidIndex(i)) {\n                    this.focusIndex = i;\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Increment the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusNextTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n    };\n    /**\n     * Decrement the focus index by 1 until a valid tab is found.\n     * @return {?}\n     */\n    MdTabHeader.prototype._focusPreviousTab = function () {\n        this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n    };\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getLayoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n    MdTabHeader.prototype._updateTabScrollPosition = function () {\n        var /** @type {?} */ scrollDistance = this.scrollDistance;\n        var /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        this._renderer.setStyle(this._tabList.nativeElement, 'transform', \"translate3d(\" + translateX + \"px, 0, 0)\");\n    };\n    Object.defineProperty(MdTabHeader.prototype, \"scrollDistance\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._scrollDistance; },\n        /**\n         * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n            // Mark that the scroll distance has changed so that after the view is checked, the CSS\n            // transformation can move the header.\n            this._scrollDistanceChanged = true;\n            this._checkScrollingControls();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} scrollDir\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollHeader = function (scrollDir) {\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n    };\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    MdTabHeader.prototype._scrollToLabel = function (labelIndex) {\n        var /** @type {?} */ selectedLabel = this._labelWrappers\n            ? this._labelWrappers.toArray()[labelIndex]\n            : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        var /** @type {?} */ labelBeforePos, /** @type {?} */ labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n        var /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n        var /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    };\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkPaginationEnabled = function () {\n        this._showPaginationControls =\n            this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n        if (!this._showPaginationControls) {\n            this.scrollDistance = 0;\n        }\n    };\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._checkScrollingControls = function () {\n        // Check if the pagination arrows should be activated.\n        this._disableScrollBefore = this.scrollDistance == 0;\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    };\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    MdTabHeader.prototype._getMaxScrollDistance = function () {\n        var /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return (lengthOfTabList - viewLength) || 0;\n    };\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n    MdTabHeader.prototype._alignInkBarToSelectedTab = function () {\n        var /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n            ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n            : null;\n        this._inkBar.alignToElement(selectedLabelWrapper);\n    };\n    return MdTabHeader;\n}());\nvar MdTabsModule = /*@__PURE__*/ (function () {\n    function MdTabsModule() {\n    }\n    return MdTabsModule;\n}());\nvar MdToolbarRow = /*@__PURE__*/ (function () {\n    function MdToolbarRow() {\n    }\n    return MdToolbarRow;\n}());\n/**\n * \\@docs-private\n */\nvar MdToolbarBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MdToolbarBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MdToolbarBase;\n}());\nvar _MdToolbarMixinBase = /*@__PURE__*/ mixinColor(MdToolbarBase);\nvar MdToolbar = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdToolbar, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     */\n    function MdToolbar(renderer, elementRef) {\n        return _super.call(this, renderer, elementRef) || this;\n    }\n    return MdToolbar;\n}(_MdToolbarMixinBase));\nvar MdToolbarModule = /*@__PURE__*/ (function () {\n    function MdToolbarModule() {\n    }\n    return MdToolbarModule;\n}());\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nvar TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nfunction getMdTooltipInvalidPositionError(position) {\n    return Error(\"Tooltip position \\\"\" + position + \"\\\" is invalid.\");\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\nvar MdTooltip = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _renderer\n     * @param {?} _platform\n     * @param {?} _dir\n     */\n    function MdTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _renderer, _platform, _dir) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._platform = _platform;\n        this._dir = _dir;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = 0;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = 0;\n        // The mouse events shouldn't be bound on iOS devices, because\n        // they can prevent the first tap from firing its click event.\n        if (!_platform.IOS) {\n            _renderer.listen(_elementRef.nativeElement, 'mouseenter', function () { return _this.show(); });\n            _renderer.listen(_elementRef.nativeElement, 'mouseleave', function () { return _this.hide(); });\n        }\n    }\n    Object.defineProperty(MdTooltip.prototype, \"position\", {\n        /**\n         * Allows the user to define the position of the tooltip relative to the parent element\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value !== this._position) {\n                this._position = value;\n                // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n                // the tooltip.\n                if (this._tooltipInstance) {\n                    this._disposeTooltip();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"disabled\", {\n        /**\n         * Disables the display of the tooltip.\n         * @return {?}\n         */\n        get: function () { return this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // If tooltip is disabled, hide immediately.\n            if (this._disabled) {\n                this.hide(0);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_positionDeprecated\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._position = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"message\", {\n        /**\n         * The message to be displayed in the tooltip\n         * @return {?}\n         */\n        get: function () { return this._message; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._message = value;\n            this._setTooltipMessage(this._message);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"tooltipClass\", {\n        /**\n         * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n         * @return {?}\n         */\n        get: function () { return this._tooltipClass; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._tooltipClass = value;\n            if (this._tooltipInstance) {\n                this._setTooltipClass(this._tooltipClass);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_deprecatedMessage\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matMessage\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.message; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.message = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matPosition\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.position; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.position = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matDisabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.disabled; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.disabled = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matHideDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.hideDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.hideDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matShowDelay\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.showDelay; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.showDelay = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdTooltip.prototype, \"_matClass\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.tooltipClass; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.tooltipClass = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    MdTooltip.prototype.ngOnDestroy = function () {\n        if (this._tooltipInstance) {\n            this._disposeTooltip();\n        }\n    };\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.show = function (delay) {\n        if (delay === void 0) {\n            delay = this.showDelay;\n        }\n        if (this.disabled || !this._message || !this._message.trim()) {\n            return;\n        }\n        if (!this._tooltipInstance) {\n            this._createTooltip();\n        }\n        this._setTooltipClass(this._tooltipClass);\n        this._setTooltipMessage(this._message); /** @type {?} */\n        ((this._tooltipInstance)).show(this._position, delay);\n    };\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MdTooltip.prototype.hide = function (delay) {\n        if (delay === void 0) {\n            delay = this.hideDelay;\n        }\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    };\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    MdTooltip.prototype.toggle = function () {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    };\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    MdTooltip.prototype._isTooltipVisible = function () {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    };\n    /**\n     * Create the tooltip to display\n     * @return {?}\n     */\n    MdTooltip.prototype._createTooltip = function () {\n        var _this = this;\n        var /** @type {?} */ overlayRef = this._createOverlay();\n        var /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */\n        ((\n        // Dispose the overlay when finished the shown tooltip.\n        this._tooltipInstance)).afterHidden().subscribe(function () {\n            // Check first if the tooltip has already been removed through this components destroy.\n            if (_this._tooltipInstance) {\n                _this._disposeTooltip();\n            }\n        });\n    };\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    MdTooltip.prototype._createOverlay = function () {\n        var _this = this;\n        var /** @type {?} */ origin = this._getOrigin();\n        var /** @type {?} */ position = this._getOverlayPosition();\n        // Create connected position strategy that listens for scroll events to reposition.\n        // After position changes occur and the overlay is clipped by a parent scrollable then\n        // close the tooltip.\n        var /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n        strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n        strategy.onPositionChange.subscribe(function (change) {\n            if (change.scrollableViewProperties.isOverlayClipped &&\n                _this._tooltipInstance && _this._tooltipInstance.isVisible()) {\n                _this.hide(0);\n            }\n        });\n        var /** @type {?} */ config = new OverlayState();\n        config.direction = this._dir ? this._dir.value : 'ltr';\n        config.positionStrategy = strategy;\n        config.scrollStrategy = this._overlay.scrollStrategies.reposition({\n            scrollThrottle: SCROLL_THROTTLE_MS\n        });\n        this._overlayRef = this._overlay.create(config);\n        return this._overlayRef;\n    };\n    /**\n     * Disposes the current tooltip and the overlay it is attached to\n     * @return {?}\n     */\n    MdTooltip.prototype._disposeTooltip = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._tooltipInstance = null;\n    };\n    /**\n     * Returns the origin position based on the user's position preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOrigin = function () {\n        if (this.position == 'above' || this.position == 'below') {\n            return { originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom' };\n        }\n        var /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isDirectionLtr ||\n            this.position == 'after' && !isDirectionLtr) {\n            return { originX: 'start', originY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isDirectionLtr ||\n            this.position == 'before' && !isDirectionLtr) {\n            return { originX: 'end', originY: 'center' };\n        }\n        throw getMdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Returns the overlay position based on the user's preference\n     * @return {?}\n     */\n    MdTooltip.prototype._getOverlayPosition = function () {\n        if (this.position == 'above') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        }\n        if (this.position == 'below') {\n            return { overlayX: 'center', overlayY: 'top' };\n        }\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        if (this.position == 'left' ||\n            this.position == 'before' && isLtr ||\n            this.position == 'after' && !isLtr) {\n            return { overlayX: 'end', overlayY: 'center' };\n        }\n        if (this.position == 'right' ||\n            this.position == 'after' && isLtr ||\n            this.position == 'before' && !isLtr) {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n        throw getMdTooltipInvalidPositionError(this.position);\n    };\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @param {?} message\n     * @return {?}\n     */\n    MdTooltip.prototype._setTooltipMessage = function (message) {\n        var _this = this;\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = message;\n            this._tooltipInstance._markForCheck();\n            first.call(this._ngZone.onMicrotaskEmpty).subscribe(function () {\n                if (_this._tooltipInstance) {\n                    ((_this._overlayRef)).updatePosition();\n                }\n            });\n        }\n    };\n    /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    MdTooltip.prototype._setTooltipClass = function (tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    };\n    return MdTooltip;\n}());\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nvar TooltipComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     */\n    function TooltipComponent(_dir, _changeDetectorRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * The transform origin used in the animation for showing and hiding the tooltip\n         */\n        this._transformOrigin = 'bottom';\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} position Position of the tooltip.\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.show = function (position, delay) {\n        var _this = this;\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._setTransformOrigin(position);\n        this._showTimeoutId = setTimeout(function () {\n            _this._visibility = 'visible';\n            // If this was set to true immediately, then a body click that triggers show() would\n            // trigger interaction and close the tooltip right after it was displayed.\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._markForCheck();\n            setTimeout(function () { return _this._closeOnInteraction = true; }, 0);\n        }, delay);\n    };\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.hide = function (delay) {\n        var _this = this;\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(function () {\n            _this._visibility = 'hidden';\n            _this._closeOnInteraction = false;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._markForCheck();\n        }, delay);\n    };\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view\n     * @return {?}\n     */\n    TooltipComponent.prototype.afterHidden = function () {\n        return this._onHide.asObservable();\n    };\n    /**\n     * Whether the tooltip is being displayed\n     * @return {?}\n     */\n    TooltipComponent.prototype.isVisible = function () {\n        return this._visibility === 'visible';\n    };\n    /**\n     * Sets the tooltip transform origin according to the tooltip position\n     * @param {?} value\n     * @return {?}\n     */\n    TooltipComponent.prototype._setTransformOrigin = function (value) {\n        var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        switch (value) {\n            case 'before':\n                this._transformOrigin = isLtr ? 'right' : 'left';\n                break;\n            case 'after':\n                this._transformOrigin = isLtr ? 'left' : 'right';\n                break;\n            case 'left':\n                this._transformOrigin = 'right';\n                break;\n            case 'right':\n                this._transformOrigin = 'left';\n                break;\n            case 'above':\n                this._transformOrigin = 'bottom';\n                break;\n            case 'below':\n                this._transformOrigin = 'top';\n                break;\n            default: throw getMdTooltipInvalidPositionError(value);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    TooltipComponent.prototype._afterVisibilityAnimation = function (e) {\n        if (e.toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n    };\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     * @return {?}\n     */\n    TooltipComponent.prototype._handleBodyInteraction = function () {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    };\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    TooltipComponent.prototype._markForCheck = function () {\n        this._changeDetectorRef.markForCheck();\n    };\n    return TooltipComponent;\n}());\nvar MdTooltipModule = /*@__PURE__*/ (function () {\n    function MdTooltipModule() {\n    }\n    return MdTooltipModule;\n}());\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMdMenuMissingError() {\n    throw Error(\"md-menu-trigger: must pass in an md-menu instance.\\n\\n    Example:\\n      <md-menu #menu=\\\"mdMenu\\\"></md-menu>\\n      <button [mdMenuTriggerFor]=\\\"menu\\\"></button>\");\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMdMenuInvalidPositionX() {\n    throw Error(\"x-position value must be either 'before' or after'.\\n      Example: <md-menu x-position=\\\"before\\\" #menu=\\\"mdMenu\\\"></md-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMdMenuInvalidPositionY() {\n    throw Error(\"y-position value must be either 'above' or below'.\\n      Example: <md-menu y-position=\\\"above\\\" #menu=\\\"mdMenu\\\"></md-menu>\");\n}\n/**\n * \\@docs-private\n */\nvar MdMenuItemBase = /*@__PURE__*/ (function () {\n    function MdMenuItemBase() {\n    }\n    return MdMenuItemBase;\n}());\nvar _MdMenuItemMixinBase = /*@__PURE__*/ mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nvar MdMenuItem = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdMenuItem, _super);\n    /**\n     * @param {?} _elementRef\n     */\n    function MdMenuItem(_elementRef) {\n        var _this = _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        return _this;\n    }\n    /**\n     * Focuses the menu item.\n     * @return {?}\n     */\n    MdMenuItem.prototype.focus = function () {\n        this._getHostElement().focus();\n    };\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getTabIndex = function () {\n        return this.disabled ? '-1' : '0';\n    };\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    MdMenuItem.prototype._getHostElement = function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuItem.prototype._checkDisabled = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    return MdMenuItem;\n}(_MdMenuItemMixinBase));\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nvar transformMenu = /*@__PURE__*/ trigger('transformMenu', [\n    /*@__PURE__*/ state('showing', /*@__PURE__*/ style({\n        opacity: 1,\n        transform: \"scale(1)\"\n    })),\n    /*@__PURE__*/ transition('void => *', [\n        /*@__PURE__*/ style({\n            opacity: 0,\n            transform: \"scale(0)\"\n        }),\n        /*@__PURE__*/ animate(\"200ms cubic-bezier(0.25, 0.8, 0.25, 1)\")\n    ]),\n    /*@__PURE__*/ transition('* => void', [\n        /*@__PURE__*/ animate('50ms 100ms linear', /*@__PURE__*/ style({ opacity: 0 }))\n    ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nvar fadeInItems = /*@__PURE__*/ trigger('fadeInItems', [\n    /*@__PURE__*/ state('showing', /*@__PURE__*/ style({ opacity: 1 })),\n    /*@__PURE__*/ transition('void => *', [\n        /*@__PURE__*/ style({ opacity: 0 }),\n        /*@__PURE__*/ animate(\"200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)\")\n    ])\n]);\nvar MdMenu = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     */\n    function MdMenu(_elementRef) {\n        this._elementRef = _elementRef;\n        this._xPosition = 'after';\n        this._yPosition = 'below';\n        /**\n         * Config object to be passed into the menu's ngClass\n         */\n        this._classList = {};\n        /**\n         * Whether the menu should overlap its trigger.\n         */\n        this.overlapTrigger = true;\n        /**\n         * Event emitted when the menu is closed.\n         */\n        this.close = new EventEmitter();\n    }\n    Object.defineProperty(MdMenu.prototype, \"xPosition\", {\n        /**\n         * Position of the menu in the X axis.\n         * @return {?}\n         */\n        get: function () { return this._xPosition; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value !== 'before' && value !== 'after') {\n                throwMdMenuInvalidPositionX();\n            }\n            this._xPosition = value;\n            this.setPositionClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenu.prototype, \"yPosition\", {\n        /**\n         * Position of the menu in the Y axis.\n         * @return {?}\n         */\n        get: function () { return this._yPosition; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value !== 'above' && value !== 'below') {\n                throwMdMenuInvalidPositionY();\n            }\n            this._yPosition = value;\n            this.setPositionClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenu.prototype, \"classList\", {\n        /**\n         * This method takes classes set on the host md-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param {?} classes list of class names\n         * @return {?}\n         */\n        set: function (classes) {\n            if (classes && classes.length) {\n                this._classList = classes.split(' ').reduce(function (obj, className) {\n                    obj[className] = true;\n                    return obj;\n                }, {});\n                this._elementRef.nativeElement.className = '';\n                this.setPositionClasses();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.items).withWrap();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(function () { return _this._emitCloseEvent(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenu.prototype.ngOnDestroy = function () {\n        if (this._tabSubscription) {\n            this._tabSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenu.prototype._handleKeydown = function (event) {\n        switch (event.keyCode) {\n            case ESCAPE:\n                this._emitCloseEvent();\n                return;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    };\n    /**\n     * Focus the first item in the menu. This method is used by the menu trigger\n     * to focus the first item when the menu is opened by the ENTER key.\n     * @return {?}\n     */\n    MdMenu.prototype.focusFirstItem = function () {\n        this._keyManager.setFirstItemActive();\n    };\n    /**\n     * This emits a close event to which the trigger is subscribed. When emitted, the\n     * trigger will close the menu.\n     * @return {?}\n     */\n    MdMenu.prototype._emitCloseEvent = function () {\n        this.close.emit();\n    };\n    /**\n     * It's necessary to set position-based classes to ensure the menu panel animation\n     * folds out from the correct direction.\n     * @param {?=} posX\n     * @param {?=} posY\n     * @return {?}\n     */\n    MdMenu.prototype.setPositionClasses = function (posX, posY) {\n        if (posX === void 0) {\n            posX = this.xPosition;\n        }\n        if (posY === void 0) {\n            posY = this.yPosition;\n        }\n        this._classList['mat-menu-before'] = posX === 'before';\n        this._classList['mat-menu-after'] = posX === 'after';\n        this._classList['mat-menu-above'] = posY === 'above';\n        this._classList['mat-menu-below'] = posY === 'below';\n    };\n    return MdMenu;\n}());\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nvar MdMenuTrigger = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} _dir\n     */\n    function MdMenuTrigger(_overlay, _element, _viewContainerRef, _dir) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._openedByMouse = false;\n        /**\n         * Event emitted when the associated menu is opened.\n         */\n        this.onMenuOpen = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         */\n        this.onMenuClose = new EventEmitter();\n    }\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMdMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_deprecatedMatMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMenuTrigger.prototype, \"_matMenuTriggerFor\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.menu; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.menu = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._checkMenu();\n        this.menu.close.subscribe(function () { return _this.closeMenu(); });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.ngOnDestroy = function () { this.destroyMenu(); };\n    Object.defineProperty(MdMenuTrigger.prototype, \"menuOpen\", {\n        /**\n         * Whether the menu is open.\n         * @return {?}\n         */\n        get: function () { return this._menuOpen; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.toggleMenu = function () {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    };\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.openMenu = function () {\n        if (!this._menuOpen) {\n            this._createOverlay().attach(this._portal);\n            this._subscribeToBackdrop();\n            this._initMenu();\n        }\n    };\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.closeMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this._backdropSubscription.unsubscribe();\n            this._resetMenu();\n        }\n    };\n    /**\n     * Removes the menu from the DOM.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.destroyMenu = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n            this._cleanUpSubscriptions();\n        }\n    };\n    /**\n     * Focuses the menu trigger.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype.focus = function () {\n        this._element.nativeElement.focus();\n    };\n    Object.defineProperty(MdMenuTrigger.prototype, \"dir\", {\n        /**\n         * The text direction of the containing app.\n         * @return {?}\n         */\n        get: function () {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method ensures that the menu closes when the overlay backdrop is clicked.\n     * We do not use first() here because doing so would not catch clicks from within\n     * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n     * explicitly when the menu is closed or destroyed.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToBackdrop = function () {\n        var _this = this;\n        if (this._overlayRef) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {\n                _this.menu._emitCloseEvent();\n            });\n        }\n    };\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._initMenu = function () {\n        this._setIsMenuOpen(true);\n        // Should only set focus if opened via the keyboard, so keyboard users can\n        // can easily navigate menu items. According to spec, mouse users should not\n        // see the focus style.\n        if (!this._openedByMouse) {\n            this.menu.focusFirstItem();\n        }\n    };\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._resetMenu = function () {\n        this._setIsMenuOpen(false);\n        // Focus only needs to be reset to the host element if the menu was opened\n        // by the keyboard and manually shifted to the first menu item.\n        if (!this._openedByMouse) {\n            this.focus();\n        }\n        this._openedByMouse = false;\n    };\n    /**\n     * @param {?} isOpen\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n    };\n    /**\n     *  This method checks that a valid instance of MdMenu has been passed into\n     *  mdMenuTriggerFor. If not, an exception is thrown.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._checkMenu = function () {\n        if (!this.menu) {\n            throwMdMenuMissingError();\n        }\n    };\n    /**\n     *  This method creates the overlay from the provided menu's template and saves its\n     *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._createOverlay = function () {\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n            var /** @type {?} */ config = this._getOverlayConfig();\n            this._subscribeToPositions(/** @type {?} */ (config.positionStrategy));\n            this._overlayRef = this._overlay.create(config);\n        }\n        return this._overlayRef;\n    };\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @return {?} OverlayState\n     */\n    MdMenuTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getPosition()\n            .withDirection(this.dir);\n        overlayState.hasBackdrop = true;\n        overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n        overlayState.direction = this.dir;\n        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n        return overlayState;\n    };\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @param {?} position\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._subscribeToPositions = function (position) {\n        var _this = this;\n        this._positionSubscription = position.onPositionChange.subscribe(function (change) {\n            var /** @type {?} */ posX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n            var /** @type {?} */ posY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n            if (!_this.menu.overlapTrigger) {\n                posY = posY === 'below' ? 'above' : 'below';\n            }\n            _this.menu.setPositionClasses(posX, posY);\n        });\n    };\n    /**\n     * This method builds the position strategy for the overlay, so the menu is properly connected\n     * to the trigger.\n     * @return {?} ConnectedPositionStrategy\n     */\n    MdMenuTrigger.prototype._getPosition = function () {\n        var _a = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], posX = _a[0], fallbackX = _a[1];\n        var _b = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0], fallbackOverlayY = _b[1];\n        var /** @type {?} */ originY = overlayY;\n        var /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n        if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n        }\n        return this._overlay.position()\n            .connectedTo(this._element, { originX: posX, originY: originY }, { overlayX: posX, overlayY: overlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: originY }, { overlayX: fallbackX, overlayY: overlayY })\n            .withFallbackPosition({ originX: posX, originY: fallbackOriginY }, { overlayX: posX, overlayY: fallbackOverlayY })\n            .withFallbackPosition({ originX: fallbackX, originY: fallbackOriginY }, { overlayX: fallbackX, overlayY: fallbackOverlayY });\n    };\n    /**\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._cleanUpSubscriptions = function () {\n        if (this._backdropSubscription) {\n            this._backdropSubscription.unsubscribe();\n        }\n        if (this._positionSubscription) {\n            this._positionSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdMenuTrigger.prototype._handleMousedown = function (event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            this._openedByMouse = true;\n        }\n    };\n    return MdMenuTrigger;\n}());\nvar MdMenuModule = /*@__PURE__*/ (function () {\n    function MdMenuModule() {\n    }\n    return MdMenuModule;\n}());\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nvar DialogInjector = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    function DialogInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    DialogInjector.prototype.get = function (token, notFoundValue) {\n        var /** @type {?} */ value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return DialogInjector;\n}());\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nvar MdDialogConfig = /*@__PURE__*/ (function () {\n    function MdDialogConfig() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop,\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking outside to close a modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * Layout direction for the dialog's content.\n         */\n        this.direction = 'ltr';\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n    return MdDialogConfig;\n}());\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nvar MdDialogRef = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     */\n    function MdDialogRef(_overlayRef, _containerInstance) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        filter.call(_containerInstance._onAnimationStateChange, function (event) { return event.toState === 'exit'; })\n            .subscribe(function () { return _this._overlayRef.dispose(); }, undefined, function () {\n            _this._afterClosed.next(_this._result);\n            _this._afterClosed.complete();\n            _this.componentInstance = null;\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    MdDialogRef.prototype.close = function (dialogResult) {\n        this._result = dialogResult;\n        this._containerInstance._state = 'exit';\n        this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    MdDialogRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updatePosition = function (position) {\n        var /** @type {?} */ strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    MdDialogRef.prototype.updateSize = function (width, height) {\n        if (width === void 0) {\n            width = 'auto';\n        }\n        if (height === void 0) {\n            height = 'auto';\n        }\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    MdDialogRef.prototype._getPositionStrategy = function () {\n        return (this._overlayRef.getState().positionStrategy);\n    };\n    return MdDialogRef;\n}());\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMdDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nvar MdDialogContainer = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdDialogContainer, _super);\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    function MdDialogContainer(_ngZone, _elementRef, _focusTrapFactory, _document) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        _this._state = 'enter';\n        /**\n         * Emits the current animation state whenever it changes.\n         */\n        _this._onAnimationStateChange = new EventEmitter();\n        /**\n         * ID of the element that should be considered as the dialog's label.\n         */\n        _this._ariaLabelledBy = null;\n        _this._document = _document;\n        return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throwMdDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdDialogContainer.prototype.attachTemplatePortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throwMdDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalHost.attachTemplatePortal(portal);\n    };\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    MdDialogContainer.prototype._trapFocus = function () {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        this._focusTrap.focusInitialElementWhenReady();\n    };\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @return {?}\n     */\n    MdDialogContainer.prototype._restoreFocus = function () {\n        var /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (toFocus && 'focus' in toFocus) {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n    MdDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (this._document.activeElement);\n        }\n    };\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialogContainer.prototype._onAnimationDone = function (event) {\n        this._onAnimationStateChange.emit(event);\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n            this._onAnimationStateChange.complete();\n        }\n    };\n    return MdDialogContainer;\n}(BasePortalHost));\nvar MD_DIALOG_DATA = /*@__PURE__*/ new InjectionToken('MdDialogData');\n/**\n * Service to open Material Design modal dialogs.\n */\nvar MdDialog = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _parentDialog\n     */\n    function MdDialog(_overlay, _injector, _location, _parentDialog) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._location = _location;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenAtThisLevel = new Subject();\n        this._boundKeydown = this._handleKeydown.bind(this);\n        /**\n         * Gets an observable that is notified when a dialog has been opened.\n         */\n        this.afterOpen = this._afterOpen.asObservable();\n        /**\n         * Gets an observable that is notified when all open dialog have finished closing.\n         */\n        this.afterAllClosed = this._afterAllClosed.asObservable();\n        // Close all of the dialogs when the user goes forwards/backwards in history or when the\n        // location hash changes. Note that this usually doesn't include clicking on links (unless\n        // the user is using the `HashLocationStrategy`).\n        if (!_parentDialog && _location) {\n            _location.subscribe(function () { return _this.closeAll(); });\n        }\n    }\n    Object.defineProperty(MdDialog.prototype, \"_openDialogs\", {\n        /**\n         * Keeps track of the currently-open dialogs.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterOpen\", {\n        /**\n         * Subject for notifying the user that a dialog has opened.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDialog.prototype, \"_afterAllClosed\", {\n        /**\n         * Subject for notifying the user that all open dialogs have finished closing.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ?\n                this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    MdDialog.prototype.open = function (componentOrTemplateRef, config) {\n        var _this = this;\n        config = _applyConfigDefaults$1(config);\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n        var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        if (!this._openDialogs.length) {\n            document.addEventListener('keydown', this._boundKeydown);\n        }\n        this._openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n        this._afterOpen.next(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    MdDialog.prototype.closeAll = function () {\n        var /** @type {?} */ i = this._openDialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            this._openDialogs[i].close();\n        }\n    };\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    MdDialog.prototype._createOverlay = function (config) {\n        var /** @type {?} */ overlayState = this._getOverlayState(config);\n        return this._overlay.create(overlayState);\n    };\n    /**\n     * Creates an overlay state from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    MdDialog.prototype._getOverlayState = function (dialogConfig) {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.panelClass = dialogConfig.panelClass;\n        overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n        overlayState.scrollStrategy = this._overlay.scrollStrategies.block();\n        overlayState.direction = dialogConfig.direction;\n        if (dialogConfig.backdropClass) {\n            overlayState.backdropClass = dialogConfig.backdropClass;\n        }\n        overlayState.positionStrategy = this._overlay.position().global();\n        return overlayState;\n    };\n    /**\n     * Attaches an MdDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    MdDialog.prototype._attachDialogContainer = function (overlay, config) {\n        var /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n        var /** @type {?} */ containerRef = overlay.attach(containerPortal);\n        containerRef.instance._config = config;\n        return containerRef.instance;\n    };\n    /**\n     * Attaches the user-provided component to the already-created MdDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n     */\n    MdDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var /** @type {?} */ dialogRef = new MdDialogRef(overlayRef, dialogContainer);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(function () {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            });\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null))));\n        }\n        else {\n            var /** @type {?} */ injector = this._createInjector(config, dialogRef, dialogContainer);\n            var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    };\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    MdDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var /** @type {?} */ injectionTokens = new WeakMap();\n        injectionTokens.set(MdDialogRef, dialogRef);\n        injectionTokens.set(MdDialogContainer, dialogContainer);\n        injectionTokens.set(MD_DIALOG_DATA, config.data);\n        return new DialogInjector(userInjector || this._injector, injectionTokens);\n    };\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    MdDialog.prototype._removeOpenDialog = function (dialogRef) {\n        var /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this._openDialogs.splice(index, 1);\n            // no open dialogs are left, call next on afterAllClosed Subject\n            if (!this._openDialogs.length) {\n                this._afterAllClosed.next();\n                document.removeEventListener('keydown', this._boundKeydown);\n            }\n        }\n    };\n    /**\n     * Handles global key presses while there are open dialogs. Closes the\n     * top dialog when the user presses escape.\n     * @param {?} event\n     * @return {?}\n     */\n    MdDialog.prototype._handleKeydown = function (event) {\n        var /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n        var /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n        if (event.keyCode === ESCAPE && canClose) {\n            topDialog.close();\n        }\n    };\n    return MdDialog;\n}());\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults$1(config) {\n    return extendObject(new MdDialogConfig(), config);\n}\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nvar MdDialogClose = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} dialogRef\n     */\n    function MdDialogClose(dialogRef) {\n        this.dialogRef = dialogRef;\n        /**\n         * Screenreader label for the button.\n         */\n        this.ariaLabel = 'Close dialog';\n    }\n    Object.defineProperty(MdDialogClose.prototype, \"_matDialogClose\", {\n        /**\n         * Dialog close input for compatibility mode.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.dialogResult = value; },\n        enumerable: true,\n        configurable: true\n    });\n    return MdDialogClose;\n}());\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nvar MdDialogTitle = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _container\n     */\n    function MdDialogTitle(_container) {\n        this._container = _container;\n        this.id = \"md-dialog-title-\" + dialogElementUid++;\n    }\n    /**\n     * @return {?}\n     */\n    MdDialogTitle.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this._container && !this._container._ariaLabelledBy) {\n            Promise.resolve().then(function () { return _this._container._ariaLabelledBy = _this.id; });\n        }\n    };\n    return MdDialogTitle;\n}());\n/**\n * Scrollable content container of a dialog.\n */\nvar MdDialogContent = /*@__PURE__*/ (function () {\n    function MdDialogContent() {\n    }\n    return MdDialogContent;\n}());\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nvar MdDialogActions = /*@__PURE__*/ (function () {\n    function MdDialogActions() {\n    }\n    return MdDialogActions;\n}());\nvar MdDialogModule = /*@__PURE__*/ (function () {\n    function MdDialogModule() {\n    }\n    return MdDialogModule;\n}());\nvar ActiveDescendantKeyManager = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ActiveDescendantKeyManager, _super);\n    function ActiveDescendantKeyManager() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     * @param {?} index\n     * @return {?}\n     */\n    ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {\n        var _this = this;\n        Promise.resolve().then(function () {\n            if (_this.activeItem) {\n                _this.activeItem.setInactiveStyles();\n            }\n            _super.prototype.setActiveItem.call(_this, index);\n            if (_this.activeItem) {\n                _this.activeItem.setActiveStyles();\n            }\n        });\n    };\n    return ActiveDescendantKeyManager;\n}(ListKeyManager));\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nvar _uniqueAutocompleteIdCounter = 0;\nvar MdAutocomplete = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _changeDetectorRef\n     */\n    function MdAutocomplete(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the autocomplete panel displays above or below its trigger.\n         */\n        this.positionY = 'below';\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = \"md-autocomplete-\" + _uniqueAutocompleteIdCounter++;\n    }\n    /**\n     * @return {?}\n     */\n    MdAutocomplete.prototype.ngAfterContentInit = function () {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    };\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setScrollTop = function (scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    };\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    MdAutocomplete.prototype._getScrollTop = function () {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    };\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    MdAutocomplete.prototype._setVisibility = function () {\n        var _this = this;\n        Promise.resolve().then(function () {\n            _this.showPanel = !!_this.options.length;\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /**\n     * Sets a class on the panel based on its position (used to set y-offset).\n     * @return {?}\n     */\n    MdAutocomplete.prototype._getClassList = function () {\n        return {\n            'mat-autocomplete-panel-below': this.positionY === 'below',\n            'mat-autocomplete-panel-above': this.positionY === 'above',\n            'mat-autocomplete-visible': this.showPanel,\n            'mat-autocomplete-hidden': !this.showPanel\n        };\n    };\n    return MdAutocomplete;\n}());\n/**\n * The height of each autocomplete option.\n */\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nvar MD_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdAutocompleteTrigger; }),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nfunction getMdAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n        'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nvar MdAutocompleteTrigger = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _inputContainer\n     * @param {?} _document\n     */\n    function MdAutocompleteTrigger(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, _dir, _inputContainer, _document) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._inputContainer = _inputContainer;\n        this._document = _document;\n        this._panelOpen = false;\n        /**\n         * Whether or not the placeholder state is being overridden.\n         */\n        this._manuallyFloatingPlaceholder = false;\n        /**\n         * View -> model callback called when value changes\n         */\n        this._onChange = function () { };\n        /**\n         * View -> model callback called when autocomplete has been touched\n         */\n        this._onTouched = function () { };\n    }\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"_matAutocomplete\", {\n        /**\n         * Property with mat- prefix for no-conflict mode.\n         * @return {?}\n         */\n        get: function () {\n            return this.autocomplete;\n        },\n        /**\n         * @param {?} autocomplete\n         * @return {?}\n         */\n        set: function (autocomplete) {\n            this.autocomplete = autocomplete;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.ngOnDestroy = function () {\n        if (this._panelPositionSubscription) {\n            this._panelPositionSubscription.unsubscribe();\n        }\n        this._destroyPanel();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelOpen\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._panelOpen && this.autocomplete.showPanel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.openPanel = function () {\n        if (!this.autocomplete) {\n            throw getMdAutocompleteMissingPanelError();\n        }\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            /** Update the panel width, in case the host width has changed */\n            this._overlayRef.getState().width = this._getHostWidth();\n            this._overlayRef.updateSize();\n        }\n        if (this._overlayRef && !this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        this.autocomplete._setVisibility();\n        this._floatPlaceholder();\n        this._panelOpen = true;\n    };\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.closePanel = function () {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._panelOpen = false;\n        this._resetPlaceholder();\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the placeholder is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n    };\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"panelClosingActions\", {\n        /**\n         * A stream of actions that should close the autocomplete panel, including\n         * when an option is selected, on blur, and when TAB is pressed.\n         * @return {?}\n         */\n        get: function () {\n            return merge(this.optionSelections, this.autocomplete._keyManager.tabOut, this._outsideClickStream);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"optionSelections\", {\n        /**\n         * Stream of autocomplete option selections.\n         * @return {?}\n         */\n        get: function () {\n            return merge.apply(void 0, this.autocomplete.options.map(function (option) { return option.onSelectionChange; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"activeOption\", {\n        /**\n         * The currently active option, coerced to MdOption type.\n         * @return {?}\n         */\n        get: function () {\n            if (this.autocomplete && this.autocomplete._keyManager) {\n                return (this.autocomplete._keyManager.activeItem);\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdAutocompleteTrigger.prototype, \"_outsideClickStream\", {\n        /**\n         * Stream of clicks outside of the autocomplete panel.\n         * @return {?}\n         */\n        get: function () {\n            var _this = this;\n            if (!this._document) {\n                return of(null);\n            }\n            return RxChain.from(merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))).call(filter, function (event) {\n                var /** @type {?} */ clickTarget = (event.target);\n                var /** @type {?} */ inputContainer = _this._inputContainer ?\n                    _this._inputContainer._elementRef.nativeElement : null;\n                return _this._panelOpen &&\n                    clickTarget !== _this._element.nativeElement &&\n                    (!inputContainer || !inputContainer.contains(clickTarget)) &&\n                    (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));\n            }).result();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.writeValue = function (value) {\n        var _this = this;\n        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the autocomplete is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleKeydown = function (event) {\n        var _this = this;\n        if (event.keyCode === ESCAPE && this.panelOpen) {\n            this.closePanel();\n        }\n        else if (this.activeOption && event.keyCode === ENTER) {\n            this.activeOption._selectViaInteraction();\n            event.preventDefault();\n        }\n        else {\n            var /** @type {?} */ prevActiveItem_1 = this.autocomplete._keyManager.activeItem;\n            var /** @type {?} */ isArrowKey_1 = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n            this.autocomplete._keyManager.onKeydown(event);\n            if (isArrowKey_1) {\n                this.openPanel();\n            }\n            Promise.resolve().then(function () {\n                if (isArrowKey_1 || _this.autocomplete._keyManager.activeItem !== prevActiveItem_1) {\n                    _this._scrollToOption();\n                }\n            });\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._handleInput = function (event) {\n        // We need to ensure that the input is focused, because IE will fire the `input`\n        // event on focus/blur/load if the input has a placeholder. See:\n        // https://connect.microsoft.com/IE/feedback/details/885747/\n        if (document.activeElement === event.target) {\n            this._onChange(((event.target)).value);\n            this.openPanel();\n        }\n    };\n    /**\n     * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the placeholder until the panel can be closed.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._floatPlaceholder = function () {\n        if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n            this._inputContainer.floatPlaceholder = 'always';\n            this._manuallyFloatingPlaceholder = true;\n        }\n    };\n    /**\n     * If the placeholder has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPlaceholder = function () {\n        if (this._manuallyFloatingPlaceholder) {\n            this._inputContainer.floatPlaceholder = 'auto';\n            this._manuallyFloatingPlaceholder = false;\n        }\n    };\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._scrollToOption = function () {\n        var /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n            this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n        var /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n        if (optionOffset < panelTop) {\n            // Scroll up to reveal selected option scrolled above the panel top\n            this.autocomplete._setScrollTop(optionOffset);\n        }\n        else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n            // Scroll down to reveal selected option scrolled below the panel bottom\n            var /** @type {?} */ newScrollTop = Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollTop);\n        }\n    };\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToClosingActions = function () {\n        var _this = this;\n        // When the zone is stable initially, and when the option list changes...\n        return RxChain.from(merge(first.call(this._zone.onStable), this.autocomplete.options.changes))\n            .call(switchMap, function () {\n            _this._resetPanel();\n            return _this.panelClosingActions;\n        })\n            .call(first)\n            .subscribe(function (event) { return _this._setValueAndClose(event); });\n    };\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._destroyPanel = function () {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setTriggerValue = function (value) {\n        var /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._element.nativeElement.value = toDisplay != null ? toDisplay : '';\n    };\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._setValueAndClose = function (event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n        }\n        this.closePanel();\n    };\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._clearPreviousSelectedOption = function (skip) {\n        this.autocomplete.options.forEach(function (option) {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._createOverlay = function () {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayConfig = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._getOverlayPosition();\n        overlayState.width = this._getHostWidth();\n        overlayState.direction = this._dir ? this._dir.value : 'ltr';\n        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n        return overlayState;\n    };\n    /**\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getOverlayPosition = function () {\n        this._positionStrategy = this._overlay.position().connectedTo(this._element, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });\n        this._subscribeToPositionChanges(this._positionStrategy);\n        return this._positionStrategy;\n    };\n    /**\n     * This method subscribes to position changes in the autocomplete panel, so the panel's\n     * y-offset can be adjusted to match the new position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._subscribeToPositionChanges = function (strategy) {\n        var _this = this;\n        this._panelPositionSubscription = strategy.onPositionChange.subscribe(function (change) {\n            _this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n        });\n    };\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._getHostWidth = function () {\n        return this._element.nativeElement.getBoundingClientRect().width;\n    };\n    /**\n     * Reset active item to -1 so arrow events will activate the correct options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetActiveItem = function () {\n        this.autocomplete._keyManager.setActiveItem(-1);\n    };\n    /**\n     * Resets the active item and re-calculates alignment of the panel in case its size\n     * has changed due to fewer or greater number of options.\n     * @return {?}\n     */\n    MdAutocompleteTrigger.prototype._resetPanel = function () {\n        this._resetActiveItem();\n        this._positionStrategy.recalculateLastPosition();\n        this.autocomplete._setVisibility();\n    };\n    return MdAutocompleteTrigger;\n}());\nvar MdAutocompleteModule = /*@__PURE__*/ (function () {\n    function MdAutocompleteModule() {\n    }\n    return MdAutocompleteModule;\n}());\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nvar MdCalendarCell = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} value\n     * @param {?} displayValue\n     * @param {?} ariaLabel\n     * @param {?} enabled\n     */\n    function MdCalendarCell(value, displayValue, ariaLabel, enabled) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n    }\n    return MdCalendarCell;\n}());\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nvar MdCalendarBody = /*@__PURE__*/ (function () {\n    function MdCalendarBody() {\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * Whether to allow selection of disabled cells.\n         */\n        this.allowDisabledSelection = false;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    MdCalendarBody.prototype._cellClicked = function (cell) {\n        if (!this.allowDisabledSelection && !cell.enabled) {\n            return;\n        }\n        this.selectedValueChange.emit(cell.value);\n    };\n    Object.defineProperty(MdCalendarBody.prototype, \"_firstRowOffset\", {\n        /**\n         * The number of blank cells to put at the beginning for the first row.\n         * @return {?}\n         */\n        get: function () {\n            return this.rows && this.rows.length && this.rows[0].length ?\n                this.numCols - this.rows[0].length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    MdCalendarBody.prototype._isActiveCell = function (rowIndex, colIndex) {\n        var /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    };\n    return MdCalendarBody;\n}());\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(\"MdDatepicker: No provider found for \" + provider + \". You must import one of the following \" +\n        \"modules at your application root: MdNativeDateModule, or provide a custom implementation.\");\n}\nvar DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nvar MdMonthView = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     */\n    function MdMonthView(_dateAdapter, _dateFormats) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MD_DATE_FORMATS');\n        }\n        var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        var weekdays = longWeekdays.map(function (long, i) {\n            return { long: long, narrow: narrowWeekdays[i] };\n        });\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MdMonthView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         * @return {?}\n         */\n        get: function () { return this._activeDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ oldActiveDate = this._activeDate;\n            this._activeDate = value || this._dateAdapter.today();\n            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdMonthView.prototype, \"selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = value;\n            this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdMonthView.prototype.ngAfterContentInit = function () {\n        this._init();\n    };\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    MdMonthView.prototype._dateSelected = function (date) {\n        if (this._selectedDate == date) {\n            return;\n        }\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), date));\n    };\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MdMonthView.prototype._init = function () {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n    };\n    /**\n     * Creates MdCalendarCells for the dates in this month.\n     * @return {?}\n     */\n    MdMonthView.prototype._createWeekCells = function () {\n        var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        var /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (var /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            var /** @type {?} */ date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            var /** @type {?} */ enabled = !this.dateFilter ||\n                this.dateFilter(date);\n            var /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            this._weeks[this._weeks.length - 1]\n                .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n        }\n    };\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @param {?} date\n     * @return {?}\n     */\n    MdMonthView.prototype._getDateInCurrentMonth = function (date) {\n        return this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    };\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    MdMonthView.prototype._hasSameMonthAndYear = function (d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    };\n    return MdMonthView;\n}());\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nvar MdYearView = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     */\n    function MdYearView(_dateAdapter, _dateFormats) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MD_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MdYearView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        get: function () { return this._activeDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ oldActiveDate = this._activeDate;\n            this._activeDate = value || this._dateAdapter.today();\n            if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdYearView.prototype, \"selected\", {\n        /**\n         * The currently selected date.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._selected = value;\n            this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdYearView.prototype.ngAfterContentInit = function () {\n        this._init();\n    };\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    MdYearView.prototype._monthSelected = function (month) {\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, this._dateAdapter.getDate(this.activeDate)));\n    };\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MdYearView.prototype._init = function () {\n        var _this = this;\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        var /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(function (row) { return row.map(function (month) { return _this._createCellForMonth(month, monthNames[month]); }); });\n    };\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @param {?} date\n     * @return {?}\n     */\n    MdYearView.prototype._getMonthInCurrentYear = function (date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    };\n    /**\n     * Creates an MdCalendarCell for the given month.\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    MdYearView.prototype._createCellForMonth = function (month, monthName) {\n        var /** @type {?} */ ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MdCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n    };\n    /**\n     * Whether the given month is enabled.\n     * @param {?} month\n     * @return {?}\n     */\n    MdYearView.prototype._isMonthEnabled = function (month) {\n        if (!this.dateFilter) {\n            return true;\n        }\n        var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (var /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return MdYearView;\n}());\n/**\n * Datepicker data that requires internationalization.\n */\nvar MdDatepickerIntl = /*@__PURE__*/ (function () {\n    function MdDatepickerIntl() {\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Change to month view';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToYearViewLabel = 'Change to year view';\n    }\n    return MdDatepickerIntl;\n}());\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nvar MdCalendar = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _intl\n     * @param {?} _ngZone\n     * @param {?} _isCompatibilityMode\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     */\n    function MdCalendar(_elementRef, _intl, _ngZone, _isCompatibilityMode, _dateAdapter, _dateFormats) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._intl = _intl;\n        this._ngZone = _ngZone;\n        this._isCompatibilityMode = _isCompatibilityMode;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Date filter for the month and year views.\n         */\n        this._dateFilterForViews = function (date) {\n            return !!date &&\n                (!_this.dateFilter || _this.dateFilter(date)) &&\n                (!_this.minDate || _this._dateAdapter.compareDate(date, _this.minDate) >= 0) &&\n                (!_this.maxDate || _this._dateAdapter.compareDate(date, _this.maxDate) <= 0);\n        };\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MD_DATE_FORMATS');\n        }\n    }\n    Object.defineProperty(MdCalendar.prototype, \"_activeDate\", {\n        /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         * @return {?}\n         */\n        get: function () { return this._clampedActiveDate; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCalendar.prototype, \"_periodButtonText\", {\n        /**\n         * The label for the current calendar view.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ?\n                this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase() :\n                this._dateAdapter.getYearName(this._activeDate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCalendar.prototype, \"_periodButtonLabel\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCalendar.prototype, \"_prevButtonLabel\", {\n        /**\n         * The label for the the previous button.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdCalendar.prototype, \"_nextButtonLabel\", {\n        /**\n         * The label for the the next button.\n         * @return {?}\n         */\n        get: function () {\n            return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdCalendar.prototype.ngAfterContentInit = function () {\n        this._activeDate = this.startAt || this._dateAdapter.today();\n        this._focusActiveCell();\n        this._monthView = this.startView != 'year';\n    };\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    MdCalendar.prototype._dateSelected = function (date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    };\n    /**\n     * Handles month selection in the year view.\n     * @param {?} month\n     * @return {?}\n     */\n    MdCalendar.prototype._monthSelected = function (month) {\n        this._activeDate = month;\n        this._monthView = true;\n    };\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    MdCalendar.prototype._currentPeriodClicked = function () {\n        this._monthView = !this._monthView;\n    };\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    MdCalendar.prototype._previousClicked = function () {\n        this._activeDate = this._monthView ?\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this._activeDate, -1);\n    };\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    MdCalendar.prototype._nextClicked = function () {\n        this._activeDate = this._monthView ?\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this._activeDate, 1);\n    };\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    MdCalendar.prototype._previousEnabled = function () {\n        if (!this.minDate) {\n            return true;\n        }\n        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n    };\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    MdCalendar.prototype._nextEnabled = function () {\n        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n    };\n    /**\n     * Handles keydown events on the calendar body.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCalendar.prototype._handleCalendarBodyKeydown = function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        if (this._monthView) {\n            this._handleCalendarBodyKeydownInMonthView(event);\n        }\n        else {\n            this._handleCalendarBodyKeydownInYearView(event);\n        }\n    };\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MdCalendar.prototype._focusActiveCell = function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            return first.call(_this._ngZone.onStable).subscribe(function () {\n                _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n            });\n        });\n    };\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    MdCalendar.prototype._isSameView = function (date1, date2) {\n        return this._monthView ?\n            this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n            this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    };\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCalendar.prototype._handleCalendarBodyKeydownInMonthView = function (event) {\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n                break;\n            case RIGHT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n                break;\n            case UP_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this._activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this._activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n                if (this._dateFilterForViews(this._activeDate)) {\n                    this._dateSelected(this._activeDate);\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MdCalendar.prototype._handleCalendarBodyKeydownInYearView = function (event) {\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case RIGHT_ARROW:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case UP_ARROW:\n                this._activeDate = this._prevMonthInSameCol(this._activeDate);\n                break;\n            case DOWN_ARROW:\n                this._activeDate = this._nextMonthInSameCol(this._activeDate);\n                break;\n            case HOME:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this._activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this._activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n                this._monthSelected(this._activeDate);\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * Determine the date for the month that comes before the given month in the same column in the\n     * calendar table.\n     * @param {?} date\n     * @return {?}\n     */\n    MdCalendar.prototype._prevMonthInSameCol = function (date) {\n        // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n        // of each year.\n        var /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n            (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n        return this._dateAdapter.addCalendarMonths(date, increment);\n    };\n    /**\n     * Determine the date for the month that comes after the given month in the same column in the\n     * calendar table.\n     * @param {?} date\n     * @return {?}\n     */\n    MdCalendar.prototype._nextMonthInSameCol = function (date) {\n        // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n        // of each year.\n        var /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n            (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n        return this._dateAdapter.addCalendarMonths(date, increment);\n    };\n    return MdCalendar;\n}());\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nvar datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nvar MdDatepickerContent = /*@__PURE__*/ (function () {\n    function MdDatepickerContent() {\n    }\n    /**\n     * @return {?}\n     */\n    MdDatepickerContent.prototype.ngAfterContentInit = function () {\n        this._calendar._focusActiveCell();\n    };\n    /**\n     * Handles keydown event on datepicker content.\n     * @param {?} event The event.\n     * @return {?}\n     */\n    MdDatepickerContent.prototype._handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE) {\n            this.datepicker.close();\n            event.preventDefault();\n        }\n    };\n    return MdDatepickerContent;\n}());\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nvar MdDatepicker = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dialog\n     * @param {?} _overlay\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} _dateAdapter\n     * @param {?} _dir\n     * @param {?} _document\n     */\n    function MdDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         */\n        this.touchUi = false;\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this.selectedChanged = new EventEmitter();\n        /**\n         * Whether the calendar is open.\n         */\n        this.opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = \"md-datepicker-\" + datepickerUid++;\n        /**\n         * The currently selected date.\n         */\n        this._selected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n    }\n    Object.defineProperty(MdDatepicker.prototype, \"startAt\", {\n        /**\n         * The date to open the calendar to initially.\n         * @return {?}\n         */\n        get: function () {\n            // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n            // selected value is.\n            return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        set: function (date) { this._startAt = date; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepicker.prototype, \"_minDate\", {\n        /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepicker.prototype, \"_maxDate\", {\n        /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepicker.prototype, \"_dateFilter\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._datepickerInput && this._datepickerInput._dateFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdDatepicker.prototype.ngOnDestroy = function () {\n        this.close();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n        }\n        if (this._inputSubscription) {\n            this._inputSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Selects the given date and closes the currently open popup or dialog.\n     * @param {?} date\n     * @return {?}\n     */\n    MdDatepicker.prototype._selectAndClose = function (date) {\n        var /** @type {?} */ oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this.selectedChanged.emit(date);\n        }\n        this.close();\n    };\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    MdDatepicker.prototype._registerInput = function (input) {\n        var _this = this;\n        if (this._datepickerInput) {\n            throw Error('An MdDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe(function (value) { return _this._selected = value; });\n    };\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    MdDatepicker.prototype.open = function () {\n        if (this.opened) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MdDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this.opened = true;\n    };\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    MdDatepicker.prototype.close = function () {\n        if (!this.opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        if (this._focusedElementBeforeOpen && 'focus' in this._focusedElementBeforeOpen) {\n            this._focusedElementBeforeOpen.focus();\n            this._focusedElementBeforeOpen = null;\n        }\n        this.opened = false;\n    };\n    /**\n     * Open the calendar as a dialog.\n     * @return {?}\n     */\n    MdDatepicker.prototype._openAsDialog = function () {\n        var _this = this;\n        this._dialogRef = this._dialog.open(MdDatepickerContent, {\n            viewContainerRef: this._viewContainerRef,\n            direction: this._dir ? this._dir.value : 'ltr'\n        });\n        this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });\n        this._dialogRef.componentInstance.datepicker = this;\n    };\n    /**\n     * Open the calendar as a popup.\n     * @return {?}\n     */\n    MdDatepicker.prototype._openAsPopup = function () {\n        var _this = this;\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            var /** @type {?} */ componentRef = this._popupRef.attach(this._calendarPortal);\n            componentRef.instance.datepicker = this;\n            // Update the position once the calendar has rendered.\n            first.call(this._ngZone.onStable).subscribe(function () { return _this._popupRef.updatePosition(); });\n        }\n        this._popupRef.backdropClick().subscribe(function () { return _this.close(); });\n    };\n    /**\n     * Create the popup.\n     * @return {?}\n     */\n    MdDatepicker.prototype._createPopup = function () {\n        var /** @type {?} */ overlayState = new OverlayState();\n        overlayState.positionStrategy = this._createPopupPositionStrategy();\n        overlayState.hasBackdrop = true;\n        overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n        overlayState.direction = this._dir ? this._dir.value : 'ltr';\n        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n        this._popupRef = this._overlay.create(overlayState);\n    };\n    /**\n     * Create the popup PositionStrategy.\n     * @return {?}\n     */\n    MdDatepicker.prototype._createPopupPositionStrategy = function () {\n        return this._overlay.position()\n            .connectedTo(this._datepickerInput.getPopupConnectionElementRef(), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' })\n            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' });\n    };\n    return MdDatepicker;\n}());\nvar MD_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdDatepickerInput; }),\n    multi: true\n};\nvar MD_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdDatepickerInput; }),\n    multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nvar MdDatepickerInput = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _mdInputContainer\n     */\n    function MdDatepickerInput(_elementRef, _renderer, _dateAdapter, _dateFormats, _mdInputContainer) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._mdInputContainer = _mdInputContainer;\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        this._onTouched = function () { };\n        this._cvaOnChange = function () { };\n        this._validatorOnChange = function () { };\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = function (control) {\n            return (!_this.min || !control.value ||\n                _this._dateAdapter.compareDate(_this.min, control.value) <= 0) ?\n                null : { 'mdDatepickerMin': { 'min': _this.min, 'actual': control.value } };\n        };\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = function (control) {\n            return (!_this.max || !control.value ||\n                _this._dateAdapter.compareDate(_this.max, control.value) >= 0) ?\n                null : { 'mdDatepickerMax': { 'max': _this.max, 'actual': control.value } };\n        };\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = function (control) {\n            return !_this._dateFilter || !control.value || _this._dateFilter(control.value) ?\n                null : { 'mdDatepickerFilter': true };\n        };\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MD_DATE_FORMATS');\n        }\n    }\n    Object.defineProperty(MdDatepickerInput.prototype, \"mdDatepicker\", {\n        /**\n         * The datepicker that this input is associated with.\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value) {\n                this._datepicker = value;\n                this._datepicker._registerInput(this);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"matDatepicker\", {\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.mdDatepicker = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"mdDatepickerFilter\", {\n        /**\n         * @param {?} filter\n         * @return {?}\n         */\n        set: function (filter$$1) {\n            this._dateFilter = filter$$1;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"matDatepickerFilter\", {\n        /**\n         * @param {?} filter\n         * @return {?}\n         */\n        set: function (filter$$1) {\n            this.mdDatepickerFilter = filter$$1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"value\", {\n        /**\n         * The value of the input.\n         * @return {?}\n         */\n        get: function () {\n            return this._dateAdapter.parse(this._elementRef.nativeElement.value, this._dateFormats.parse.dateInput);\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n            var /** @type {?} */ oldDate = this.value;\n            this._renderer.setProperty(this._elementRef.nativeElement, 'value', date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n            if (!this._dateAdapter.sameDate(oldDate, date)) {\n                this._valueChange.emit(date);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"min\", {\n        /**\n         * The minimum valid date.\n         * @return {?}\n         */\n        get: function () { return this._min; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._min = value;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdDatepickerInput.prototype, \"max\", {\n        /**\n         * The maximum valid date.\n         * @return {?}\n         */\n        get: function () { return this._max; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._max = value;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this._datepicker) {\n            this._datepickerSubscription =\n                this._datepicker.selectedChanged.subscribe(function (selected) {\n                    _this.value = selected;\n                    _this._cvaOnChange(selected);\n                });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.ngOnDestroy = function () {\n        if (this._datepickerSubscription) {\n            this._datepickerSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.registerOnValidatorChange = function (fn) {\n        this._validatorOnChange = fn;\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.validate = function (c) {\n        return this._validator ? this._validator(c) : null;\n    };\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    MdDatepickerInput.prototype.getPopupConnectionElementRef = function () {\n        return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.registerOnChange = function (fn) {\n        this._cvaOnChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdDatepickerInput.prototype.setDisabledState = function (disabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdDatepickerInput.prototype._onKeydown = function (event) {\n        if (event.altKey && event.keyCode === DOWN_ARROW) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdDatepickerInput.prototype._onInput = function (value) {\n        var /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._cvaOnChange(date);\n        this._valueChange.emit(date);\n    };\n    return MdDatepickerInput;\n}());\nvar MdDatepickerToggle = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _intl\n     */\n    function MdDatepickerToggle(_intl) {\n        this._intl = _intl;\n    }\n    Object.defineProperty(MdDatepickerToggle.prototype, \"_datepicker\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.datepicker; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.datepicker = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdDatepickerToggle.prototype._open = function (event) {\n        if (this.datepicker) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    };\n    return MdDatepickerToggle;\n}());\nvar MdDatepickerModule = /*@__PURE__*/ (function () {\n    function MdDatepickerModule() {\n    }\n    return MdDatepickerModule;\n}());\n/**\n * Unique ID counter\n */\nvar nextId$3 = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /*@__PURE__*/ (function () {\n    function CdkAccordion() {\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = \"cdk-accordion-\" + nextId$3++;\n        this._multi = false;\n        this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the reset of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        /**\n         * Whether the accordion should allow multiple expanded accordion items simulateously.\n         * @return {?}\n         */\n        get: function () { return this._multi; },\n        /**\n         * @param {?} multi\n         * @return {?}\n         */\n        set: function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordion.prototype, \"hideToggle\", {\n        /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */\n        get: function () { return this._hideToggle; },\n        /**\n         * @param {?} show\n         * @return {?}\n         */\n        set: function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    return CdkAccordion;\n}());\n/**\n * Directive for a Material Design Accordion.\n */\nvar MdAccordion = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdAccordion, _super);\n    function MdAccordion() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MdAccordion;\n}(CdkAccordion));\n/**\n * Used to generate unique ID for each expansion panel.\n */\nvar nextId$4 = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar AccordionItem = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} accordion\n     * @param {?} _expansionDispatcher\n     */\n    function AccordionItem(accordion, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Event emitted every time the MdAccordianChild is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the MdAccordianChild is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the MdAccordianChild is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * The unique MdAccordianChild id.\n         */\n        this.id = \"cdk-accordion-child-\" + nextId$4++;\n        /**\n         * Unregister function for _expansionDispatcher *\n         */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n    }\n    Object.defineProperty(AccordionItem.prototype, \"expanded\", {\n        /**\n         * Whether the MdAccordianChild is expanded.\n         * @return {?}\n         */\n        get: function () { return this._expanded; },\n        /**\n         * @param {?} expanded\n         * @return {?}\n         */\n        set: function (expanded) {\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordonItem,\n                     * the name value is the id of the accordion.\n                     */\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    AccordionItem.prototype.ngOnDestroy = function () {\n        this.destroyed.emit();\n        this._removeUniqueSelectionListener();\n    };\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    AccordionItem.prototype.toggle = function () {\n        this.expanded = !this.expanded;\n    };\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    AccordionItem.prototype.close = function () {\n        this.expanded = false;\n    };\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    AccordionItem.prototype.open = function () {\n        this.expanded = true;\n    };\n    return AccordionItem;\n}());\n/**\n * Time and timing curve for expansion panel animations.\n */\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MdExpansionPanel = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdExpansionPanel, _super);\n    /**\n     * @param {?} accordion\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    function MdExpansionPanel(accordion, _uniqueSelectionDispatcher) {\n        var _this = _super.call(this, accordion, _uniqueSelectionDispatcher) || this;\n        /**\n         * Whether the toggle indicator should be hidden.\n         */\n        _this.hideToggle = false;\n        _this.accordion = accordion;\n        return _this;\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    MdExpansionPanel.prototype._getHideToggle = function () {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    };\n    /**\n     * Gets the panel's display mode.\n     * @return {?}\n     */\n    MdExpansionPanel.prototype._getDisplayMode = function () {\n        if (!this.expanded) {\n            return this._getExpandedState();\n        }\n        if (this.accordion) {\n            return this.accordion.displayMode;\n        }\n        return this._getExpandedState();\n    };\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MdExpansionPanel.prototype._getExpandedState = function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    return MdExpansionPanel;\n}(AccordionItem));\nvar MdExpansionPanelActionRow = /*@__PURE__*/ (function () {\n    function MdExpansionPanelActionRow() {\n    }\n    return MdExpansionPanelActionRow;\n}());\n/**\n * <md-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <md-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MdExpansionPanelHeader = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} panel\n     */\n    function MdExpansionPanelHeader(panel) {\n        this.panel = panel;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._toggle = function () {\n        this.panel.toggle();\n    };\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._isExpanded = function () {\n        return this.panel.expanded;\n    };\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._getExpandedState = function () {\n        return this.panel._getExpandedState();\n    };\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._getPanelId = function () {\n        return this.panel.id;\n    };\n    /**\n     * Gets whether the expand indicator is hidden.\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._getHideToggle = function () {\n        return this.panel.hideToggle;\n    };\n    /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MdExpansionPanelHeader.prototype._keyup = function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    };\n    return MdExpansionPanelHeader;\n}());\n/**\n * <md-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nvar MdExpansionPanelDescription = /*@__PURE__*/ (function () {\n    function MdExpansionPanelDescription() {\n    }\n    return MdExpansionPanelDescription;\n}());\n/**\n * <md-panel-title> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nvar MdExpansionPanelTitle = /*@__PURE__*/ (function () {\n    function MdExpansionPanelTitle() {\n    }\n    return MdExpansionPanelTitle;\n}());\nvar MdExpansionModule = /*@__PURE__*/ (function () {\n    function MdExpansionModule() {\n    }\n    return MdExpansionModule;\n}());\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nvar _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nvar MdTable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdTable, _super);\n    function MdTable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MdTable;\n}(_MdTable));\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nvar _MdHeaderCellBase = CdkHeaderCell;\nvar _MdCell = CdkCell;\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar MdHeaderCell = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdHeaderCell, _super);\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdHeaderCell(columnDef, elementRef, renderer) {\n        var _this = _super.call(this, columnDef, elementRef, renderer) || this;\n        renderer.addClass(elementRef.nativeElement, \"mat-column-\" + columnDef.name);\n        return _this;\n    }\n    return MdHeaderCell;\n}(_MdHeaderCellBase));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar MdCell = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdCell, _super);\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    function MdCell(columnDef, elementRef, renderer) {\n        var _this = _super.call(this, columnDef, elementRef, renderer) || this;\n        renderer.addClass(elementRef.nativeElement, \"mat-column-\" + columnDef.name);\n        return _this;\n    }\n    return MdCell;\n}(_MdCell));\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nvar _MdHeaderRow = CdkHeaderRow;\nvar _MdRow = CdkRow;\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nvar MdHeaderRow = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdHeaderRow, _super);\n    function MdHeaderRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MdHeaderRow;\n}(_MdHeaderRow));\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar MdRow = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MdRow, _super);\n    function MdRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MdRow;\n}(_MdRow));\nvar MdTableModule = /*@__PURE__*/ (function () {\n    function MdTableModule() {\n    }\n    return MdTableModule;\n}());\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getMdSortDuplicateMdSortableIdError(id) {\n    return Error(\"Cannot have two MdSortables with the same id (\" + id + \").\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMdSortHeaderNotContainedWithinMdSortError() {\n    return Error(\"MdSortHeader must be placed within a parent element with the MdSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMdSortHeaderMissingIdError() {\n    return Error(\"MdSortHeader must be provided with a unique id.\");\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nvar MdSort = /*@__PURE__*/ (function () {\n    function MdSort() {\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * The direction to set when an MdSortable is initially sorted.\n         * May be overriden by the MdSortable's sort start.\n         */\n        this.start = 'asc';\n        /**\n         * The sort direction of the currently active MdSortable.\n         */\n        this.direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.mdSortChange = new EventEmitter();\n    }\n    Object.defineProperty(MdSort.prototype, \"disableClear\", {\n        /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         * May be overriden by the MdSortable's disable clear input.\n         * @return {?}\n         */\n        get: function () { return this._disableClear; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n     * collection of MdSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MdSort.prototype.register = function (sortable) {\n        if (!sortable.id) {\n            throw getMdSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getMdSortDuplicateMdSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    };\n    /**\n     * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n     * collection of contained MdSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MdSort.prototype.deregister = function (sortable) {\n        this.sortables.delete(sortable.id);\n    };\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MdSort.prototype.sort = function (sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.mdSortChange.next({ active: this.active, direction: this.direction });\n    };\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MdSort.prototype.getNextSortDirection = function (sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        var /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        var /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        var /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    };\n    return MdSort;\n}());\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    var /** @type {?} */ sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nvar MdSortHeaderIntl = /*@__PURE__*/ (function () {\n    function MdSortHeaderIntl() {\n        this.sortButtonLabel = function (id) {\n            return \"Change sorting for \" + id;\n        };\n        /**\n         * A label to describe the current sort (visible only to screenreaders).\n         */\n        this.sortDescriptionLabel = function (id, direction) {\n            return \"Sorted by \" + id + \" \" + (direction == 'asc' ? 'ascending' : 'descending');\n        };\n    }\n    return MdSortHeaderIntl;\n}());\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MdSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nvar MdSortHeader = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _cdkColumnDef\n     */\n    function MdSortHeader(_intl, _changeDetectorRef, _sort, _cdkColumnDef) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._cdkColumnDef = _cdkColumnDef;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getMdSortHeaderNotContainedWithinMdSortError();\n        }\n        this.sortSubscription = _sort.mdSortChange.subscribe(function () { return _changeDetectorRef.markForCheck(); });\n    }\n    Object.defineProperty(MdSortHeader.prototype, \"disableClear\", {\n        /**\n         * Overrides the disable clear value of the containing MdSort for this MdSortable.\n         * @return {?}\n         */\n        get: function () { return this._disableClear; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdSortHeader.prototype, \"_id\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this.id; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) { this.id = v; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdSortHeader.prototype.ngOnInit = function () {\n        if (!this.id && this._cdkColumnDef) {\n            this.id = this._cdkColumnDef.name;\n        }\n        this._sort.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    MdSortHeader.prototype.ngOnDestroy = function () {\n        this._sort.deregister(this);\n        this.sortSubscription.unsubscribe();\n    };\n    /**\n     * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    MdSortHeader.prototype._isSorted = function () {\n        return this._sort.active == this.id && this._sort.direction;\n    };\n    return MdSortHeader;\n}());\nvar MdSortModule = /*@__PURE__*/ (function () {\n    function MdSortModule() {\n    }\n    return MdSortModule;\n}());\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nvar MdPaginatorIntl = /*@__PURE__*/ (function () {\n    function MdPaginatorIntl() {\n        /**\n         * A label for the page size selector.\n         */\n        this.itemsPerPageLabel = 'Items per page:';\n        /**\n         * A label for the button that increments the current page.\n         */\n        this.nextPageLabel = 'Next page';\n        /**\n         * A label for the button that decrements the current page.\n         */\n        this.previousPageLabel = 'Previous page';\n        /**\n         * A label for the range of items within the current page and the length of the whole list.\n         */\n        this.getRangeLabel = function (page, pageSize, length) {\n            if (length == 0 || pageSize == 0) {\n                return \"0 of \" + length;\n            }\n            length = Math.max(length, 0);\n            var startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            var endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return startIndex + 1 + \" - \" + endIndex + \" of \" + length;\n        };\n    }\n    return MdPaginatorIntl;\n}());\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nvar PageEvent = /*@__PURE__*/ (function () {\n    function PageEvent() {\n    }\n    return PageEvent;\n}());\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nvar MdPaginator = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _intl\n     */\n    function MdPaginator(_intl) {\n        this._intl = _intl;\n        /**\n         * The zero-based page index of the displayed list of items. Defaulted to 0.\n         */\n        this.pageIndex = 0;\n        /**\n         * The length of the total number of items that are being paginated. Defaulted to 0.\n         */\n        this.length = 0;\n        this._pageSize = 50;\n        this._pageSizeOptions = [];\n        /**\n         * Event emitted when the paginator changes the page size or page index.\n         */\n        this.page = new EventEmitter();\n    }\n    Object.defineProperty(MdPaginator.prototype, \"pageSize\", {\n        /**\n         * Number of items to display on a page. By default set to 50.\n         * @return {?}\n         */\n        get: function () { return this._pageSize; },\n        /**\n         * @param {?} pageSize\n         * @return {?}\n         */\n        set: function (pageSize) {\n            this._pageSize = pageSize;\n            this._updateDisplayedPageSizeOptions();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdPaginator.prototype, \"pageSizeOptions\", {\n        /**\n         * The set of provided page size options to display to the user.\n         * @return {?}\n         */\n        get: function () { return this._pageSizeOptions; },\n        /**\n         * @param {?} pageSizeOptions\n         * @return {?}\n         */\n        set: function (pageSizeOptions) {\n            this._pageSizeOptions = pageSizeOptions;\n            this._updateDisplayedPageSizeOptions();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdPaginator.prototype.ngOnInit = function () {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n    };\n    /**\n     * Advances to the next page if it exists.\n     * @return {?}\n     */\n    MdPaginator.prototype.nextPage = function () {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        this.pageIndex++;\n        this._emitPageEvent();\n    };\n    /**\n     * Move back to the previous page if it exists.\n     * @return {?}\n     */\n    MdPaginator.prototype.previousPage = function () {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        this.pageIndex--;\n        this._emitPageEvent();\n    };\n    /**\n     * Whether there is a previous page.\n     * @return {?}\n     */\n    MdPaginator.prototype.hasPreviousPage = function () {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    };\n    /**\n     * Whether there is a next page.\n     * @return {?}\n     */\n    MdPaginator.prototype.hasNextPage = function () {\n        var /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n        return this.pageIndex < numberOfPages && this.pageSize != 0;\n    };\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     * @param {?} pageSize\n     * @return {?}\n     */\n    MdPaginator.prototype._changePageSize = function (pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        var /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent();\n    };\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     * @return {?}\n     */\n    MdPaginator.prototype._updateDisplayedPageSizeOptions = function () {\n        if (!this._initialized) {\n            return;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort(function (a, b) { return a - b; });\n    };\n    /**\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\n     * @return {?}\n     */\n    MdPaginator.prototype._emitPageEvent = function () {\n        this.page.next({\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    };\n    return MdPaginator;\n}());\nvar MdPaginatorModule = /*@__PURE__*/ (function () {\n    function MdPaginatorModule() {\n    }\n    return MdPaginatorModule;\n}());\nvar MATERIAL_MODULES = [\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdChipsModule,\n    MdCheckboxModule,\n    MdDatepickerModule,\n    MdTableModule,\n    MdDialogModule,\n    MdExpansionModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdPaginatorModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdRippleModule,\n    MdSelectModule,\n    MdSidenavModule,\n    MdSliderModule,\n    MdSlideToggleModule,\n    MdSnackBarModule,\n    MdSortModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    OverlayModule,\n    PortalModule,\n    BidiModule,\n    StyleModule,\n    A11yModule,\n    PlatformModule,\n    MdCommonModule,\n    ObserveContentModule\n];\n/**\n * @deprecated\n */\nvar MaterialModule = /*@__PURE__*/ (function () {\n    function MaterialModule() {\n    }\n    return MaterialModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { coerceBooleanProperty, coerceNumberProperty, ObserveContentModule, ObserveContent, Dir, Directionality, BidiModule, Portal, BasePortalHost, ComponentPortal, TemplatePortal, PortalHostDirective, TemplatePortalDirective, PortalModule, DomPortalHost, GestureConfig, LiveAnnouncer, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_PROVIDER, InteractivityChecker, isFakeMousedownFromScreenReader, A11yModule, UniqueSelectionDispatcher, UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdLineModule, MdLine, MdLineSetter, CompatibilityModule, NoConflictStyleCompatibilityMode, MdCommonModule, MATERIAL_SANITY_CHECKS, MD_PLACEHOLDER_GLOBAL_OPTIONS, MD_ERROR_GLOBAL_OPTIONS, defaultErrorStateMatcher, showOnDirtyErrorStateMatcher, MdCoreModule, MdOptionModule, MdOptionSelectionChange, MdOption, MdOptgroupBase, _MdOptgroupMixinBase, MdOptgroup, PlatformModule, Platform, getSupportedInputTypes, OVERLAY_PROVIDERS, OverlayModule, Overlay, OverlayContainer, FullscreenOverlayContainer, OverlayRef, OverlayState, ConnectedOverlayDirective, OverlayOrigin, ViewportRuler, GlobalPositionStrategy, ConnectedPositionStrategy, ConnectionPositionPair, ScrollableViewProperties, ConnectedOverlayPositionChange, Scrollable, ScrollDispatcher, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, ScrollDispatchModule, MdRipple, MD_RIPPLE_GLOBAL_OPTIONS, RippleRef, RippleState, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION, MdRippleModule, SelectionModel, SelectionChange, FocusTrap, FocusTrapFactory, FocusTrapDeprecatedDirective, FocusTrapDirective, StyleModule, TOUCH_BUFFER_MS, FocusOriginMonitor, CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY, FOCUS_ORIGIN_MONITOR_PROVIDER, applyCssTransform, UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, PAGE_UP, PAGE_DOWN, HOME, END, ENTER, SPACE, TAB, ESCAPE, BACKSPACE, DELETE, MATERIAL_COMPATIBILITY_MODE, getMdCompatibilityInvalidPrefixError, MAT_ELEMENTS_SELECTOR, MD_ELEMENTS_SELECTOR, MatPrefixRejector, MdPrefixRejector, AnimationCurves, AnimationDurations, MdSelectionModule, MdPseudoCheckboxBase, _MdPseudoCheckboxBase, MdPseudoCheckbox, NativeDateModule, MdNativeDateModule, DateAdapter, MD_DATE_FORMATS, NativeDateAdapter, MD_NATIVE_DATE_FORMATS, MaterialModule, MdAutocompleteModule, MdAutocomplete, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MD_AUTOCOMPLETE_VALUE_ACCESSOR, getMdAutocompleteMissingPanelError, MdAutocompleteTrigger, MdButtonModule, MdButtonCssMatStyler, MdRaisedButtonCssMatStyler, MdIconButtonCssMatStyler, MdFab, MdMiniFab, MdButtonBase, _MdButtonMixinBase, MdButton, MdAnchor, MdButtonToggleModule, MdButtonToggleGroupBase, _MdButtonToggleGroupMixinBase, MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MdButtonToggleChange, MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle, MdCardModule, MdCardContent, MdCardTitle, MdCardSubtitle, MdCardActions, MdCardFooter, MdCardImage, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardXlImage, MdCardAvatar, MdCard, MdCardHeader, MdCardTitleGroup, MdChipsModule, MdChipList, MdChipBase, _MdChipMixinBase, MdBasicChip, MdChip, MdCheckboxModule, MD_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MdCheckboxChange, MdCheckboxBase, _MdCheckboxMixinBase, MdCheckbox, MdDatepickerModule, MdCalendar, MdCalendarCell, MdCalendarBody, MdDatepickerContent, MdDatepicker, MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS, MdDatepickerInput, MdDatepickerIntl, MdDatepickerToggle, MdMonthView, MdYearView, MdDialogModule, MD_DIALOG_DATA, MdDialog, throwMdDialogContentAlreadyAttachedError, MdDialogContainer, MdDialogClose, MdDialogTitle, MdDialogContent, MdDialogActions, MdDialogConfig, MdDialogRef, MdExpansionModule, CdkAccordion, MdAccordion, AccordionItem, MdExpansionPanel, MdExpansionPanelActionRow, MdExpansionPanelHeader, MdExpansionPanelDescription, MdExpansionPanelTitle, MdGridListModule, MdGridTile, MdGridList, MdIconModule, MdIconBase, _MdIconMixinBase, MdIcon, getMdIconNameNotFoundError, getMdIconNoHttpProviderError, getMdIconFailedToSanitizeError, MdIconRegistry, ICON_REGISTRY_PROVIDER_FACTORY, ICON_REGISTRY_PROVIDER, MdInputModule, MdTextareaAutosize, MdPlaceholder, MdHint, MdErrorDirective, MdPrefix, MdSuffix, MdInputDirective, MdInputContainer, getMdInputContainerPlaceholderConflictError, getMdInputContainerUnsupportedTypeError, getMdInputContainerDuplicatedHintError, getMdInputContainerMissingMdInputError, MdListModule, MdListDivider, MdList, MdListCssMatStyler, MdNavListCssMatStyler, MdDividerCssMatStyler, MdListAvatarCssMatStyler, MdListIconCssMatStyler, MdListSubheaderCssMatStyler, MdListItem, MdMenuModule, fadeInItems, transformMenu, MdMenu, MdMenuItem, MdMenuTrigger, MdPaginatorModule, PageEvent, MdPaginator, MdProgressBarModule, MdProgressBar, MdProgressSpinnerModule, PROGRESS_SPINNER_STROKE_WIDTH, MdProgressSpinnerCssMatStyler, MdProgressSpinnerBase, _MdProgressSpinnerMixinBase, MdProgressSpinner, MdSpinner, MdRadioModule, MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MdRadioChange, MdRadioGroupBase, _MdRadioGroupMixinBase, MdRadioGroup, MdRadioButtonBase, _MdRadioButtonMixinBase, MdRadioButton, MdSelectModule, fadeInContent, transformPanel, transformPlaceholder, SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT, SELECT_MAX_OPTIONS_DISPLAYED, SELECT_TRIGGER_HEIGHT, SELECT_OPTION_HEIGHT_ADJUSTMENT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_PADDING_Y, SELECT_PANEL_VIEWPORT_PADDING, MdSelectChange, MdSelectBase, _MdSelectMixinBase, MdSelect, MdSidenavModule, throwMdDuplicatedSidenavError, MdSidenavToggleResult, MdSidenav, MdSidenavContainer, MdSliderModule, MD_SLIDER_VALUE_ACCESSOR, MdSliderChange, MdSliderBase, _MdSliderMixinBase, MdSlider, SliderRenderer, MdSlideToggleModule, MD_SLIDE_TOGGLE_VALUE_ACCESSOR, MdSlideToggleChange, MdSlideToggleBase, _MdSlideToggleMixinBase, MdSlideToggle, MdSnackBarModule, MdSnackBar, SHOW_ANIMATION, HIDE_ANIMATION, MdSnackBarContainer, MdSnackBarConfig, MdSnackBarRef, SimpleSnackBar, MdSortModule, MdSortHeader, MdSortHeaderIntl, MdSort, MdTableModule, _MdHeaderCellBase, _MdCell, MdHeaderCell, MdCell, _MdTable, MdTable, _MdHeaderRow, _MdRow, MdHeaderRow, MdRow, MdTabsModule, MdInkBar, MdTabBody, MdTabHeader, MdTabLabelWrapper, MdTab, MdTabLabel, MdTabNav, MdTabLink, MdTabChangeEvent, MdTabGroup, MdTabLinkBase, _MdTabLinkMixinBase, MdToolbarModule, MdToolbarRow, MdToolbarBase, _MdToolbarMixinBase, MdToolbar, MdTooltipModule, TOUCHEND_HIDE_DELAY, SCROLL_THROTTLE_MS, getMdTooltipInvalidPositionError, MdTooltip, TooltipComponent, mixinColor as ɵu, mixinDisabled as ɵv, UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵh, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, OverlayPositionBuilder as ɵt, VIEWPORT_RULER_PROVIDER as ɵd, VIEWPORT_RULER_PROVIDER_FACTORY as ɵc, SCROLL_DISPATCHER_PROVIDER as ɵf, SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵe, RippleRenderer as ɵg, EXPANSION_PANEL_ANIMATION_TIMING as ɵi, MdGridAvatarCssMatStyler as ɵk, MdGridTileFooterCssMatStyler as ɵm, MdGridTileHeaderCssMatStyler as ɵl, MdGridTileText as ɵj, MdMenuItemBase as ɵn, _MdMenuItemMixinBase as ɵo, MdPaginatorIntl as ɵx, MdTabBase as ɵr, _MdTabMixinBase as ɵs, MdTabLabelWrapperBase as ɵp, _MdTabLabelWrapperMixinBase as ɵq };\n//# sourceMappingURL=material.es5.js.map\n",null]}